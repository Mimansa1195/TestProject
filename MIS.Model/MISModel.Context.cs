//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MIS.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MISEntities : DbContext
    {
        public MISEntities()
            : base("name=MISEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<acc_monitor_log> acc_monitor_log { get; set; }
        public virtual DbSet<AccessCard> AccessCards { get; set; }
        public virtual DbSet<AllocationTypeMaster> AllocationTypeMasters { get; set; }
        public virtual DbSet<AppraisalCycle> AppraisalCycles { get; set; }
        public virtual DbSet<AppraisalParameter> AppraisalParameters { get; set; }
        public virtual DbSet<AppraisalRating> AppraisalRatings { get; set; }
        public virtual DbSet<AppraisalSetting> AppraisalSettings { get; set; }
        public virtual DbSet<AppraisalSettingDesignation> AppraisalSettingDesignations { get; set; }
        public virtual DbSet<AppraisalSettingStage> AppraisalSettingStages { get; set; }
        public virtual DbSet<AppraisalStage> AppraisalStages { get; set; }
        public virtual DbSet<AsquareUserMapping> AsquareUserMappings { get; set; }
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<AssetDetail> AssetDetails { get; set; }
        public virtual DbSet<AssetRequest> AssetRequests { get; set; }
        public virtual DbSet<AssetStatu> AssetStatus { get; set; }
        public virtual DbSet<AssetTransaction> AssetTransactions { get; set; }
        public virtual DbSet<AttendanceDataChangeRequestApplication> AttendanceDataChangeRequestApplications { get; set; }
        public virtual DbSet<AttendanceDataChangeRequestCategory> AttendanceDataChangeRequestCategories { get; set; }
        public virtual DbSet<AttendanceReportAccess> AttendanceReportAccesses { get; set; }
        public virtual DbSet<AttendanceStatusMaster> AttendanceStatusMasters { get; set; }
        public virtual DbSet<AttendanceUploadHistoryAsquare> AttendanceUploadHistoryAsquares { get; set; }
        public virtual DbSet<BlockingReasonMaster> BlockingReasonMasters { get; set; }
        public virtual DbSet<CardPunchinData> CardPunchinDatas { get; set; }
        public virtual DbSet<CertificationsAndReward> CertificationsAndRewards { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ClientMaster> ClientMasters { get; set; }
        public virtual DbSet<ClientResourceMaster> ClientResourceMasters { get; set; }
        public virtual DbSet<ClientSideManagerMaster> ClientSideManagerMasters { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompetencyForm> CompetencyForms { get; set; }
        public virtual DbSet<CompetencyFormDetail> CompetencyFormDetails { get; set; }
        public virtual DbSet<CompetencyType> CompetencyTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<DashboardWidget> DashboardWidgets { get; set; }
        public virtual DbSet<DashboardWidgetRolePermission> DashboardWidgetRolePermissions { get; set; }
        public virtual DbSet<DashboardWidgetUserPermission> DashboardWidgetUserPermissions { get; set; }
        public virtual DbSet<DateWiseAttendanceAsquare> DateWiseAttendanceAsquares { get; set; }
        public virtual DbSet<DateWiseLeaveType> DateWiseLeaveTypes { get; set; }
        public virtual DbSet<DateWisePunchInData> DateWisePunchInDatas { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DepartmentWiseAssetLimit> DepartmentWiseAssetLimits { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<DesignationGroup> DesignationGroups { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentGroup> DocumentGroups { get; set; }
        public virtual DbSet<DocumentPermissionGroup> DocumentPermissionGroups { get; set; }
        public virtual DbSet<DocumentPermissionGroupPermission> DocumentPermissionGroupPermissions { get; set; }
        public virtual DbSet<DocumentTag> DocumentTags { get; set; }
        public virtual DbSet<Domain> Domains { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EmpAppraisal> EmpAppraisals { get; set; }
        public virtual DbSet<EmpAppraisalLog> EmpAppraisalLogs { get; set; }
        public virtual DbSet<EmpAppraisalParameterDetail> EmpAppraisalParameterDetails { get; set; }
        public virtual DbSet<EmpAppraisalSetting> EmpAppraisalSettings { get; set; }
        public virtual DbSet<EmpAppraisalSettingLog> EmpAppraisalSettingLogs { get; set; }
        public virtual DbSet<EmpAppraisalSettingStage> EmpAppraisalSettingStages { get; set; }
        public virtual DbSet<EmployeeProfile> EmployeeProfiles { get; set; }
        public virtual DbSet<EmployeeWish> EmployeeWishes { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<ExcludedUsersForAttendanceImport> ExcludedUsersForAttendanceImports { get; set; }
        public virtual DbSet<FeedbackStatu> FeedbackStatus { get; set; }
        public virtual DbSet<FeedbackType> FeedbackTypes { get; set; }
        public virtual DbSet<FinalLoggedTask> FinalLoggedTasks { get; set; }
        public virtual DbSet<Form> Forms { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<GoalStatu> GoalStatus { get; set; }
        public virtual DbSet<IdentityType> IdentityTypes { get; set; }
        public virtual DbSet<Industry> Industries { get; set; }
        public virtual DbSet<JobCategory> JobCategories { get; set; }
        public virtual DbSet<LeaveBalanceHistory> LeaveBalanceHistories { get; set; }
        public virtual DbSet<LeaveHistory> LeaveHistories { get; set; }
        public virtual DbSet<LeaveRequestApplicationDetail> LeaveRequestApplicationDetails { get; set; }
        public virtual DbSet<LeaveStatusMaster> LeaveStatusMasters { get; set; }
        public virtual DbSet<LeaveTypeMaster> LeaveTypeMasters { get; set; }
        public virtual DbSet<ListofHoliday> ListofHolidays { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationPremisesListMaster> LocationPremisesListMasters { get; set; }
        public virtual DbSet<LoggedTask> LoggedTasks { get; set; }
        public virtual DbSet<ManpowerRequisitionForm> ManpowerRequisitionForms { get; set; }
        public virtual DbSet<ManpowerRequisitionInvite> ManpowerRequisitionInvites { get; set; }
        public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }
        public virtual DbSet<MealCategory> MealCategories { get; set; }
        public virtual DbSet<MealDish> MealDishes { get; set; }
        public virtual DbSet<MealPackage> MealPackages { get; set; }
        public virtual DbSet<MealPackageDetail> MealPackageDetails { get; set; }
        public virtual DbSet<MealPackageFeedback> MealPackageFeedbacks { get; set; }
        public virtual DbSet<MealPeriod> MealPeriods { get; set; }
        public virtual DbSet<MealType> MealTypes { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenusApprovalLevel> MenusApprovalLevels { get; set; }
        public virtual DbSet<MenusRolePermission> MenusRolePermissions { get; set; }
        public virtual DbSet<MenusUserDelegation> MenusUserDelegations { get; set; }
        public virtual DbSet<MenusUserPermission> MenusUserPermissions { get; set; }
        public virtual DbSet<Occupation> Occupations { get; set; }
        public virtual DbSet<Policy> Policies { get; set; }
        public virtual DbSet<ProfessionalAndEducationalExperience> ProfessionalAndEducationalExperiences { get; set; }
        public virtual DbSet<ProfileRequest> ProfileRequests { get; set; }
        public virtual DbSet<ProjectIndustryType> ProjectIndustryTypes { get; set; }
        public virtual DbSet<ProjectMaster> ProjectMasters { get; set; }
        public virtual DbSet<ProjectPrefrence> ProjectPrefrences { get; set; }
        public virtual DbSet<ProjectRole> ProjectRoles { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectStatu> ProjectStatus { get; set; }
        public virtual DbSet<ProjectTeamMember> ProjectTeamMembers { get; set; }
        public virtual DbSet<ProjectVertical> ProjectVerticals { get; set; }
        public virtual DbSet<Relationship> Relationships { get; set; }
        public virtual DbSet<RequestCompOff> RequestCompOffs { get; set; }
        public virtual DbSet<RequestCompOffHistory> RequestCompOffHistories { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SchedulerAction> SchedulerActions { get; set; }
        public virtual DbSet<SeatAllocationDetail> SeatAllocationDetails { get; set; }
        public virtual DbSet<SeatCheckDetail> SeatCheckDetails { get; set; }
        public virtual DbSet<SeatDetailTemp> SeatDetailTemps { get; set; }
        public virtual DbSet<SeatItemMaster> SeatItemMasters { get; set; }
        public virtual DbSet<SeatMaster> SeatMasters { get; set; }
        public virtual DbSet<SeatStatusMaster> SeatStatusMasters { get; set; }
        public virtual DbSet<SeatTypeMaster> SeatTypeMasters { get; set; }
        public virtual DbSet<SharedGroupDocument> SharedGroupDocuments { get; set; }
        public virtual DbSet<ShareDocument> ShareDocuments { get; set; }
        public virtual DbSet<ShiftMaster> ShiftMasters { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<SkillLevel> SkillLevels { get; set; }
        public virtual DbSet<SkillType> SkillTypes { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<TaskSubDetail1> TaskSubDetail1 { get; set; }
        public virtual DbSet<TaskSubDetail2> TaskSubDetail2 { get; set; }
        public virtual DbSet<TaskTeam> TaskTeams { get; set; }
        public virtual DbSet<TaskTeamTaskTypeMapping> TaskTeamTaskTypeMappings { get; set; }
        public virtual DbSet<TaskTemplate> TaskTemplates { get; set; }
        public virtual DbSet<TaskType> TaskTypes { get; set; }
        public virtual DbSet<TaskTypeTaskSubDetail1Mapping> TaskTypeTaskSubDetail1Mapping { get; set; }
        public virtual DbSet<TaskTypeTaskSubDetail2Mapping> TaskTypeTaskSubDetail2Mapping { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamEmailType> TeamEmailTypes { get; set; }
        public virtual DbSet<TeamEmailTypeMapping> TeamEmailTypeMappings { get; set; }
        public virtual DbSet<TeamRole> TeamRoles { get; set; }
        public virtual DbSet<TimeSheet> TimeSheets { get; set; }
        public virtual DbSet<TimeSheetReportAccess> TimeSheetReportAccesses { get; set; }
        public virtual DbSet<TimesheetStatu> TimesheetStatus { get; set; }
        public virtual DbSet<TimeSheetTaskMapping> TimeSheetTaskMappings { get; set; }
        public virtual DbSet<Timezone> Timezones { get; set; }
        public virtual DbSet<UserAchievement> UserAchievements { get; set; }
        public virtual DbSet<UserAchievementComment> UserAchievementComments { get; set; }
        public virtual DbSet<UserActivity> UserActivities { get; set; }
        public virtual DbSet<UserActivityLog> UserActivityLogs { get; set; }
        public virtual DbSet<UserAddressDetail> UserAddressDetails { get; set; }
        public virtual DbSet<UserClientSideManagerAndProjectMapping> UserClientSideManagerAndProjectMappings { get; set; }
        public virtual DbSet<UserFamilyDetail> UserFamilyDetails { get; set; }
        public virtual DbSet<UserFeedback> UserFeedbacks { get; set; }
        public virtual DbSet<UserForm> UserForms { get; set; }
        public virtual DbSet<UserHierarchy> UserHierarchies { get; set; }
        public virtual DbSet<UserShiftMapping> UserShiftMappings { get; set; }
        public virtual DbSet<UserSkill> UserSkills { get; set; }
        public virtual DbSet<UsersToken> UsersTokens { get; set; }
        public virtual DbSet<UserTeamMapping> UserTeamMappings { get; set; }
        public virtual DbSet<Vertical> Verticals { get; set; }
        public virtual DbSet<VisitorDetail> VisitorDetails { get; set; }
        public virtual DbSet<VisitorPurpose> VisitorPurposes { get; set; }
        public virtual DbSet<WeekDay> WeekDays { get; set; }
        public virtual DbSet<WishType> WishTypes { get; set; }
        public virtual DbSet<WPSCheckItemMaster> WPSCheckItemMasters { get; set; }
        public virtual DbSet<AssetDetailAttribute> AssetDetailAttributes { get; set; }
        public virtual DbSet<AttendanceDataChangeRequestHistory> AttendanceDataChangeRequestHistories { get; set; }
        public virtual DbSet<ManagementEmployee> ManagementEmployees { get; set; }
        public virtual DbSet<TimeSheetFinalTask> TimeSheetFinalTasks { get; set; }
        public virtual DbSet<View_PremisesFloorMapping> View_PremisesFloorMapping { get; set; }
        public virtual DbSet<View_SeatMaster> View_SeatMaster { get; set; }
        public virtual DbSet<vwActiveStaffMember> vwActiveStaffMembers { get; set; }
        public virtual DbSet<vwAttendanceReportAccess> vwAttendanceReportAccesses { get; set; }
        public virtual DbSet<vwEligibleUsersToFillTimesheet> vwEligibleUsersToFillTimesheets { get; set; }
        public virtual DbSet<vwEmpAppraisalSetting> vwEmpAppraisalSettings { get; set; }
        public virtual DbSet<vwListLockedUser> vwListLockedUsers { get; set; }
        public virtual DbSet<vwTasksForTaskVerification> vwTasksForTaskVerifications { get; set; }
        public virtual DbSet<vwTeamWiseUserInfo> vwTeamWiseUserInfoes { get; set; }
        public virtual DbSet<vwTimeSheetApprovedTasksForClientReport> vwTimeSheetApprovedTasksForClientReports { get; set; }
        public virtual DbSet<vwTimeSheetApprovedTasksForInternalReport> vwTimeSheetApprovedTasksForInternalReports { get; set; }
        public virtual DbSet<vwTimeSheetReportAccess> vwTimeSheetReportAccesses { get; set; }
        public virtual DbSet<vwTimesheetReportAccessForAllTeam> vwTimesheetReportAccessForAllTeams { get; set; }
        public virtual DbSet<vwUserDetail> vwUserDetails { get; set; }
        public virtual DbSet<vwUserTeamMapping> vwUserTeamMappings { get; set; }
        public virtual DbSet<Tournament> Tournaments { get; set; }
        public virtual DbSet<TournamentCategory> TournamentCategories { get; set; }
        public virtual DbSet<TournamentSchedule> TournamentSchedules { get; set; }
        public virtual DbSet<TournamentScore> TournamentScores { get; set; }
        public virtual DbSet<TournamentTeam> TournamentTeams { get; set; }
        public virtual DbSet<OutingRequest> OutingRequests { get; set; }
        public virtual DbSet<OutingRequestDetail> OutingRequestDetails { get; set; }
        public virtual DbSet<OutingRequestHistory> OutingRequestHistories { get; set; }
        public virtual DbSet<OutingRequestStatu> OutingRequestStatus { get; set; }
        public virtual DbSet<OutingType> OutingTypes { get; set; }
        public virtual DbSet<LegitimateLeaveRequestHistory> LegitimateLeaveRequestHistories { get; set; }
        public virtual DbSet<LegitimateLeaveStatu> LegitimateLeaveStatus { get; set; }
        public virtual DbSet<UserGoalComment> UserGoalComments { get; set; }
        public virtual DbSet<LeaveRequestApplication> LeaveRequestApplications { get; set; }
        public virtual DbSet<LegitimateLeaveRequest> LegitimateLeaveRequests { get; set; }
        public virtual DbSet<RequestCompOffDetail> RequestCompOffDetails { get; set; }
        public virtual DbSet<TempUserAddressDetail> TempUserAddressDetails { get; set; }
        public virtual DbSet<UserAccessCard> UserAccessCards { get; set; }
        public virtual DbSet<PimcoUser> PimcoUsers { get; set; }
        public virtual DbSet<PimcoUserExpiration> PimcoUserExpirations { get; set; }
        public virtual DbSet<TempUserShift> TempUserShifts { get; set; }
        public virtual DbSet<TempUserShiftDetail> TempUserShiftDetails { get; set; }
        public virtual DbSet<TempUserShiftHistory> TempUserShiftHistories { get; set; }
        public virtual DbSet<UserPromotionHistory> UserPromotionHistories { get; set; }
        public virtual DbSet<ReferralDetail> ReferralDetails { get; set; }
        public virtual DbSet<ReferralReview> ReferralReviews { get; set; }
        public virtual DbSet<Referral> Referrals { get; set; }
        public virtual DbSet<TrainingStatu> TrainingStatus { get; set; }
        public virtual DbSet<Training> Trainings { get; set; }
        public virtual DbSet<TrainingDetail> TrainingDetails { get; set; }
        public virtual DbSet<TimesheetExcludedUser> TimesheetExcludedUsers { get; set; }
        public virtual DbSet<ReimbursementCategory> ReimbursementCategories { get; set; }
        public virtual DbSet<ReimbursementDetail> ReimbursementDetails { get; set; }
        public virtual DbSet<ReimbursementHistory> ReimbursementHistories { get; set; }
        public virtual DbSet<ReimbursementStatu> ReimbursementStatus { get; set; }
        public virtual DbSet<ReimbursementType> ReimbursementTypes { get; set; }
        public virtual DbSet<UserAchievementForMidYear> UserAchievementForMidYears { get; set; }
        public virtual DbSet<ReimbursementRequest> ReimbursementRequests { get; set; }
        public virtual DbSet<LNSAStatusMaster> LNSAStatusMasters { get; set; }
        public virtual DbSet<RequestLnsaHistory> RequestLnsaHistories { get; set; }
        public virtual DbSet<RequestLnsa> RequestLnsas { get; set; }
        public virtual DbSet<DateWiseAttendance> DateWiseAttendances { get; set; }
        public virtual DbSet<DateWiseLNSA> DateWiseLNSAs { get; set; }
        public virtual DbSet<LeaveBalance> LeaveBalances { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<EmployeeWiseWeekOff> EmployeeWiseWeekOffs { get; set; }
        public virtual DbSet<DateMaster> DateMasters { get; set; }
        public virtual DbSet<InvoiceRequestDetail> InvoiceRequestDetails { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceRequest> InvoiceRequests { get; set; }
        public virtual DbSet<PimcoAchievement> PimcoAchievements { get; set; }
        public virtual DbSet<AdvanceLeave> AdvanceLeaves { get; set; }
        public virtual DbSet<AdvanceLeaveDetail> AdvanceLeaveDetails { get; set; }
        public virtual DbSet<TempCardIssueDetail> TempCardIssueDetails { get; set; }
        public virtual DbSet<vwAllUser> vwAllUsers { get; set; }
        public virtual DbSet<OnshoreManager> OnshoreManagers { get; set; }
        public virtual DbSet<UsersOnshoreMgrMapping> UsersOnshoreMgrMappings { get; set; }
        public virtual DbSet<CabStatusMaster> CabStatusMasters { get; set; }
        public virtual DbSet<PimcoMonthlyAchievement> PimcoMonthlyAchievements { get; set; }
        public virtual DbSet<PimcoMonthlyAchievementDetail> PimcoMonthlyAchievementDetails { get; set; }
        public virtual DbSet<PimcoAchievementDetail> PimcoAchievementDetails { get; set; }
        public virtual DbSet<vwActiveUser> vwActiveUsers { get; set; }
        public virtual DbSet<AssetsBrand> AssetsBrands { get; set; }
        public virtual DbSet<AssetsMaster> AssetsMasters { get; set; }
        public virtual DbSet<AssetType> AssetTypes { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<GSOCProject> GSOCProjects { get; set; }
        public virtual DbSet<GSOCProjectSubscriber> GSOCProjectSubscribers { get; set; }
        public virtual DbSet<UsersHealthInsurance> UsersHealthInsurances { get; set; }
        public virtual DbSet<ChangeExtnRequest> ChangeExtnRequests { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<UsersAssetDetail> UsersAssetDetails { get; set; }
        public virtual DbSet<CabPickDropLocation> CabPickDropLocations { get; set; }
        public virtual DbSet<CabRequest> CabRequests { get; set; }
        public virtual DbSet<CabServiceType> CabServiceTypes { get; set; }
        public virtual DbSet<CabShiftMaster> CabShiftMasters { get; set; }
        public virtual DbSet<SupportingStaffMember> SupportingStaffMembers { get; set; }
        public virtual DbSet<VehicleDetail> VehicleDetails { get; set; }
        public virtual DbSet<PimcoProjectTeamMember> PimcoProjectTeamMembers { get; set; }
        public virtual DbSet<PimcoProjectVertical> PimcoProjectVerticals { get; set; }
        public virtual DbSet<PimcoProject> PimcoProjects { get; set; }
        public virtual DbSet<CabRequestHistory> CabRequestHistories { get; set; }
        public virtual DbSet<UserLocationHistory> UserLocationHistories { get; set; }
        public virtual DbSet<TempUserRegistration> TempUserRegistrations { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<API> APIs { get; set; }
        public virtual DbSet<APIRolePermission> APIRolePermissions { get; set; }
        public virtual DbSet<APIUserPermission> APIUserPermissions { get; set; }
        public virtual DbSet<HttpVerb> HttpVerbs { get; set; }
        public virtual DbSet<UserGoal> UserGoals { get; set; }
        public virtual DbSet<UserGoalHistory> UserGoalHistories { get; set; }
        public virtual DbSet<GoalCategory> GoalCategories { get; set; }
        public virtual DbSet<TeamGoal> TeamGoals { get; set; }
        public virtual DbSet<TeamGoalComment> TeamGoalComments { get; set; }
        public virtual DbSet<TeamGoalHistory> TeamGoalHistories { get; set; }
    
        [DbFunction("MISEntities", "ExplodeDates")]
        public virtual IQueryable<ExplodeDates_Result> ExplodeDates(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ExplodeDates_Result>("[MISEntities].[ExplodeDates](@startdate, @enddate)", startdateParameter, enddateParameter);
        }
    
        [DbFunction("MISEntities", "GetMonthList")]
        public virtual IQueryable<GetMonthList_Result> GetMonthList(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMonthList_Result>("[MISEntities].[GetMonthList](@StartDate, @EndDate)", startDateParameter, endDateParameter);
        }
    
        [DbFunction("MISEntities", "GetRowsFromCommaSeparatedString")]
        public virtual IQueryable<GetRowsFromCommaSeparatedString_Result> GetRowsFromCommaSeparatedString(string input)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetRowsFromCommaSeparatedString_Result>("[MISEntities].[GetRowsFromCommaSeparatedString](@Input)", inputParameter);
        }
    
        public virtual int DependentTable(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DependentTable", tableNameParameter);
        }
    
        public virtual ObjectResult<GetLeaveInformation_Result> GetLeaveInformation(Nullable<long> leaveRequestApplicationId)
        {
            var leaveRequestApplicationIdParameter = leaveRequestApplicationId.HasValue ?
                new ObjectParameter("LeaveRequestApplicationId", leaveRequestApplicationId) :
                new ObjectParameter("LeaveRequestApplicationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveInformation_Result>("GetLeaveInformation", leaveRequestApplicationIdParameter);
        }
    
        public virtual int GetRowCount(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRowCount", tableNameParameter);
        }
    
        public virtual int Proc_InsertTempCardIssueDetails(Nullable<int> employeeId, Nullable<int> accessCardId, string reason, ObjectParameter succes)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var accessCardIdParameter = accessCardId.HasValue ?
                new ObjectParameter("AccessCardId", accessCardId) :
                new ObjectParameter("AccessCardId", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_InsertTempCardIssueDetails", employeeIdParameter, accessCardIdParameter, reasonParameter, succes);
        }
    
        public virtual int Proc_InsertVisitorDetails(string visitor_FName, string visitor_LName, string visitor_Address, string visitor_ContactNo, string visitor_Email, string visitor_AppointmentWith, string visitor_Purpose, string visitor_IdentityProof, string visitor_PhotoUrl, string visitor_IdPhotoUrl, string otheridcard, string accessoriesPhotoUrl, Nullable<int> readPolicy, string otherPurpose, string colleagues, string visitor_cardno, string companyName, ObjectParameter succes)
        {
            var visitor_FNameParameter = visitor_FName != null ?
                new ObjectParameter("Visitor_FName", visitor_FName) :
                new ObjectParameter("Visitor_FName", typeof(string));
    
            var visitor_LNameParameter = visitor_LName != null ?
                new ObjectParameter("Visitor_LName", visitor_LName) :
                new ObjectParameter("Visitor_LName", typeof(string));
    
            var visitor_AddressParameter = visitor_Address != null ?
                new ObjectParameter("Visitor_Address", visitor_Address) :
                new ObjectParameter("Visitor_Address", typeof(string));
    
            var visitor_ContactNoParameter = visitor_ContactNo != null ?
                new ObjectParameter("Visitor_ContactNo", visitor_ContactNo) :
                new ObjectParameter("Visitor_ContactNo", typeof(string));
    
            var visitor_EmailParameter = visitor_Email != null ?
                new ObjectParameter("Visitor_Email", visitor_Email) :
                new ObjectParameter("Visitor_Email", typeof(string));
    
            var visitor_AppointmentWithParameter = visitor_AppointmentWith != null ?
                new ObjectParameter("Visitor_AppointmentWith", visitor_AppointmentWith) :
                new ObjectParameter("Visitor_AppointmentWith", typeof(string));
    
            var visitor_PurposeParameter = visitor_Purpose != null ?
                new ObjectParameter("Visitor_Purpose", visitor_Purpose) :
                new ObjectParameter("Visitor_Purpose", typeof(string));
    
            var visitor_IdentityProofParameter = visitor_IdentityProof != null ?
                new ObjectParameter("Visitor_IdentityProof", visitor_IdentityProof) :
                new ObjectParameter("Visitor_IdentityProof", typeof(string));
    
            var visitor_PhotoUrlParameter = visitor_PhotoUrl != null ?
                new ObjectParameter("Visitor_PhotoUrl", visitor_PhotoUrl) :
                new ObjectParameter("Visitor_PhotoUrl", typeof(string));
    
            var visitor_IdPhotoUrlParameter = visitor_IdPhotoUrl != null ?
                new ObjectParameter("Visitor_IdPhotoUrl", visitor_IdPhotoUrl) :
                new ObjectParameter("Visitor_IdPhotoUrl", typeof(string));
    
            var otheridcardParameter = otheridcard != null ?
                new ObjectParameter("otheridcard", otheridcard) :
                new ObjectParameter("otheridcard", typeof(string));
    
            var accessoriesPhotoUrlParameter = accessoriesPhotoUrl != null ?
                new ObjectParameter("AccessoriesPhotoUrl", accessoriesPhotoUrl) :
                new ObjectParameter("AccessoriesPhotoUrl", typeof(string));
    
            var readPolicyParameter = readPolicy.HasValue ?
                new ObjectParameter("ReadPolicy", readPolicy) :
                new ObjectParameter("ReadPolicy", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var colleaguesParameter = colleagues != null ?
                new ObjectParameter("Colleagues", colleagues) :
                new ObjectParameter("Colleagues", typeof(string));
    
            var visitor_cardnoParameter = visitor_cardno != null ?
                new ObjectParameter("Visitor_cardno", visitor_cardno) :
                new ObjectParameter("Visitor_cardno", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_InsertVisitorDetails", visitor_FNameParameter, visitor_LNameParameter, visitor_AddressParameter, visitor_ContactNoParameter, visitor_EmailParameter, visitor_AppointmentWithParameter, visitor_PurposeParameter, visitor_IdentityProofParameter, visitor_PhotoUrlParameter, visitor_IdPhotoUrlParameter, otheridcardParameter, accessoriesPhotoUrlParameter, readPolicyParameter, otherPurposeParameter, colleaguesParameter, visitor_cardnoParameter, companyNameParameter, succes);
        }
    
        public virtual int Proc_ReturnTempCard(Nullable<int> issueId, ObjectParameter succes)
        {
            var issueIdParameter = issueId.HasValue ?
                new ObjectParameter("IssueId", issueId) :
                new ObjectParameter("IssueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ReturnTempCard", issueIdParameter, succes);
        }
    
        public virtual int Proc_SelectAuthUsersList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SelectAuthUsersList");
        }
    
        public virtual ObjectResult<Proc_SelectCards_Result> Proc_SelectCards(Nullable<bool> isPimcoEmp)
        {
            var isPimcoEmpParameter = isPimcoEmp.HasValue ?
                new ObjectParameter("IsPimcoEmp", isPimcoEmp) :
                new ObjectParameter("IsPimcoEmp", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_SelectCards_Result>("Proc_SelectCards", isPimcoEmpParameter);
        }
    
        public virtual int Proc_SelectIssuedTempCardDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SelectIssuedTempCardDetails");
        }
    
        public virtual ObjectResult<Proc_SelectVisitorDetails_Result> Proc_SelectVisitorDetails(string visitor_TimeIn)
        {
            var visitor_TimeInParameter = visitor_TimeIn != null ?
                new ObjectParameter("Visitor_TimeIn", visitor_TimeIn) :
                new ObjectParameter("Visitor_TimeIn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_SelectVisitorDetails_Result>("Proc_SelectVisitorDetails", visitor_TimeInParameter);
        }
    
        public virtual ObjectResult<Proc_SelectVisitorDetailsWithId_Result> Proc_SelectVisitorDetailsWithId(Nullable<int> visitorId)
        {
            var visitorIdParameter = visitorId.HasValue ?
                new ObjectParameter("VisitorId", visitorId) :
                new ObjectParameter("VisitorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_SelectVisitorDetailsWithId_Result>("Proc_SelectVisitorDetailsWithId", visitorIdParameter);
        }
    
        public virtual int Proc_TimeOutVisitor(Nullable<int> visitorId, ObjectParameter succes, ObjectParameter visitorEmail)
        {
            var visitorIdParameter = visitorId.HasValue ?
                new ObjectParameter("VisitorId", visitorId) :
                new ObjectParameter("VisitorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_TimeOutVisitor", visitorIdParameter, succes, visitorEmail);
        }
    
        public virtual ObjectResult<Nullable<int>> spAddAccessCard(string accessCardNo, Nullable<bool> isPimcoCard, Nullable<bool> isTemporaryCard, Nullable<int> userId)
        {
            var accessCardNoParameter = accessCardNo != null ?
                new ObjectParameter("AccessCardNo", accessCardNo) :
                new ObjectParameter("AccessCardNo", typeof(string));
    
            var isPimcoCardParameter = isPimcoCard.HasValue ?
                new ObjectParameter("IsPimcoCard", isPimcoCard) :
                new ObjectParameter("IsPimcoCard", typeof(bool));
    
            var isTemporaryCardParameter = isTemporaryCard.HasValue ?
                new ObjectParameter("IsTemporaryCard", isTemporaryCard) :
                new ObjectParameter("IsTemporaryCard", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAddAccessCard", accessCardNoParameter, isPimcoCardParameter, isTemporaryCardParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spAllocateAsset_Result> spAllocateAsset(Nullable<long> requestId, Nullable<long> assetDetailId, Nullable<int> userId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(long));
    
            var assetDetailIdParameter = assetDetailId.HasValue ?
                new ObjectParameter("AssetDetailId", assetDetailId) :
                new ObjectParameter("AssetDetailId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAllocateAsset_Result>("spAllocateAsset", requestIdParameter, assetDetailIdParameter, userIdParameter);
        }
    
        public virtual int spAssignDongle(Nullable<int> userId, Nullable<int> requestId, string serialNumber, string simNumbar, string otherDetails, string comments)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var simNumbarParameter = simNumbar != null ?
                new ObjectParameter("SimNumbar", simNumbar) :
                new ObjectParameter("SimNumbar", typeof(string));
    
            var otherDetailsParameter = otherDetails != null ?
                new ObjectParameter("OtherDetails", otherDetails) :
                new ObjectParameter("OtherDetails", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAssignDongle", userIdParameter, requestIdParameter, serialNumberParameter, simNumbarParameter, otherDetailsParameter, commentsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCancelLeave(Nullable<int> userId, Nullable<long> leaveRequestApplicationId, string remarks)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var leaveRequestApplicationIdParameter = leaveRequestApplicationId.HasValue ?
                new ObjectParameter("LeaveRequestApplicationId", leaveRequestApplicationId) :
                new ObjectParameter("LeaveRequestApplicationId", typeof(long));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCancelLeave", userIdParameter, leaveRequestApplicationIdParameter, remarksParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spChangeAccessCardState(Nullable<int> accessCardId, Nullable<int> state, Nullable<int> userId)
        {
            var accessCardIdParameter = accessCardId.HasValue ?
                new ObjectParameter("accessCardId", accessCardId) :
                new ObjectParameter("accessCardId", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spChangeAccessCardState", accessCardIdParameter, stateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spChangeFormStatus(Nullable<int> formId, Nullable<int> status, Nullable<int> userId)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spChangeFormStatus", formIdParameter, statusParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spCreateAssetRequest(Nullable<long> typeId, string reason, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> returnDate, Nullable<int> userId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(long));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spCreateAssetRequest", typeIdParameter, reasonParameter, issueDateParameter, returnDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spFetchActiveEmployees_Result> spFetchActiveEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchActiveEmployees_Result>("spFetchActiveEmployees");
        }
    
        public virtual ObjectResult<spFetchAllReportingManagers_Result> spFetchAllReportingManagers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllReportingManagers_Result>("spFetchAllReportingManagers");
        }
    
        public virtual ObjectResult<spFetchAllUnmappedAccessCard_Result> spFetchAllUnmappedAccessCard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllUnmappedAccessCard_Result>("spFetchAllUnmappedAccessCard");
        }
    
        public virtual ObjectResult<spFetchAppovedTasksForTaskVerification_Result> spFetchAppovedTasksForTaskVerification(Nullable<int> userId, Nullable<int> weekNo, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var weekNoParameter = weekNo.HasValue ?
                new ObjectParameter("WeekNo", weekNo) :
                new ObjectParameter("WeekNo", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAppovedTasksForTaskVerification_Result>("spFetchAppovedTasksForTaskVerification", userIdParameter, weekNoParameter, yearParameter);
        }
    
        public virtual ObjectResult<spFetchCompletedForms_Result> spFetchCompletedForms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchCompletedForms_Result>("spFetchCompletedForms");
        }
    
        public virtual ObjectResult<spFetchCompletedTimeSheets_Result> spFetchCompletedTimeSheets(Nullable<int> weekNo, Nullable<int> year, Nullable<int> userId)
        {
            var weekNoParameter = weekNo.HasValue ?
                new ObjectParameter("WeekNo", weekNo) :
                new ObjectParameter("WeekNo", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchCompletedTimeSheets_Result>("spFetchCompletedTimeSheets", weekNoParameter, yearParameter, userIdParameter);
        }
    
        public virtual int spFetchCurrentWeekInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchCurrentWeekInfo");
        }
    
        public virtual ObjectResult<spFetchIncompleteForms_Result> spFetchIncompleteForms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchIncompleteForms_Result>("spFetchIncompleteForms");
        }
    
        public virtual ObjectResult<spFetchListOfEmployeesOnLeaveOrWfh_Result> spFetchListOfEmployeesOnLeaveOrWfh(string team)
        {
            var teamParameter = team != null ?
                new ObjectParameter("Team", team) :
                new ObjectParameter("Team", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchListOfEmployeesOnLeaveOrWfh_Result>("spFetchListOfEmployeesOnLeaveOrWfh", teamParameter);
        }
    
        public virtual ObjectResult<spFetchManpowerForm_Result> spFetchManpowerForm(Nullable<long> createdBy)
        {
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchManpowerForm_Result>("spFetchManpowerForm", createdByParameter);
        }
    
        public virtual ObjectResult<string> spFetchPendingActivitiesForManagerApproval(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spFetchPendingActivitiesForManagerApproval", userIdParameter);
        }
    
        public virtual ObjectResult<spFetchPendingTimeSheets_Result> spFetchPendingTimeSheets(Nullable<int> weekNo, Nullable<int> year, Nullable<int> userId)
        {
            var weekNoParameter = weekNo.HasValue ?
                new ObjectParameter("WeekNo", weekNo) :
                new ObjectParameter("WeekNo", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchPendingTimeSheets_Result>("spFetchPendingTimeSheets", weekNoParameter, yearParameter, userIdParameter);
        }
    
        public virtual int spFetchPendingTimeSheetsForTeam(Nullable<long> userId, Nullable<long> teamId, Nullable<int> weekNo, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(long));
    
            var weekNoParameter = weekNo.HasValue ?
                new ObjectParameter("WeekNo", weekNo) :
                new ObjectParameter("WeekNo", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchPendingTimeSheetsForTeam", userIdParameter, teamIdParameter, weekNoParameter, yearParameter);
        }
    
        public virtual ObjectResult<spFetchProjectsAssignedToUser_Result> spFetchProjectsAssignedToUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchProjectsAssignedToUser_Result>("spFetchProjectsAssignedToUser", userIdParameter);
        }
    
        public virtual ObjectResult<spFetchRootProjects_Result> spFetchRootProjects(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchRootProjects_Result>("spFetchRootProjects", userIdParameter);
        }
    
        public virtual ObjectResult<spFetchTeamWeekInfo_Result> spFetchTeamWeekInfo(Nullable<long> teamId, Nullable<System.DateTime> startDate)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchTeamWeekInfo_Result>("spFetchTeamWeekInfo", teamIdParameter, startDateParameter);
        }
    
        public virtual ObjectResult<spFetchTeamWeeks_Result> spFetchTeamWeeks(string teamName)
        {
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchTeamWeeks_Result>("spFetchTeamWeeks", teamNameParameter);
        }
    
        public virtual ObjectResult<spFetchUserAchievements_Result> spFetchUserAchievements(Nullable<int> profileId)
        {
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchUserAchievements_Result>("spFetchUserAchievements", profileIdParameter);
        }
    
        public virtual ObjectResult<spFetchUserCardMappingInfoById_Result> spFetchUserCardMappingInfoById(Nullable<int> userCardMappingId)
        {
            var userCardMappingIdParameter = userCardMappingId.HasValue ?
                new ObjectParameter("UserCardMappingId", userCardMappingId) :
                new ObjectParameter("UserCardMappingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchUserCardMappingInfoById_Result>("spFetchUserCardMappingInfoById", userCardMappingIdParameter);
        }
    
        public virtual ObjectResult<spFetchUserExperiences_Result> spFetchUserExperiences(Nullable<int> profileId)
        {
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchUserExperiences_Result>("spFetchUserExperiences", profileIdParameter);
        }
    
        public virtual ObjectResult<spFetchUsersForDongleReminderMail_Result> spFetchUsersForDongleReminderMail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchUsersForDongleReminderMail_Result>("spFetchUsersForDongleReminderMail");
        }
    
        public virtual ObjectResult<spFetchUsersForReturnOfDongle_Result> spFetchUsersForReturnOfDongle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchUsersForReturnOfDongle_Result>("spFetchUsersForReturnOfDongle");
        }
    
        public virtual ObjectResult<spFetchWeekInfo_Result> spFetchWeekInfo(Nullable<int> userId, Nullable<System.DateTime> startDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchWeekInfo_Result>("spFetchWeekInfo", userIdParameter, startDateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spFinaliseUserAccessCardMapping(Nullable<int> userCardMappingId, Nullable<int> userId)
        {
            var userCardMappingIdParameter = userCardMappingId.HasValue ?
                new ObjectParameter("UserCardMappingId", userCardMappingId) :
                new ObjectParameter("UserCardMappingId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spFinaliseUserAccessCardMapping", userCardMappingIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGenerateDataForTeamWiseWeekWiseTimeSheetForClientReports_Result> spGenerateDataForTeamWiseWeekWiseTimeSheetForClientReports(Nullable<int> weekNo, Nullable<int> year, string teamName, Nullable<int> userId)
        {
            var weekNoParameter = weekNo.HasValue ?
                new ObjectParameter("WeekNo", weekNo) :
                new ObjectParameter("WeekNo", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGenerateDataForTeamWiseWeekWiseTimeSheetForClientReports_Result>("spGenerateDataForTeamWiseWeekWiseTimeSheetForClientReports", weekNoParameter, yearParameter, teamNameParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGenerateDataForTeamWiseWeekWiseTimeSheetForInternalReports_Result> spGenerateDataForTeamWiseWeekWiseTimeSheetForInternalReports(Nullable<int> weekNo, Nullable<int> year, string teamName, Nullable<int> userId)
        {
            var weekNoParameter = weekNo.HasValue ?
                new ObjectParameter("WeekNo", weekNo) :
                new ObjectParameter("WeekNo", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGenerateDataForTeamWiseWeekWiseTimeSheetForInternalReports_Result>("spGenerateDataForTeamWiseWeekWiseTimeSheetForInternalReports", weekNoParameter, yearParameter, teamNameParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetAllClients_Result> spGetAllClients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllClients_Result>("spGetAllClients");
        }
    
        public virtual ObjectResult<spGetAllClientSideManager_Result> spGetAllClientSideManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllClientSideManager_Result>("spGetAllClientSideManager");
        }
    
        public virtual ObjectResult<spGetAllHolidays_Result> spGetAllHolidays(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllHolidays_Result>("spGetAllHolidays", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGetAllShifts_Result> spGetAllShifts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllShifts_Result>("spGetAllShifts");
        }
    
        public virtual ObjectResult<spGetAppliedCompOffDetailByUserId_Result> spGetAppliedCompOffDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppliedCompOffDetailByUserId_Result>("spGetAppliedCompOffDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetAppliedLnsaDetailByUserId_Result> spGetAppliedLnsaDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppliedLnsaDetailByUserId_Result>("spGetAppliedLnsaDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetAppliedLwpDetailByUserId_Result> spGetAppliedLwpDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppliedLwpDetailByUserId_Result>("spGetAppliedLwpDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetAppraisalFormPendingForApproval_Result> spGetAppraisalFormPendingForApproval(Nullable<int> reportToId, Nullable<int> year)
        {
            var reportToIdParameter = reportToId.HasValue ?
                new ObjectParameter("ReportToId", reportToId) :
                new ObjectParameter("ReportToId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppraisalFormPendingForApproval_Result>("spGetAppraisalFormPendingForApproval", reportToIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetAppraisalFormPendingForReview_Result> spGetAppraisalFormPendingForReview(Nullable<int> reportToId, Nullable<int> year)
        {
            var reportToIdParameter = reportToId.HasValue ?
                new ObjectParameter("ReportToId", reportToId) :
                new ObjectParameter("ReportToId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppraisalFormPendingForReview_Result>("spGetAppraisalFormPendingForReview", reportToIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetAppraisalMenuByUserId_Result> spGetAppraisalMenuByUserId(Nullable<int> userId, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppraisalMenuByUserId_Result>("spGetAppraisalMenuByUserId", userIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetAppraisalSubMenuByUserId_Result> spGetAppraisalSubMenuByUserId(Nullable<long> sectionId, Nullable<int> userId)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppraisalSubMenuByUserId_Result>("spGetAppraisalSubMenuByUserId", sectionIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetApprovedCompOffDetailByUserId_Result> spGetApprovedCompOffDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApprovedCompOffDetailByUserId_Result>("spGetApprovedCompOffDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetApprovedLnsaDetailByUserId_Result> spGetApprovedLnsaDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApprovedLnsaDetailByUserId_Result>("spGetApprovedLnsaDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual int spGetAssetDetailByRequestId(Nullable<int> requestId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAssetDetailByRequestId", requestIdParameter);
        }
    
        public virtual ObjectResult<spGetAssetDetailOnBasisOfAssetTag_Result> spGetAssetDetailOnBasisOfAssetTag(string assetTag)
        {
            var assetTagParameter = assetTag != null ?
                new ObjectParameter("AssetTag", assetTag) :
                new ObjectParameter("AssetTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAssetDetailOnBasisOfAssetTag_Result>("spGetAssetDetailOnBasisOfAssetTag", assetTagParameter);
        }
    
        public virtual ObjectResult<spGetAssetDetailOnBasisOfRequestId_Result> spGetAssetDetailOnBasisOfRequestId(Nullable<long> requestId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAssetDetailOnBasisOfRequestId_Result>("spGetAssetDetailOnBasisOfRequestId", requestIdParameter);
        }
    
        public virtual int spGetAssetRequestByApproverId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAssetRequestByApproverId", userIdParameter);
        }
    
        public virtual int spGetAssetRequestByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAssetRequestByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceForAllUsersByDate_Result> spGetAttendanceForAllUsersByDate(Nullable<System.DateTime> startDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceForAllUsersByDate_Result>("spGetAttendanceForAllUsersByDate", startDateParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceForTodayAndTommorrowByUserId_Result> spGetAttendanceForTodayAndTommorrowByUserId(Nullable<int> userId, Nullable<System.DateTime> date)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceForTodayAndTommorrowByUserId_Result>("spGetAttendanceForTodayAndTommorrowByUserId", userIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceForUser_Result> spGetAttendanceForUser(Nullable<int> userId, Nullable<int> year, Nullable<int> month)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceForUser_Result>("spGetAttendanceForUser", userIdParameter, yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<SpGetAttendanceRawDataByDate_Result> SpGetAttendanceRawDataByDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAttendanceRawDataByDate_Result>("SpGetAttendanceRawDataByDate", dateParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceRegisterByTeamId_Result> spGetAttendanceRegisterByTeamId(Nullable<long> teamId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceRegisterByTeamId_Result>("spGetAttendanceRegisterByTeamId", teamIdParameter, fromDateParameter, tillDateParameter);
        }
    
        public virtual ObjectResult<spGetAvailedCompOffDetailByUserId_Result> spGetAvailedCompOffDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailedCompOffDetailByUserId_Result>("spGetAvailedCompOffDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailedLwpDetailByUserId_Result> spGetAvailedLwpDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailedLwpDetailByUserId_Result>("spGetAvailedLwpDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetCalender_Result> spGetCalender(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCalender_Result>("spGetCalender", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGetCancelledLwpDetailByUserId_Result> spGetCancelledLwpDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCancelledLwpDetailByUserId_Result>("spGetCancelledLwpDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetCommentsForAppraisalFormByHeaderId_Result> spGetCommentsForAppraisalFormByHeaderId(Nullable<long> headerId, Nullable<int> userId, Nullable<int> year)
        {
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCommentsForAppraisalFormByHeaderId_Result>("spGetCommentsForAppraisalFormByHeaderId", headerIdParameter, userIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spGetConflictStatusOfDongleAllocationPeriod(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spGetConflictStatusOfDongleAllocationPeriod", fromDateParameter, toDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spGetConflictStatusOfLnsaPeriod(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spGetConflictStatusOfLnsaPeriod", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetCriteriaForAppraisalFormByHeaderId_Result> spGetCriteriaForAppraisalFormByHeaderId(Nullable<long> headerId, Nullable<int> userId, Nullable<int> year, Nullable<bool> isGoal)
        {
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var isGoalParameter = isGoal.HasValue ?
                new ObjectParameter("IsGoal", isGoal) :
                new ObjectParameter("IsGoal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCriteriaForAppraisalFormByHeaderId_Result>("spGetCriteriaForAppraisalFormByHeaderId", headerIdParameter, userIdParameter, yearParameter, isGoalParameter);
        }
    
        public virtual ObjectResult<spGetCriteriaInFormOfQuestionByHeaderId_Result> spGetCriteriaInFormOfQuestionByHeaderId(Nullable<long> headerId, Nullable<int> userId, Nullable<int> year)
        {
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCriteriaInFormOfQuestionByHeaderId_Result>("spGetCriteriaInFormOfQuestionByHeaderId", headerIdParameter, userIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetDateForWorkFromHome_Result> spGetDateForWorkFromHome(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDateForWorkFromHome_Result>("spGetDateForWorkFromHome", userIdParameter);
        }
    
        public virtual ObjectResult<spGetDatesForDataChangeRequest_Result> spGetDatesForDataChangeRequest(Nullable<int> userId, string type)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDatesForDataChangeRequest_Result>("spGetDatesForDataChangeRequest", userIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<spGetDatesToRequestCompOff_Result> spGetDatesToRequestCompOff(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDatesToRequestCompOff_Result>("spGetDatesToRequestCompOff", userIdParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeAttendanceDetailsByDate_Result> spGetEmployeeAttendanceDetailsByDate(Nullable<int> userId, Nullable<System.DateTime> date)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeAttendanceDetailsByDate_Result>("spGetEmployeeAttendanceDetailsByDate", userIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeLeaves_Result> spGetEmployeeLeaves(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeLeaves_Result>("spGetEmployeeLeaves", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeProfileById_Result> spGetEmployeeProfileById(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeProfileById_Result>("spGetEmployeeProfileById", userIdParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeShiftMapping_Result> spGetEmployeeShiftMapping(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeShiftMapping_Result>("spGetEmployeeShiftMapping", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeTotalLoggedHours_Result> spGetEmployeeTotalLoggedHours(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeTotalLoggedHours_Result>("spGetEmployeeTotalLoggedHours", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<string> spGetGoalsOfEmployee(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetGoalsOfEmployee", userIdParameter);
        }
    
        public virtual ObjectResult<spGetLeaveApplication_Result> spGetLeaveApplication(Nullable<long> leaveApplicationID)
        {
            var leaveApplicationIDParameter = leaveApplicationID.HasValue ?
                new ObjectParameter("LeaveApplicationID", leaveApplicationID) :
                new ObjectParameter("LeaveApplicationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeaveApplication_Result>("spGetLeaveApplication", leaveApplicationIDParameter);
        }
    
        public virtual ObjectResult<spGetLeaveOrWfhLastRecordDetail_Result> spGetLeaveOrWfhLastRecordDetail(Nullable<int> userId, string type)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeaveOrWfhLastRecordDetail_Result>("spGetLeaveOrWfhLastRecordDetail", userIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<spGetManagerResourceStatusByDate_Result> spGetManagerResourceStatusByDate(Nullable<int> userId, Nullable<System.DateTime> startDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetManagerResourceStatusByDate_Result>("spGetManagerResourceStatusByDate", userIdParameter, startDateParameter);
        }
    
        public virtual ObjectResult<spGetPendingCompOffDetailByUserId_Result> spGetPendingCompOffDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPendingCompOffDetailByUserId_Result>("spGetPendingCompOffDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetPendingLnsaDetailByUserId_Result> spGetPendingLnsaDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPendingLnsaDetailByUserId_Result>("spGetPendingLnsaDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetPerformanceReviewFormStatus_Result> spGetPerformanceReviewFormStatus(Nullable<int> userId, Nullable<int> year, Nullable<int> status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPerformanceReviewFormStatus_Result>("spGetPerformanceReviewFormStatus", userIdParameter, yearParameter, statusParameter);
        }
    
        public virtual ObjectResult<spGetRejectedCompOffDetailByUserId_Result> spGetRejectedCompOffDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRejectedCompOffDetailByUserId_Result>("spGetRejectedCompOffDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetRejectedLnsaDetailByUserId_Result> spGetRejectedLnsaDetailByUserId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRejectedLnsaDetailByUserId_Result>("spGetRejectedLnsaDetailByUserId", fromDateParameter, tillDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetTotalWorkingDays_Result> spGetTotalWorkingDays(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, Nullable<int> leaveApplicationId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var leaveApplicationIdParameter = leaveApplicationId.HasValue ?
                new ObjectParameter("LeaveApplicationId", leaveApplicationId) :
                new ObjectParameter("LeaveApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTotalWorkingDays_Result>("spGetTotalWorkingDays", fromDateParameter, toDateParameter, userIdParameter, leaveApplicationIdParameter);
        }
    
        public virtual ObjectResult<string> spGetUserCommentsForDongleAllocation(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetUserCommentsForDongleAllocation", userIdParameter);
        }
    
        public virtual ObjectResult<spGetUserLastyearGoals_Result> spGetUserLastyearGoals(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserLastyearGoals_Result>("spGetUserLastyearGoals", userIdParameter);
        }
    
        public virtual ObjectResult<spGetUserNextyearGoals_Result> spGetUserNextyearGoals(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserNextyearGoals_Result>("spGetUserNextyearGoals", userIdParameter);
        }
    
        public virtual ObjectResult<spGetUserPerformanceReviewOverAllRating_Result> spGetUserPerformanceReviewOverAllRating(Nullable<int> userId, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserPerformanceReviewOverAllRating_Result>("spGetUserPerformanceReviewOverAllRating", userIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetUsersForAttendanceRegisterByUserIdAndDepartmentId_Result> spGetUsersForAttendanceRegisterByUserIdAndDepartmentId(Nullable<int> userId, Nullable<System.DateTime> date, Nullable<int> departmentId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUsersForAttendanceRegisterByUserIdAndDepartmentId_Result>("spGetUsersForAttendanceRegisterByUserIdAndDepartmentId", userIdParameter, dateParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<string> spImportAttendance(Nullable<System.DateTime> date, string data, Nullable<int> userId)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spImportAttendance", dateParameter, dataParameter, userIdParameter);
        }
    
        public virtual int spInsertChangeExtn(string newMobileNo, string newExtnNo, string newSeatNo, Nullable<int> isManagerApproved, Nullable<int> userId, ObjectParameter requestId)
        {
            var newMobileNoParameter = newMobileNo != null ?
                new ObjectParameter("NewMobileNo", newMobileNo) :
                new ObjectParameter("NewMobileNo", typeof(string));
    
            var newExtnNoParameter = newExtnNo != null ?
                new ObjectParameter("NewExtnNo", newExtnNo) :
                new ObjectParameter("NewExtnNo", typeof(string));
    
            var newSeatNoParameter = newSeatNo != null ?
                new ObjectParameter("NewSeatNo", newSeatNo) :
                new ObjectParameter("NewSeatNo", typeof(string));
    
            var isManagerApprovedParameter = isManagerApproved.HasValue ?
                new ObjectParameter("IsManagerApproved", isManagerApproved) :
                new ObjectParameter("IsManagerApproved", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertChangeExtn", newMobileNoParameter, newExtnNoParameter, newSeatNoParameter, isManagerApprovedParameter, userIdParameter, requestId);
        }
    
        public virtual ObjectResult<spInsertDataChangeRequest_Result> spInsertDataChangeRequest(Nullable<int> userId, string type, Nullable<long> recordId, string reason)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(long));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertDataChangeRequest_Result>("spInsertDataChangeRequest", userIdParameter, typeParameter, recordIdParameter, reasonParameter);
        }
    
        public virtual ObjectResult<spLoadAttendanceStatus_Result> spLoadAttendanceStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLoadAttendanceStatus_Result>("spLoadAttendanceStatus");
        }
    
        public virtual int spPrepareAttendance(Nullable<System.DateTime> fromDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPrepareAttendance", fromDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spProceedToBiopage(Nullable<int> requestedById, Nullable<int> requestedForId, string randomCode)
        {
            var requestedByIdParameter = requestedById.HasValue ?
                new ObjectParameter("RequestedById", requestedById) :
                new ObjectParameter("RequestedById", typeof(int));
    
            var requestedForIdParameter = requestedForId.HasValue ?
                new ObjectParameter("RequestedForId", requestedForId) :
                new ObjectParameter("RequestedForId", typeof(int));
    
            var randomCodeParameter = randomCode != null ?
                new ObjectParameter("RandomCode", randomCode) :
                new ObjectParameter("RandomCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spProceedToBiopage", requestedByIdParameter, requestedForIdParameter, randomCodeParameter);
        }
    
        public virtual ObjectResult<spRequestCompOff_Result> spRequestCompOff(Nullable<System.DateTime> date, Nullable<int> userId, Nullable<int> noOfDays, string reason)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var noOfDaysParameter = noOfDays.HasValue ?
                new ObjectParameter("NoOfDays", noOfDays) :
                new ObjectParameter("NoOfDays", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRequestCompOff_Result>("spRequestCompOff", dateParameter, userIdParameter, noOfDaysParameter, reasonParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spReturnAsset(Nullable<long> transactionId, Nullable<System.DateTime> returnDate, Nullable<int> userId)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(long));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spReturnAsset", transactionIdParameter, returnDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<string> spSaveUserLastYearGoalRating(Nullable<int> applicantId, Nullable<int> userId, Nullable<int> year, Nullable<long> sectionId, Nullable<int> userRole, string response)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(long));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(int));
    
            var responseParameter = response != null ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spSaveUserLastYearGoalRating", applicantIdParameter, userIdParameter, yearParameter, sectionIdParameter, userRoleParameter, responseParameter);
        }
    
        public virtual ObjectResult<string> spSaveUserNextYearGoal(Nullable<int> applicantId, string goal)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var goalParameter = goal != null ?
                new ObjectParameter("Goal", goal) :
                new ObjectParameter("Goal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spSaveUserNextYearGoal", applicantIdParameter, goalParameter);
        }
    
        public virtual ObjectResult<string> spSaveUserPerfomanceReviewRating(Nullable<int> applicantId, Nullable<int> userId, Nullable<long> sectionId, Nullable<long> headerId, Nullable<int> year, Nullable<int> userRole, string response, string comment, string otherComment, string answer, Nullable<bool> isGoal)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(long));
    
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(int));
    
            var responseParameter = response != null ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var otherCommentParameter = otherComment != null ?
                new ObjectParameter("OtherComment", otherComment) :
                new ObjectParameter("OtherComment", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            var isGoalParameter = isGoal.HasValue ?
                new ObjectParameter("IsGoal", isGoal) :
                new ObjectParameter("IsGoal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spSaveUserPerfomanceReviewRating", applicantIdParameter, userIdParameter, sectionIdParameter, headerIdParameter, yearParameter, userRoleParameter, responseParameter, commentParameter, otherCommentParameter, answerParameter, isGoalParameter);
        }
    
        public virtual ObjectResult<string> spSaveUserPerformanceReviewOverAllRating(Nullable<int> userId, Nullable<int> userRole, Nullable<int> rating, string comment, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spSaveUserPerformanceReviewOverAllRating", userIdParameter, userRoleParameter, ratingParameter, commentParameter, yearParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spSaveUserProfile(Nullable<int> userId, string aboutMe, string hobbies, string certificatesData, string experienceData)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var aboutMeParameter = aboutMe != null ?
                new ObjectParameter("AboutMe", aboutMe) :
                new ObjectParameter("AboutMe", typeof(string));
    
            var hobbiesParameter = hobbies != null ?
                new ObjectParameter("Hobbies", hobbies) :
                new ObjectParameter("Hobbies", typeof(string));
    
            var certificatesDataParameter = certificatesData != null ?
                new ObjectParameter("CertificatesData", certificatesData) :
                new ObjectParameter("CertificatesData", typeof(string));
    
            var experienceDataParameter = experienceData != null ?
                new ObjectParameter("ExperienceData", experienceData) :
                new ObjectParameter("ExperienceData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spSaveUserProfile", userIdParameter, aboutMeParameter, hobbiesParameter, certificatesDataParameter, experienceDataParameter);
        }
    
        public virtual ObjectResult<string> spTakeActionOnAppliedLeave(Nullable<long> leaveRequestApplicationId, string status, string remarks, Nullable<int> userId, Nullable<int> forwardedId)
        {
            var leaveRequestApplicationIdParameter = leaveRequestApplicationId.HasValue ?
                new ObjectParameter("LeaveRequestApplicationId", leaveRequestApplicationId) :
                new ObjectParameter("LeaveRequestApplicationId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var forwardedIdParameter = forwardedId.HasValue ?
                new ObjectParameter("ForwardedId", forwardedId) :
                new ObjectParameter("ForwardedId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTakeActionOnAppliedLeave", leaveRequestApplicationIdParameter, statusParameter, remarksParameter, userIdParameter, forwardedIdParameter);
        }
    
        public virtual ObjectResult<string> spTakeActionOnCompOff(Nullable<long> requestID, string status, string remark, Nullable<int> userId, Nullable<bool> isVerified)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isVerifiedParameter = isVerified.HasValue ?
                new ObjectParameter("IsVerified", isVerified) :
                new ObjectParameter("IsVerified", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTakeActionOnCompOff", requestIDParameter, statusParameter, remarkParameter, userIdParameter, isVerifiedParameter);
        }
    
        public virtual ObjectResult<string> spTakeActionOnDataVerificationRequest(Nullable<long> requestApplicationId, string status, string remark, Nullable<int> userId)
        {
            var requestApplicationIdParameter = requestApplicationId.HasValue ?
                new ObjectParameter("RequestApplicationId", requestApplicationId) :
                new ObjectParameter("RequestApplicationId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTakeActionOnDataVerificationRequest", requestApplicationIdParameter, statusParameter, remarkParameter, userIdParameter);
        }
    
        public virtual ObjectResult<string> spTakeActionOnWorkFromHome(Nullable<long> leaveRequestApplicationId, string status, string remark, Nullable<int> userId, Nullable<bool> isForwarded)
        {
            var leaveRequestApplicationIdParameter = leaveRequestApplicationId.HasValue ?
                new ObjectParameter("LeaveRequestApplicationId", leaveRequestApplicationId) :
                new ObjectParameter("LeaveRequestApplicationId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isForwardedParameter = isForwarded.HasValue ?
                new ObjectParameter("IsForwarded", isForwarded) :
                new ObjectParameter("IsForwarded", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTakeActionOnWorkFromHome", leaveRequestApplicationIdParameter, statusParameter, remarkParameter, userIdParameter, isForwardedParameter);
        }
    
        public virtual ObjectResult<string> spUpdateEmployeeAttendanceDetails(Nullable<long> userId, Nullable<long> recordId, Nullable<System.DateTime> inTime, Nullable<System.DateTime> outTime, Nullable<long> newStatusId, string userRemarks, Nullable<long> hrId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(long));
    
            var inTimeParameter = inTime.HasValue ?
                new ObjectParameter("InTime", inTime) :
                new ObjectParameter("InTime", typeof(System.DateTime));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("outTime", outTime) :
                new ObjectParameter("outTime", typeof(System.DateTime));
    
            var newStatusIdParameter = newStatusId.HasValue ?
                new ObjectParameter("NewStatusId", newStatusId) :
                new ObjectParameter("NewStatusId", typeof(long));
    
            var userRemarksParameter = userRemarks != null ?
                new ObjectParameter("UserRemarks", userRemarks) :
                new ObjectParameter("UserRemarks", typeof(string));
    
            var hrIdParameter = hrId.HasValue ?
                new ObjectParameter("HrId", hrId) :
                new ObjectParameter("HrId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spUpdateEmployeeAttendanceDetails", userIdParameter, recordIdParameter, inTimeParameter, outTimeParameter, newStatusIdParameter, userRemarksParameter, hrIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUpdateEmployeeLeaveBalanceByHR(Nullable<int> type, Nullable<long> userId, Nullable<double> clCount, Nullable<double> plCount, Nullable<double> compOffCount, Nullable<double> lwpCount, Nullable<bool> cloy, Nullable<double> mlCount, Nullable<int> allocationCount, Nullable<long> updatedBy)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var clCountParameter = clCount.HasValue ?
                new ObjectParameter("ClCount", clCount) :
                new ObjectParameter("ClCount", typeof(double));
    
            var plCountParameter = plCount.HasValue ?
                new ObjectParameter("PlCount", plCount) :
                new ObjectParameter("PlCount", typeof(double));
    
            var compOffCountParameter = compOffCount.HasValue ?
                new ObjectParameter("CompOffCount", compOffCount) :
                new ObjectParameter("CompOffCount", typeof(double));
    
            var lwpCountParameter = lwpCount.HasValue ?
                new ObjectParameter("LwpCount", lwpCount) :
                new ObjectParameter("LwpCount", typeof(double));
    
            var cloyParameter = cloy.HasValue ?
                new ObjectParameter("Cloy", cloy) :
                new ObjectParameter("Cloy", typeof(bool));
    
            var mlCountParameter = mlCount.HasValue ?
                new ObjectParameter("MlCount", mlCount) :
                new ObjectParameter("MlCount", typeof(double));
    
            var allocationCountParameter = allocationCount.HasValue ?
                new ObjectParameter("AllocationCount", allocationCount) :
                new ObjectParameter("AllocationCount", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUpdateEmployeeLeaveBalanceByHR", typeParameter, userIdParameter, clCountParameter, plCountParameter, compOffCountParameter, lwpCountParameter, cloyParameter, mlCountParameter, allocationCountParameter, updatedByParameter);
        }
    
        public virtual int spUpdateLeaveBalanceAndLeaveStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLeaveBalanceAndLeaveStatus");
        }
    
        public virtual ObjectResult<string> spUpdateLeaveBalanceWithScheduler(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spUpdateLeaveBalanceWithScheduler", loginUserIdParameter);
        }
    
        public virtual ObjectResult<spUpdatePerformanceReviewFormStatus_Result> spUpdatePerformanceReviewFormStatus(Nullable<int> applicantId, Nullable<int> year, Nullable<int> userId, Nullable<int> status, Nullable<int> userRole, Nullable<bool> isRejected)
        {
            var applicantIdParameter = applicantId.HasValue ?
                new ObjectParameter("ApplicantId", applicantId) :
                new ObjectParameter("ApplicantId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(int));
    
            var isRejectedParameter = isRejected.HasValue ?
                new ObjectParameter("IsRejected", isRejected) :
                new ObjectParameter("IsRejected", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpdatePerformanceReviewFormStatus_Result>("spUpdatePerformanceReviewFormStatus", applicantIdParameter, yearParameter, userIdParameter, statusParameter, userRoleParameter, isRejectedParameter);
        }
    
        public virtual int spUpdateTeamWeek(Nullable<int> weekTypeId, string teamName)
        {
            var weekTypeIdParameter = weekTypeId.HasValue ?
                new ObjectParameter("WeekTypeId", weekTypeId) :
                new ObjectParameter("WeekTypeId", typeof(int));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateTeamWeek", weekTypeIdParameter, teamNameParameter);
        }
    
        public virtual ObjectResult<UDSP_GetAllChildsGroupByParentGroupId_Result> UDSP_GetAllChildsGroupByParentGroupId(Nullable<int> parentGroupId)
        {
            var parentGroupIdParameter = parentGroupId.HasValue ?
                new ObjectParameter("parentGroupId", parentGroupId) :
                new ObjectParameter("parentGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetAllChildsGroupByParentGroupId_Result>("UDSP_GetAllChildsGroupByParentGroupId", parentGroupIdParameter);
        }
    
        public virtual ObjectResult<UDSP_GetCompanyExpenseDashbordChart_Result> UDSP_GetCompanyExpenseDashbordChart(Nullable<int> companyId, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetCompanyExpenseDashbordChart_Result>("UDSP_GetCompanyExpenseDashbordChart", companyIdParameter, startingDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<UDSP_GetDuplicateCompanyExpenseRecords_Result> UDSP_GetDuplicateCompanyExpenseRecords(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetDuplicateCompanyExpenseRecords_Result>("UDSP_GetDuplicateCompanyExpenseRecords", companyIdParameter);
        }
    
        public virtual ObjectResult<UDSP_GetEmployeeAttendanceDashbordChartWithLeaveType_Result> UDSP_GetEmployeeAttendanceDashbordChartWithLeaveType(Nullable<int> leaveTypeId, Nullable<int> employeeId, Nullable<System.DateTime> initialDate, Nullable<System.DateTime> finalDate)
        {
            var leaveTypeIdParameter = leaveTypeId.HasValue ?
                new ObjectParameter("leaveTypeId", leaveTypeId) :
                new ObjectParameter("leaveTypeId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var initialDateParameter = initialDate.HasValue ?
                new ObjectParameter("initialDate", initialDate) :
                new ObjectParameter("initialDate", typeof(System.DateTime));
    
            var finalDateParameter = finalDate.HasValue ?
                new ObjectParameter("finalDate", finalDate) :
                new ObjectParameter("finalDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetEmployeeAttendanceDashbordChartWithLeaveType_Result>("UDSP_GetEmployeeAttendanceDashbordChartWithLeaveType", leaveTypeIdParameter, employeeIdParameter, initialDateParameter, finalDateParameter);
        }
    
        public virtual ObjectResult<UDSP_GetEmployeeExpenseDashbordChart_Result> UDSP_GetEmployeeExpenseDashbordChart(Nullable<int> companyId, Nullable<int> employeeId, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetEmployeeExpenseDashbordChart_Result>("UDSP_GetEmployeeExpenseDashbordChart", companyIdParameter, employeeIdParameter, startingDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<UDSP_GetEmployeeExpenseVsEarningChartData_Result> UDSP_GetEmployeeExpenseVsEarningChartData(Nullable<int> companyId, Nullable<System.DateTime> startDateMain, Nullable<System.DateTime> endDateMain)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var startDateMainParameter = startDateMain.HasValue ?
                new ObjectParameter("startDateMain", startDateMain) :
                new ObjectParameter("startDateMain", typeof(System.DateTime));
    
            var endDateMainParameter = endDateMain.HasValue ?
                new ObjectParameter("endDateMain", endDateMain) :
                new ObjectParameter("endDateMain", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetEmployeeExpenseVsEarningChartData_Result>("UDSP_GetEmployeeExpenseVsEarningChartData", companyIdParameter, startDateMainParameter, endDateMainParameter);
        }
    
        public virtual ObjectResult<UDSP_GetEmployeePerformanceDashbordChart_Result> UDSP_GetEmployeePerformanceDashbordChart(Nullable<int> companyId, Nullable<int> employeeId, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetEmployeePerformanceDashbordChart_Result>("UDSP_GetEmployeePerformanceDashbordChart", companyIdParameter, employeeIdParameter, startingDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<UDSP_GetExpenseVsEarningChartData_Result> UDSP_GetExpenseVsEarningChartData(Nullable<int> companyId, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetExpenseVsEarningChartData_Result>("UDSP_GetExpenseVsEarningChartData", companyIdParameter, startingDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<UDSP_GetProjectExpenseDashboardData_Result> UDSP_GetProjectExpenseDashboardData(Nullable<int> companyId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetProjectExpenseDashboardData_Result>("UDSP_GetProjectExpenseDashboardData", companyIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<UDSP_GetProjectExpenseVsEarningDashboardData_Result> UDSP_GetProjectExpenseVsEarningDashboardData(Nullable<int> companyId, Nullable<System.DateTime> startDateMain, Nullable<System.DateTime> endDateMain)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var startDateMainParameter = startDateMain.HasValue ?
                new ObjectParameter("startDateMain", startDateMain) :
                new ObjectParameter("startDateMain", typeof(System.DateTime));
    
            var endDateMainParameter = endDateMain.HasValue ?
                new ObjectParameter("endDateMain", endDateMain) :
                new ObjectParameter("endDateMain", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDSP_GetProjectExpenseVsEarningDashboardData_Result>("UDSP_GetProjectExpenseVsEarningDashboardData", companyIdParameter, startDateMainParameter, endDateMainParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spChangeRegLinkStatus(Nullable<int> registrationId, Nullable<int> status, Nullable<int> userId)
        {
            var registrationIdParameter = registrationId.HasValue ?
                new ObjectParameter("RegistrationId", registrationId) :
                new ObjectParameter("RegistrationId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spChangeRegLinkStatus", registrationIdParameter, statusParameter, userIdParameter);
        }
    
        public virtual int spAddUpdateMenusPermissions(Nullable<bool> isUserPermission, Nullable<int> loginUserId, Nullable<int> employeeId, Nullable<int> roleId, string menuPermissionsXMLString, ObjectParameter success)
        {
            var isUserPermissionParameter = isUserPermission.HasValue ?
                new ObjectParameter("IsUserPermission", isUserPermission) :
                new ObjectParameter("IsUserPermission", typeof(bool));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var menuPermissionsXMLStringParameter = menuPermissionsXMLString != null ?
                new ObjectParameter("MenuPermissionsXMLString", menuPermissionsXMLString) :
                new ObjectParameter("MenuPermissionsXMLString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUpdateMenusPermissions", isUserPermissionParameter, loginUserIdParameter, employeeIdParameter, roleIdParameter, menuPermissionsXMLStringParameter, success);
        }
    
        [DbFunction("MISEntities", "Fun_SplitStringInt")]
        public virtual IQueryable<Fun_SplitStringInt_Result> Fun_SplitStringInt(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_SplitStringInt_Result>("[MISEntities].[Fun_SplitStringInt](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("MISEntities", "Fun_SplitStringStr")]
        public virtual IQueryable<Fun_SplitStringStr_Result> Fun_SplitStringStr(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_SplitStringStr_Result>("[MISEntities].[Fun_SplitStringStr](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int MailService_UpdateNewJoinerSeatAllocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MailService_UpdateNewJoinerSeatAllocation");
        }
    
        public virtual int Proc_AddUpdateSeatMaster(Nullable<int> seatId, Nullable<int> premisesId, Nullable<int> floorId, string seatNumber, Nullable<int> seatTypeId, Nullable<int> bayNumber, Nullable<bool> isActive, Nullable<int> transById, Nullable<int> unitId, Nullable<int> seatStatusId, ObjectParameter success)
        {
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var premisesIdParameter = premisesId.HasValue ?
                new ObjectParameter("PremisesId", premisesId) :
                new ObjectParameter("PremisesId", typeof(int));
    
            var floorIdParameter = floorId.HasValue ?
                new ObjectParameter("FloorId", floorId) :
                new ObjectParameter("FloorId", typeof(int));
    
            var seatNumberParameter = seatNumber != null ?
                new ObjectParameter("SeatNumber", seatNumber) :
                new ObjectParameter("SeatNumber", typeof(string));
    
            var seatTypeIdParameter = seatTypeId.HasValue ?
                new ObjectParameter("SeatTypeId", seatTypeId) :
                new ObjectParameter("SeatTypeId", typeof(int));
    
            var bayNumberParameter = bayNumber.HasValue ?
                new ObjectParameter("BayNumber", bayNumber) :
                new ObjectParameter("BayNumber", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var seatStatusIdParameter = seatStatusId.HasValue ?
                new ObjectParameter("SeatStatusId", seatStatusId) :
                new ObjectParameter("SeatStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateSeatMaster", seatIdParameter, premisesIdParameter, floorIdParameter, seatNumberParameter, seatTypeIdParameter, bayNumberParameter, isActiveParameter, transByIdParameter, unitIdParameter, seatStatusIdParameter, success);
        }
    
        public virtual int Proc_AddUpdateWPSCheckDetail(Nullable<int> seatId, string xmlString, Nullable<int> transById, ObjectParameter success)
        {
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var xmlStringParameter = xmlString != null ?
                new ObjectParameter("XmlString", xmlString) :
                new ObjectParameter("XmlString", typeof(string));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateWPSCheckDetail", seatIdParameter, xmlStringParameter, transByIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_AuthenticateLogin_Result> Proc_AuthenticateLogin(string userName, string password, string browserInfo, string iPAddress)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var browserInfoParameter = browserInfo != null ?
                new ObjectParameter("BrowserInfo", browserInfo) :
                new ObjectParameter("BrowserInfo", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_AuthenticateLogin_Result>("Proc_AuthenticateLogin", userNameParameter, passwordParameter, browserInfoParameter, iPAddressParameter);
        }
    
        public virtual int Proc_BulkImportSeatDetail(Nullable<int> transById, ObjectParameter success)
        {
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_BulkImportSeatDetail", transByIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_BulkImportSeatDetailTemp_Result> Proc_BulkImportSeatDetailTemp(string xmlString, Nullable<int> transById, ObjectParameter success)
        {
            var xmlStringParameter = xmlString != null ?
                new ObjectParameter("XmlString", xmlString) :
                new ObjectParameter("XmlString", typeof(string));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkImportSeatDetailTemp_Result>("Proc_BulkImportSeatDetailTemp", xmlStringParameter, transByIdParameter, success);
        }
    
        public virtual int Proc_DeleteSeatDetail(Nullable<int> seatId, Nullable<int> transById, ObjectParameter success)
        {
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_DeleteSeatDetail", seatIdParameter, transByIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_GetAllocationTypeMaster_Result> Proc_GetAllocationTypeMaster(Nullable<int> allocationTypeId)
        {
            var allocationTypeIdParameter = allocationTypeId.HasValue ?
                new ObjectParameter("AllocationTypeId", allocationTypeId) :
                new ObjectParameter("AllocationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllocationTypeMaster_Result>("Proc_GetAllocationTypeMaster", allocationTypeIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetAutoLogin_Result> Proc_GetAutoLogin(Nullable<int> employeeId, string browserInfo, string iPAddress)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var browserInfoParameter = browserInfo != null ?
                new ObjectParameter("BrowserInfo", browserInfo) :
                new ObjectParameter("BrowserInfo", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAutoLogin_Result>("Proc_GetAutoLogin", employeeIdParameter, browserInfoParameter, iPAddressParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Proc_GetBayTotal(Nullable<int> premisesId, Nullable<int> floorId)
        {
            var premisesIdParameter = premisesId.HasValue ?
                new ObjectParameter("PremisesId", premisesId) :
                new ObjectParameter("PremisesId", typeof(int));
    
            var floorIdParameter = floorId.HasValue ?
                new ObjectParameter("FloorId", floorId) :
                new ObjectParameter("FloorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Proc_GetBayTotal", premisesIdParameter, floorIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetBlockingReasonMaster_Result> Proc_GetBlockingReasonMaster(Nullable<int> blockingReasonId)
        {
            var blockingReasonIdParameter = blockingReasonId.HasValue ?
                new ObjectParameter("BlockingReasonId", blockingReasonId) :
                new ObjectParameter("BlockingReasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetBlockingReasonMaster_Result>("Proc_GetBlockingReasonMaster", blockingReasonIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmployeeList_Result> Proc_GetEmployeeList(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmployeeList_Result>("Proc_GetEmployeeList", employeeIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmployeeListByText_Result> Proc_GetEmployeeListByText(Nullable<int> employeeId, string searchText)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmployeeListByText_Result>("Proc_GetEmployeeListByText", employeeIdParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<Proc_GetFloorSeatAllocationDetail_Result> Proc_GetFloorSeatAllocationDetail(Nullable<int> transById, Nullable<int> locationId, Nullable<int> premisesId, Nullable<int> floorId, Nullable<int> bayNumber, Nullable<int> unitId, Nullable<int> employeeId, Nullable<int> seatTypeId, Nullable<int> seatStatusId, Nullable<int> seatId, Nullable<int> seatAllocationDetailId)
        {
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var premisesIdParameter = premisesId.HasValue ?
                new ObjectParameter("PremisesId", premisesId) :
                new ObjectParameter("PremisesId", typeof(int));
    
            var floorIdParameter = floorId.HasValue ?
                new ObjectParameter("FloorId", floorId) :
                new ObjectParameter("FloorId", typeof(int));
    
            var bayNumberParameter = bayNumber.HasValue ?
                new ObjectParameter("BayNumber", bayNumber) :
                new ObjectParameter("BayNumber", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var seatTypeIdParameter = seatTypeId.HasValue ?
                new ObjectParameter("SeatTypeId", seatTypeId) :
                new ObjectParameter("SeatTypeId", typeof(int));
    
            var seatStatusIdParameter = seatStatusId.HasValue ?
                new ObjectParameter("SeatStatusId", seatStatusId) :
                new ObjectParameter("SeatStatusId", typeof(int));
    
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var seatAllocationDetailIdParameter = seatAllocationDetailId.HasValue ?
                new ObjectParameter("SeatAllocationDetailId", seatAllocationDetailId) :
                new ObjectParameter("SeatAllocationDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetFloorSeatAllocationDetail_Result>("Proc_GetFloorSeatAllocationDetail", transByIdParameter, locationIdParameter, premisesIdParameter, floorIdParameter, bayNumberParameter, unitIdParameter, employeeIdParameter, seatTypeIdParameter, seatStatusIdParameter, seatIdParameter, seatAllocationDetailIdParameter);
        }
    
        public virtual int Proc_GetNewJoinerDetail(Nullable<int> transById, Nullable<int> seatUnitId, Nullable<int> onBoardingId)
        {
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            var seatUnitIdParameter = seatUnitId.HasValue ?
                new ObjectParameter("SeatUnitId", seatUnitId) :
                new ObjectParameter("SeatUnitId", typeof(int));
    
            var onBoardingIdParameter = onBoardingId.HasValue ?
                new ObjectParameter("OnBoardingId", onBoardingId) :
                new ObjectParameter("OnBoardingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetNewJoinerDetail", transByIdParameter, seatUnitIdParameter, onBoardingIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetPremisesFloorMapping_Result> Proc_GetPremisesFloorMapping(Nullable<int> locationId, Nullable<int> premisesId, Nullable<int> floorId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var premisesIdParameter = premisesId.HasValue ?
                new ObjectParameter("PremisesId", premisesId) :
                new ObjectParameter("PremisesId", typeof(int));
    
            var floorIdParameter = floorId.HasValue ?
                new ObjectParameter("FloorId", floorId) :
                new ObjectParameter("FloorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetPremisesFloorMapping_Result>("Proc_GetPremisesFloorMapping", locationIdParameter, premisesIdParameter, floorIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetSeatAllocationDetail_Result> Proc_GetSeatAllocationDetail(Nullable<int> transById, Nullable<int> locationId, Nullable<int> premisesId, Nullable<int> floorId, Nullable<int> bayNumber, Nullable<int> unitId, Nullable<int> employeeId, Nullable<int> seatTypeId, Nullable<int> seatStatusId, Nullable<int> seatId, Nullable<int> seatAllocationDetailId)
        {
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var premisesIdParameter = premisesId.HasValue ?
                new ObjectParameter("PremisesId", premisesId) :
                new ObjectParameter("PremisesId", typeof(int));
    
            var floorIdParameter = floorId.HasValue ?
                new ObjectParameter("FloorId", floorId) :
                new ObjectParameter("FloorId", typeof(int));
    
            var bayNumberParameter = bayNumber.HasValue ?
                new ObjectParameter("BayNumber", bayNumber) :
                new ObjectParameter("BayNumber", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var seatTypeIdParameter = seatTypeId.HasValue ?
                new ObjectParameter("SeatTypeId", seatTypeId) :
                new ObjectParameter("SeatTypeId", typeof(int));
    
            var seatStatusIdParameter = seatStatusId.HasValue ?
                new ObjectParameter("SeatStatusId", seatStatusId) :
                new ObjectParameter("SeatStatusId", typeof(int));
    
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var seatAllocationDetailIdParameter = seatAllocationDetailId.HasValue ?
                new ObjectParameter("SeatAllocationDetailId", seatAllocationDetailId) :
                new ObjectParameter("SeatAllocationDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetSeatAllocationDetail_Result>("Proc_GetSeatAllocationDetail", transByIdParameter, locationIdParameter, premisesIdParameter, floorIdParameter, bayNumberParameter, unitIdParameter, employeeIdParameter, seatTypeIdParameter, seatStatusIdParameter, seatIdParameter, seatAllocationDetailIdParameter);
        }
    
        public virtual int Proc_GetSeatAllocationDetailForExcelDownload(Nullable<int> transById, Nullable<int> locationId, Nullable<int> premisesId, Nullable<int> floorId, Nullable<int> bayNumber, Nullable<int> unitId, Nullable<int> employeeId, Nullable<int> seatTypeId, Nullable<int> seatStatusId, Nullable<int> seatId, Nullable<int> seatAllocationDetailId)
        {
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var premisesIdParameter = premisesId.HasValue ?
                new ObjectParameter("PremisesId", premisesId) :
                new ObjectParameter("PremisesId", typeof(int));
    
            var floorIdParameter = floorId.HasValue ?
                new ObjectParameter("FloorId", floorId) :
                new ObjectParameter("FloorId", typeof(int));
    
            var bayNumberParameter = bayNumber.HasValue ?
                new ObjectParameter("BayNumber", bayNumber) :
                new ObjectParameter("BayNumber", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var seatTypeIdParameter = seatTypeId.HasValue ?
                new ObjectParameter("SeatTypeId", seatTypeId) :
                new ObjectParameter("SeatTypeId", typeof(int));
    
            var seatStatusIdParameter = seatStatusId.HasValue ?
                new ObjectParameter("SeatStatusId", seatStatusId) :
                new ObjectParameter("SeatStatusId", typeof(int));
    
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var seatAllocationDetailIdParameter = seatAllocationDetailId.HasValue ?
                new ObjectParameter("SeatAllocationDetailId", seatAllocationDetailId) :
                new ObjectParameter("SeatAllocationDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetSeatAllocationDetailForExcelDownload", transByIdParameter, locationIdParameter, premisesIdParameter, floorIdParameter, bayNumberParameter, unitIdParameter, employeeIdParameter, seatTypeIdParameter, seatStatusIdParameter, seatIdParameter, seatAllocationDetailIdParameter);
        }
    
        public virtual int Proc_GetSeatAllocationReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetSeatAllocationReport");
        }
    
        public virtual ObjectResult<Proc_GetSeatCheckDetail_Result> Proc_GetSeatCheckDetail(Nullable<int> seatId, Nullable<int> seatCheckId)
        {
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var seatCheckIdParameter = seatCheckId.HasValue ?
                new ObjectParameter("SeatCheckId", seatCheckId) :
                new ObjectParameter("SeatCheckId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetSeatCheckDetail_Result>("Proc_GetSeatCheckDetail", seatIdParameter, seatCheckIdParameter);
        }
    
        public virtual int Proc_GetSeatDetailTemp(Nullable<int> seatId)
        {
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetSeatDetailTemp", seatIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetSeatItemMaster_Result> Proc_GetSeatItemMaster(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetSeatItemMaster_Result>("Proc_GetSeatItemMaster", itemIdParameter);
        }
    
        public virtual int Proc_GetSeatList(Nullable<int> locationId, Nullable<int> premisesId, Nullable<int> floorId, Nullable<int> unitId, Nullable<int> seatTypeId, Nullable<int> seatStatusId, Nullable<int> seatId, Nullable<int> transById)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var premisesIdParameter = premisesId.HasValue ?
                new ObjectParameter("PremisesId", premisesId) :
                new ObjectParameter("PremisesId", typeof(int));
    
            var floorIdParameter = floorId.HasValue ?
                new ObjectParameter("FloorId", floorId) :
                new ObjectParameter("FloorId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var seatTypeIdParameter = seatTypeId.HasValue ?
                new ObjectParameter("SeatTypeId", seatTypeId) :
                new ObjectParameter("SeatTypeId", typeof(int));
    
            var seatStatusIdParameter = seatStatusId.HasValue ?
                new ObjectParameter("SeatStatusId", seatStatusId) :
                new ObjectParameter("SeatStatusId", typeof(int));
    
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetSeatList", locationIdParameter, premisesIdParameter, floorIdParameter, unitIdParameter, seatTypeIdParameter, seatStatusIdParameter, seatIdParameter, transByIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetSeatMaster_Result> Proc_GetSeatMaster(Nullable<int> transById, Nullable<int> locationId, Nullable<int> premisesId, Nullable<int> floorId, Nullable<int> unitId, Nullable<int> seatTypeId, Nullable<int> seatStatusId, Nullable<int> seatId)
        {
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var premisesIdParameter = premisesId.HasValue ?
                new ObjectParameter("PremisesId", premisesId) :
                new ObjectParameter("PremisesId", typeof(int));
    
            var floorIdParameter = floorId.HasValue ?
                new ObjectParameter("FloorId", floorId) :
                new ObjectParameter("FloorId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var seatTypeIdParameter = seatTypeId.HasValue ?
                new ObjectParameter("SeatTypeId", seatTypeId) :
                new ObjectParameter("SeatTypeId", typeof(int));
    
            var seatStatusIdParameter = seatStatusId.HasValue ?
                new ObjectParameter("SeatStatusId", seatStatusId) :
                new ObjectParameter("SeatStatusId", typeof(int));
    
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetSeatMaster_Result>("Proc_GetSeatMaster", transByIdParameter, locationIdParameter, premisesIdParameter, floorIdParameter, unitIdParameter, seatTypeIdParameter, seatStatusIdParameter, seatIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetSeatStatusMaster_Result> Proc_GetSeatStatusMaster(Nullable<int> statusId)
        {
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetSeatStatusMaster_Result>("Proc_GetSeatStatusMaster", statusIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetSeatTypeMaster_Result> Proc_GetSeatTypeMaster(Nullable<int> seatTypeId)
        {
            var seatTypeIdParameter = seatTypeId.HasValue ?
                new ObjectParameter("SeatTypeId", seatTypeId) :
                new ObjectParameter("SeatTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetSeatTypeMaster_Result>("Proc_GetSeatTypeMaster", seatTypeIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetUserPremisesFloorMapping_Result> Proc_GetUserPremisesFloorMapping(Nullable<int> transById)
        {
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetUserPremisesFloorMapping_Result>("Proc_GetUserPremisesFloorMapping", transByIdParameter);
        }
    
        public virtual int Proc_SendNewJoiningMailAlert(Nullable<int> onboardingId, Nullable<int> employeeId, Nullable<int> transById)
        {
            var onboardingIdParameter = onboardingId.HasValue ?
                new ObjectParameter("OnboardingId", onboardingId) :
                new ObjectParameter("OnboardingId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SendNewJoiningMailAlert", onboardingIdParameter, employeeIdParameter, transByIdParameter);
        }
    
        public virtual int Proc_SendSeatAllocationMailAlert(Nullable<int> seatId, Nullable<int> transById, Nullable<int> previousStatus, Nullable<int> previousBlockedBy)
        {
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            var previousStatusParameter = previousStatus.HasValue ?
                new ObjectParameter("PreviousStatus", previousStatus) :
                new ObjectParameter("PreviousStatus", typeof(int));
    
            var previousBlockedByParameter = previousBlockedBy.HasValue ?
                new ObjectParameter("PreviousBlockedBy", previousBlockedBy) :
                new ObjectParameter("PreviousBlockedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SendSeatAllocationMailAlert", seatIdParameter, transByIdParameter, previousStatusParameter, previousBlockedByParameter);
        }
    
        public virtual int Proc_UpdateSeatUnit(Nullable<int> unitId, string seatIds, Nullable<int> transById, ObjectParameter success)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var seatIdsParameter = seatIds != null ?
                new ObjectParameter("SeatIds", seatIds) :
                new ObjectParameter("SeatIds", typeof(string));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_UpdateSeatUnit", unitIdParameter, seatIdsParameter, transByIdParameter, success);
        }
    
        public virtual ObjectResult<spGetAllEmptyMandatoryFieldsForUserRegistration_Result> spGetAllEmptyMandatoryFieldsForUserRegistration(string tempUserGuid)
        {
            var tempUserGuidParameter = tempUserGuid != null ?
                new ObjectParameter("TempUserGuid", tempUserGuid) :
                new ObjectParameter("TempUserGuid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllEmptyMandatoryFieldsForUserRegistration_Result>("spGetAllEmptyMandatoryFieldsForUserRegistration", tempUserGuidParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spAddNewForm(Nullable<int> departmentId, string formTitle, string formName, Nullable<int> userId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var formTitleParameter = formTitle != null ?
                new ObjectParameter("FormTitle", formTitle) :
                new ObjectParameter("FormTitle", typeof(string));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spAddNewForm", departmentIdParameter, formTitleParameter, formNameParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Proc_SelectVisitorDetailsForMIS_Result> Proc_SelectVisitorDetailsForMIS(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_SelectVisitorDetailsForMIS_Result>("Proc_SelectVisitorDetailsForMIS", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<spGetActiveUsersInfoReportingToUser_Result> spGetActiveUsersInfoReportingToUser(Nullable<System.DateTime> joiningDate, Nullable<System.DateTime> terminateDate, Nullable<int> userId, Nullable<bool> includeUser)
        {
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            var terminateDateParameter = terminateDate.HasValue ?
                new ObjectParameter("TerminateDate", terminateDate) :
                new ObjectParameter("TerminateDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var includeUserParameter = includeUser.HasValue ?
                new ObjectParameter("IncludeUser", includeUser) :
                new ObjectParameter("IncludeUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetActiveUsersInfoReportingToUser_Result>("spGetActiveUsersInfoReportingToUser", joiningDateParameter, terminateDateParameter, userIdParameter, includeUserParameter);
        }
    
        public virtual ObjectResult<spGetDataChangeRequests_Result> spGetDataChangeRequests(Nullable<int> userId, string role, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDataChangeRequests_Result>("spGetDataChangeRequests", userIdParameter, roleParameter, yearParameter);
        }
    
        public virtual ObjectResult<Proc_GetMealDishes_Result> Proc_GetMealDishes(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetMealDishes_Result>("Proc_GetMealDishes", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<spGetReportingManagerForADepartment_Result> spGetReportingManagerForADepartment(string departmentId)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReportingManagerForADepartment_Result>("spGetReportingManagerForADepartment", departmentIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spAddAssetDetails(Nullable<long> assetId, string serialNumber, string assetTag, string attributeType, string attributeValue, Nullable<int> userId)
        {
            var assetIdParameter = assetId.HasValue ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(long));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var assetTagParameter = assetTag != null ?
                new ObjectParameter("AssetTag", assetTag) :
                new ObjectParameter("AssetTag", typeof(string));
    
            var attributeTypeParameter = attributeType != null ?
                new ObjectParameter("AttributeType", attributeType) :
                new ObjectParameter("AttributeType", typeof(string));
    
            var attributeValueParameter = attributeValue != null ?
                new ObjectParameter("AttributeValue", attributeValue) :
                new ObjectParameter("AttributeValue", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spAddAssetDetails", assetIdParameter, serialNumberParameter, assetTagParameter, attributeTypeParameter, attributeValueParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetAllAssets_Result> spGetAllAssets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllAssets_Result>("spGetAllAssets");
        }
    
        public virtual ObjectResult<spGeAttendanceRegisterByDepartmentIdOrEmployeeIdForEmployeesReportingToUser_Result> spGeAttendanceRegisterByDepartmentIdOrEmployeeIdForEmployeesReportingToUser(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, Nullable<int> departmentId, Nullable<int> forEmployeeId, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var forEmployeeIdParameter = forEmployeeId.HasValue ?
                new ObjectParameter("ForEmployeeId", forEmployeeId) :
                new ObjectParameter("ForEmployeeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGeAttendanceRegisterByDepartmentIdOrEmployeeIdForEmployeesReportingToUser_Result>("spGeAttendanceRegisterByDepartmentIdOrEmployeeIdForEmployeesReportingToUser", fromDateParameter, endDateParameter, departmentIdParameter, forEmployeeIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetMenusPermissions_Result> spGetMenusPermissions(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMenusPermissions_Result>("spGetMenusPermissions", loginUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spReturnAssetByUser(Nullable<long> requestId, Nullable<System.DateTime> returnDate, Nullable<int> userId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(long));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spReturnAssetByUser", requestIdParameter, returnDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetAssetDetailsForReportingManager_Result> spGetAssetDetailsForReportingManager(Nullable<int> userId, Nullable<int> statusId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAssetDetailsForReportingManager_Result>("spGetAssetDetailsForReportingManager", userIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spTakeActionOnAssetRequest(Nullable<long> requestId, Nullable<int> statusId, Nullable<int> userId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(long));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spTakeActionOnAssetRequest", requestIdParameter, statusIdParameter, userIdParameter);
        }
    
        public virtual int Proc_AddUpdateShiftUserMapping(Nullable<int> loginUserId, string usersXmlData, ObjectParameter success)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var usersXmlDataParameter = usersXmlData != null ?
                new ObjectParameter("UsersXmlData", usersXmlData) :
                new ObjectParameter("UsersXmlData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateShiftUserMapping", loginUserIdParameter, usersXmlDataParameter, success);
        }
    
        public virtual ObjectResult<Proc_BulkActionOnApproveCompOff_Result> Proc_BulkActionOnApproveCompOff(string requestIds, string status, string remark, Nullable<int> userId, Nullable<bool> isVerified)
        {
            var requestIdsParameter = requestIds != null ?
                new ObjectParameter("RequestIds", requestIds) :
                new ObjectParameter("RequestIds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isVerifiedParameter = isVerified.HasValue ?
                new ObjectParameter("IsVerified", isVerified) :
                new ObjectParameter("IsVerified", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkActionOnApproveCompOff_Result>("Proc_BulkActionOnApproveCompOff", requestIdsParameter, statusParameter, remarkParameter, userIdParameter, isVerifiedParameter);
        }
    
        public virtual ObjectResult<Proc_BulkActionOnApproveLeave_Result> Proc_BulkActionOnApproveLeave(string leaveRequestApplicationIds, string status, string remarks, Nullable<int> userId, Nullable<int> forwardedId)
        {
            var leaveRequestApplicationIdsParameter = leaveRequestApplicationIds != null ?
                new ObjectParameter("LeaveRequestApplicationIds", leaveRequestApplicationIds) :
                new ObjectParameter("LeaveRequestApplicationIds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var forwardedIdParameter = forwardedId.HasValue ?
                new ObjectParameter("ForwardedId", forwardedId) :
                new ObjectParameter("ForwardedId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkActionOnApproveLeave_Result>("Proc_BulkActionOnApproveLeave", leaveRequestApplicationIdsParameter, statusParameter, remarksParameter, userIdParameter, forwardedIdParameter);
        }
    
        public virtual ObjectResult<Proc_BulkActionOnApproveWFH_Result> Proc_BulkActionOnApproveWFH(string requestApplicationIds, string status, string remark, Nullable<int> userId, Nullable<bool> isForwarded)
        {
            var requestApplicationIdsParameter = requestApplicationIds != null ?
                new ObjectParameter("RequestApplicationIds", requestApplicationIds) :
                new ObjectParameter("RequestApplicationIds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isForwardedParameter = isForwarded.HasValue ?
                new ObjectParameter("IsForwarded", isForwarded) :
                new ObjectParameter("IsForwarded", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkActionOnApproveWFH_Result>("Proc_BulkActionOnApproveWFH", requestApplicationIdsParameter, statusParameter, remarkParameter, userIdParameter, isForwardedParameter);
        }
    
        public virtual int spAddUpdateShiftUserMapping(Nullable<int> loginUserId, string usersXmlData, ObjectParameter success)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var usersXmlDataParameter = usersXmlData != null ?
                new ObjectParameter("UsersXmlData", usersXmlData) :
                new ObjectParameter("UsersXmlData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUpdateShiftUserMapping", loginUserIdParameter, usersXmlDataParameter, success);
        }
    
        [DbFunction("MISEntities", "fnGetWeekInfoByDateId")]
        public virtual IQueryable<fnGetWeekInfoByDateId_Result> fnGetWeekInfoByDateId(Nullable<int> userId, Nullable<int> dateId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateIdParameter = dateId.HasValue ?
                new ObjectParameter("DateId", dateId) :
                new ObjectParameter("DateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetWeekInfoByDateId_Result>("[MISEntities].[fnGetWeekInfoByDateId](@UserId, @DateId)", userIdParameter, dateIdParameter);
        }
    
        public virtual int spAddUpdateDashboardWidgetPermissions(Nullable<bool> isUserPermission, Nullable<int> loginUserId, Nullable<int> employeeId, Nullable<int> roleId, string widgetPermissionsXMLString, ObjectParameter success)
        {
            var isUserPermissionParameter = isUserPermission.HasValue ?
                new ObjectParameter("IsUserPermission", isUserPermission) :
                new ObjectParameter("IsUserPermission", typeof(bool));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var widgetPermissionsXMLStringParameter = widgetPermissionsXMLString != null ?
                new ObjectParameter("WidgetPermissionsXMLString", widgetPermissionsXMLString) :
                new ObjectParameter("WidgetPermissionsXMLString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUpdateDashboardWidgetPermissions", isUserPermissionParameter, loginUserIdParameter, employeeIdParameter, roleIdParameter, widgetPermissionsXMLStringParameter, success);
        }
    
        public virtual ObjectResult<spGetAssetReport_Result> spGetAssetReport(string departmentId, string teamId, string statusId, string reportToId, string userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var teamIdParameter = teamId != null ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(string));
    
            var statusIdParameter = statusId != null ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(string));
    
            var reportToIdParameter = reportToId != null ?
                new ObjectParameter("ReportToId", reportToId) :
                new ObjectParameter("ReportToId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAssetReport_Result>("spGetAssetReport", departmentIdParameter, teamIdParameter, statusIdParameter, reportToIdParameter, userIdParameter, fromDateParameter, tillDateParameter);
        }
    
        public virtual ObjectResult<spGetAssetCountForAllDepartment_Result> spGetAssetCountForAllDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAssetCountForAllDepartment_Result>("spGetAssetCountForAllDepartment");
        }
    
        public virtual ObjectResult<spGetAssetCountForDepartmentByManagerId_Result> spGetAssetCountForDepartmentByManagerId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAssetCountForDepartmentByManagerId_Result>("spGetAssetCountForDepartmentByManagerId", userIdParameter);
        }
    
        public virtual int spInsertErrorLog(string moduleName, string source, string errorType, string errorMessage, string controllerName, string actionName, string targetSite, string stackTrace, Nullable<int> reportedByUserId, string authToken, ObjectParameter errorId)
        {
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var actionNameParameter = actionName != null ?
                new ObjectParameter("ActionName", actionName) :
                new ObjectParameter("ActionName", typeof(string));
    
            var targetSiteParameter = targetSite != null ?
                new ObjectParameter("TargetSite", targetSite) :
                new ObjectParameter("TargetSite", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var reportedByUserIdParameter = reportedByUserId.HasValue ?
                new ObjectParameter("ReportedByUserId", reportedByUserId) :
                new ObjectParameter("ReportedByUserId", typeof(int));
    
            var authTokenParameter = authToken != null ?
                new ObjectParameter("AuthToken", authToken) :
                new ObjectParameter("AuthToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertErrorLog", moduleNameParameter, sourceParameter, errorTypeParameter, errorMessageParameter, controllerNameParameter, actionNameParameter, targetSiteParameter, stackTraceParameter, reportedByUserIdParameter, authTokenParameter, errorId);
        }
    
        public virtual ObjectResult<spGetAssetDetailsForITDepartment_Result> spGetAssetDetailsForITDepartment(Nullable<int> statusId)
        {
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAssetDetailsForITDepartment_Result>("spGetAssetDetailsForITDepartment", statusIdParameter);
        }
    
        public virtual ObjectResult<spGetAssetStatusForUser_Result> spGetAssetStatusForUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAssetStatusForUser_Result>("spGetAssetStatusForUser", userIdParameter);
        }
    
        public virtual ObjectResult<string> spGetAvailableAssetTag()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAvailableAssetTag");
        }
    
        public virtual int spAddUpdateTeamDetails(Nullable<long> teamId, string teamName, Nullable<int> teamWeekDayId, Nullable<bool> isReminderEnabled, Nullable<bool> isAttendanceEmailEnabled, Nullable<int> teamHeadId, Nullable<int> departmentId, Nullable<int> parentTeamId, string teamEmailTypeData, Nullable<int> userId, ObjectParameter success)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(long));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var teamWeekDayIdParameter = teamWeekDayId.HasValue ?
                new ObjectParameter("TeamWeekDayId", teamWeekDayId) :
                new ObjectParameter("TeamWeekDayId", typeof(int));
    
            var isReminderEnabledParameter = isReminderEnabled.HasValue ?
                new ObjectParameter("IsReminderEnabled", isReminderEnabled) :
                new ObjectParameter("IsReminderEnabled", typeof(bool));
    
            var isAttendanceEmailEnabledParameter = isAttendanceEmailEnabled.HasValue ?
                new ObjectParameter("IsAttendanceEmailEnabled", isAttendanceEmailEnabled) :
                new ObjectParameter("IsAttendanceEmailEnabled", typeof(bool));
    
            var teamHeadIdParameter = teamHeadId.HasValue ?
                new ObjectParameter("TeamHeadId", teamHeadId) :
                new ObjectParameter("TeamHeadId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var parentTeamIdParameter = parentTeamId.HasValue ?
                new ObjectParameter("ParentTeamId", parentTeamId) :
                new ObjectParameter("ParentTeamId", typeof(int));
    
            var teamEmailTypeDataParameter = teamEmailTypeData != null ?
                new ObjectParameter("TeamEmailTypeData", teamEmailTypeData) :
                new ObjectParameter("TeamEmailTypeData", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUpdateTeamDetails", teamIdParameter, teamNameParameter, teamWeekDayIdParameter, isReminderEnabledParameter, isAttendanceEmailEnabledParameter, teamHeadIdParameter, departmentIdParameter, parentTeamIdParameter, teamEmailTypeDataParameter, userIdParameter, success);
        }
    
        public virtual ObjectResult<spGetWidgetPermissions_Result> spGetWidgetPermissions(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWidgetPermissions_Result>("spGetWidgetPermissions", loginUserIdParameter);
        }
    
        public virtual ObjectResult<spGetErrorLogs_Result> spGetErrorLogs(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetErrorLogs_Result>("spGetErrorLogs", dateParameter);
        }
    
        public virtual int Proc_AddUpdateUserTeamMappings(Nullable<bool> isInsert, Nullable<int> loginUserId, Nullable<long> teamId, string usersXmlData, ObjectParameter success, ObjectParameter existingIds)
        {
            var isInsertParameter = isInsert.HasValue ?
                new ObjectParameter("IsInsert", isInsert) :
                new ObjectParameter("IsInsert", typeof(bool));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(long));
    
            var usersXmlDataParameter = usersXmlData != null ?
                new ObjectParameter("UsersXmlData", usersXmlData) :
                new ObjectParameter("UsersXmlData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateUserTeamMappings", isInsertParameter, loginUserIdParameter, teamIdParameter, usersXmlDataParameter, success, existingIds);
        }
    
        public virtual ObjectResult<Proc_GetMealFeedback_Result> Proc_GetMealFeedback(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetMealFeedback_Result>("Proc_GetMealFeedback", fromParameter, toParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetCommonKey")]
        public virtual IQueryable<Fun_GetCommonKey_Result> Fun_GetCommonKey(string string1, string string2, string delimiter)
        {
            var string1Parameter = string1 != null ?
                new ObjectParameter("String1", string1) :
                new ObjectParameter("String1", typeof(string));
    
            var string2Parameter = string2 != null ?
                new ObjectParameter("String2", string2) :
                new ObjectParameter("String2", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetCommonKey_Result>("[MISEntities].[Fun_GetCommonKey](@String1, @String2, @Delimiter)", string1Parameter, string2Parameter, delimiterParameter);
        }
    
        public virtual ObjectResult<Proc_GetParameterList_Result> Proc_GetParameterList(Nullable<int> competencyTypeId, Nullable<int> year, Nullable<int> status)
        {
            var competencyTypeIdParameter = competencyTypeId.HasValue ?
                new ObjectParameter("competencyTypeId", competencyTypeId) :
                new ObjectParameter("competencyTypeId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetParameterList_Result>("Proc_GetParameterList", competencyTypeIdParameter, yearParameter, statusParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetDesignationListByDepartment")]
        public virtual IQueryable<Fun_GetDesignationListByDepartment_Result> Fun_GetDesignationListByDepartment(string departmentIds)
        {
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetDesignationListByDepartment_Result>("[MISEntities].[Fun_GetDesignationListByDepartment](@DepartmentIds)", departmentIdsParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetDesignationListByTeam")]
        public virtual IQueryable<Fun_GetDesignationListByTeam_Result> Fun_GetDesignationListByTeam(string teamIds)
        {
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetDesignationListByTeam_Result>("[MISEntities].[Fun_GetDesignationListByTeam](@TeamIds)", teamIdsParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetDepartmentIdByAdmin")]
        public virtual IQueryable<Nullable<int>> Fun_GetDepartmentIdByAdmin(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[MISEntities].[Fun_GetDepartmentIdByAdmin](@LoginUserId)", loginUserIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetDivisionIdByAdmin")]
        public virtual IQueryable<Nullable<int>> Fun_GetDivisionIdByAdmin(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[MISEntities].[Fun_GetDivisionIdByAdmin](@LoginUserId)", loginUserIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetFormattedFormName")]
        public virtual IQueryable<string> Fun_GetFormattedFormName(Nullable<int> departmentId, Nullable<int> designationId, string competencyFormName)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            var competencyFormNameParameter = competencyFormName != null ?
                new ObjectParameter("CompetencyFormName", competencyFormName) :
                new ObjectParameter("CompetencyFormName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[MISEntities].[Fun_GetFormattedFormName](@DepartmentId, @DesignationId, @CompetencyFormName)", departmentIdParameter, designationIdParameter, competencyFormNameParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetTeamIdByAdmin")]
        public virtual IQueryable<Nullable<long>> Fun_GetTeamIdByAdmin(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<long>>("[MISEntities].[Fun_GetTeamIdByAdmin](@LoginUserId)", loginUserIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetTeamIdByUser")]
        public virtual IQueryable<Nullable<int>> Fun_GetTeamIdByUser(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[MISEntities].[Fun_GetTeamIdByUser](@LoginUserId)", loginUserIdParameter);
        }
    
        public virtual int Proc_AddUpdateCompetencyForm(Nullable<int> competencyFormId, string competencyFormSuffix, Nullable<int> locationId, Nullable<int> verticalId, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<int> designationId, Nullable<int> feedbackTypeId, Nullable<bool> isRating, Nullable<bool> isFinalized, string parameterXmlString, Nullable<int> transById, ObjectParameter success, ObjectParameter duplicateNames)
        {
            var competencyFormIdParameter = competencyFormId.HasValue ?
                new ObjectParameter("CompetencyFormId", competencyFormId) :
                new ObjectParameter("CompetencyFormId", typeof(int));
    
            var competencyFormSuffixParameter = competencyFormSuffix != null ?
                new ObjectParameter("CompetencyFormSuffix", competencyFormSuffix) :
                new ObjectParameter("CompetencyFormSuffix", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            var feedbackTypeIdParameter = feedbackTypeId.HasValue ?
                new ObjectParameter("FeedbackTypeId", feedbackTypeId) :
                new ObjectParameter("FeedbackTypeId", typeof(int));
    
            var isRatingParameter = isRating.HasValue ?
                new ObjectParameter("IsRating", isRating) :
                new ObjectParameter("IsRating", typeof(bool));
    
            var isFinalizedParameter = isFinalized.HasValue ?
                new ObjectParameter("IsFinalized", isFinalized) :
                new ObjectParameter("IsFinalized", typeof(bool));
    
            var parameterXmlStringParameter = parameterXmlString != null ?
                new ObjectParameter("ParameterXmlString", parameterXmlString) :
                new ObjectParameter("ParameterXmlString", typeof(string));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateCompetencyForm", competencyFormIdParameter, competencyFormSuffixParameter, locationIdParameter, verticalIdParameter, divisionIdParameter, departmentIdParameter, designationIdParameter, feedbackTypeIdParameter, isRatingParameter, isFinalizedParameter, parameterXmlStringParameter, transByIdParameter, success, duplicateNames);
        }
    
        public virtual int Proc_CreateCompetencyFormClone(Nullable<int> competencyFormId, string competencyFormSuffix, Nullable<int> locationId, Nullable<int> verticalId, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<int> designationId, Nullable<int> feedbackTypeId, Nullable<bool> isFinalized, Nullable<int> transById, ObjectParameter success)
        {
            var competencyFormIdParameter = competencyFormId.HasValue ?
                new ObjectParameter("CompetencyFormId", competencyFormId) :
                new ObjectParameter("CompetencyFormId", typeof(int));
    
            var competencyFormSuffixParameter = competencyFormSuffix != null ?
                new ObjectParameter("CompetencyFormSuffix", competencyFormSuffix) :
                new ObjectParameter("CompetencyFormSuffix", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            var feedbackTypeIdParameter = feedbackTypeId.HasValue ?
                new ObjectParameter("FeedbackTypeId", feedbackTypeId) :
                new ObjectParameter("FeedbackTypeId", typeof(int));
    
            var isFinalizedParameter = isFinalized.HasValue ?
                new ObjectParameter("IsFinalized", isFinalized) :
                new ObjectParameter("IsFinalized", typeof(bool));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_CreateCompetencyFormClone", competencyFormIdParameter, competencyFormSuffixParameter, locationIdParameter, verticalIdParameter, divisionIdParameter, departmentIdParameter, designationIdParameter, feedbackTypeIdParameter, isFinalizedParameter, transByIdParameter, success);
        }
    
        public virtual int Proc_GenerateEmpAppraisalSetting(Nullable<int> appraisalSettingId, Nullable<int> loginUserId, ObjectParameter success)
        {
            var appraisalSettingIdParameter = appraisalSettingId.HasValue ?
                new ObjectParameter("AppraisalSettingId", appraisalSettingId) :
                new ObjectParameter("AppraisalSettingId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GenerateEmpAppraisalSetting", appraisalSettingIdParameter, loginUserIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_GetAppraiserListByIDs_Result> Proc_GetAppraiserListByIDs(Nullable<int> appraisalCycleId, Nullable<int> locationId, Nullable<int> verticalId, string divisionIds, string departmentIds, string teamIds, Nullable<int> employeeId)
        {
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var divisionIdsParameter = divisionIds != null ?
                new ObjectParameter("DivisionIds", divisionIds) :
                new ObjectParameter("DivisionIds", typeof(string));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAppraiserListByIDs_Result>("Proc_GetAppraiserListByIDs", appraisalCycleIdParameter, locationIdParameter, verticalIdParameter, divisionIdsParameter, departmentIdsParameter, teamIdsParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetApproverListByIDs_Result> Proc_GetApproverListByIDs(Nullable<int> appraisalCycleId, Nullable<int> locationId, Nullable<int> verticalId, string divisionIds, string departmentIds, string teamIds, Nullable<int> employeeId)
        {
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var divisionIdsParameter = divisionIds != null ?
                new ObjectParameter("DivisionIds", divisionIds) :
                new ObjectParameter("DivisionIds", typeof(string));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetApproverListByIDs_Result>("Proc_GetApproverListByIDs", appraisalCycleIdParameter, locationIdParameter, verticalIdParameter, divisionIdsParameter, departmentIdsParameter, teamIdsParameter, employeeIdParameter);
        }
    
        public virtual int Proc_UpdateAppraisalSetting(Nullable<int> appraisalSettingId, Nullable<int> appraisalCycleId, Nullable<int> locationId, Nullable<int> verticalId, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<long> teamId, string designationIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string stageXmlString, Nullable<int> transById, ObjectParameter success, ObjectParameter duplicateNames)
        {
            var appraisalSettingIdParameter = appraisalSettingId.HasValue ?
                new ObjectParameter("AppraisalSettingId", appraisalSettingId) :
                new ObjectParameter("AppraisalSettingId", typeof(int));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(long));
    
            var designationIdsParameter = designationIds != null ?
                new ObjectParameter("DesignationIds", designationIds) :
                new ObjectParameter("DesignationIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var stageXmlStringParameter = stageXmlString != null ?
                new ObjectParameter("StageXmlString", stageXmlString) :
                new ObjectParameter("StageXmlString", typeof(string));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_UpdateAppraisalSetting", appraisalSettingIdParameter, appraisalCycleIdParameter, locationIdParameter, verticalIdParameter, divisionIdParameter, departmentIdParameter, teamIdParameter, designationIdsParameter, startDateParameter, endDateParameter, stageXmlStringParameter, transByIdParameter, success, duplicateNames);
        }
    
        public virtual ObjectResult<spGetAllActiveForms_Result> spGetAllActiveForms(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllActiveForms_Result>("spGetAllActiveForms", departmentIdParameter);
        }
    
        public virtual ObjectResult<spGetAllForms_Result> spGetAllForms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllForms_Result>("spGetAllForms");
        }
    
        public virtual ObjectResult<Proc_GetAppraisalSetting_Result> Proc_GetAppraisalSetting(Nullable<int> loginUserId, Nullable<int> appraisalCycleId, Nullable<int> locationId, string verticalIds, string divisionIds, string departmentIds, string teamIds, Nullable<int> appraisalSettingId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdsParameter = verticalIds != null ?
                new ObjectParameter("VerticalIds", verticalIds) :
                new ObjectParameter("VerticalIds", typeof(string));
    
            var divisionIdsParameter = divisionIds != null ?
                new ObjectParameter("DivisionIds", divisionIds) :
                new ObjectParameter("DivisionIds", typeof(string));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            var appraisalSettingIdParameter = appraisalSettingId.HasValue ?
                new ObjectParameter("AppraisalSettingId", appraisalSettingId) :
                new ObjectParameter("AppraisalSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAppraisalSetting_Result>("Proc_GetAppraisalSetting", loginUserIdParameter, appraisalCycleIdParameter, locationIdParameter, verticalIdsParameter, divisionIdsParameter, departmentIdsParameter, teamIdsParameter, appraisalSettingIdParameter);
        }
    
        public virtual int Proc_CreatePendingEmpAppraisalSetting(Nullable<int> appraisalCycleId, Nullable<int> employeeId, Nullable<int> loginUserId, ObjectParameter success)
        {
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_CreatePendingEmpAppraisalSetting", appraisalCycleIdParameter, employeeIdParameter, loginUserIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_GetApproverList_Result> Proc_GetApproverList(Nullable<int> locationId, Nullable<int> verticalId, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<long> teamId, Nullable<int> userId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetApproverList_Result>("Proc_GetApproverList", locationIdParameter, verticalIdParameter, divisionIdParameter, departmentIdParameter, teamIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmpAppraisalLog_Result> Proc_GetEmpAppraisalLog(Nullable<int> empApprasialSettingId)
        {
            var empApprasialSettingIdParameter = empApprasialSettingId.HasValue ?
                new ObjectParameter("EmpApprasialSettingId", empApprasialSettingId) :
                new ObjectParameter("EmpApprasialSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpAppraisalLog_Result>("Proc_GetEmpAppraisalLog", empApprasialSettingIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmpAppraisalSettingLogHistory_Result> Proc_GetEmpAppraisalSettingLogHistory(Nullable<int> empAppraisalSettingId)
        {
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpAppraisalSettingLogHistory_Result>("Proc_GetEmpAppraisalSettingLogHistory", empAppraisalSettingIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmpAppraisalSettingNotGenerated_Result> Proc_GetEmpAppraisalSettingNotGenerated(Nullable<int> loginUserId, Nullable<int> appraisalCycleId, Nullable<int> locationId, string verticalIds, string divisionIds, string departmentIds, string teamIds, string designationIds, Nullable<int> employeeId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdsParameter = verticalIds != null ?
                new ObjectParameter("VerticalIds", verticalIds) :
                new ObjectParameter("VerticalIds", typeof(string));
    
            var divisionIdsParameter = divisionIds != null ?
                new ObjectParameter("DivisionIds", divisionIds) :
                new ObjectParameter("DivisionIds", typeof(string));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            var designationIdsParameter = designationIds != null ?
                new ObjectParameter("DesignationIds", designationIds) :
                new ObjectParameter("DesignationIds", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpAppraisalSettingNotGenerated_Result>("Proc_GetEmpAppraisalSettingNotGenerated", loginUserIdParameter, appraisalCycleIdParameter, locationIdParameter, verticalIdsParameter, divisionIdsParameter, departmentIdsParameter, teamIdsParameter, designationIdsParameter, employeeIdParameter);
        }
    
        public virtual int Proc_Truncate(string nameTable, Nullable<int> loginUserId)
        {
            var nameTableParameter = nameTable != null ?
                new ObjectParameter("nameTable", nameTable) :
                new ObjectParameter("nameTable", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Truncate", nameTableParameter, loginUserIdParameter);
        }
    
        public virtual int Proc_UpdateEmpAppraisalStatus(Nullable<int> empAppraisalSettingId, string statusFlag, string reason, Nullable<int> loginUserId, ObjectParameter success, ObjectParameter actionDesc)
        {
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var statusFlagParameter = statusFlag != null ?
                new ObjectParameter("StatusFlag", statusFlag) :
                new ObjectParameter("StatusFlag", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_UpdateEmpAppraisalStatus", empAppraisalSettingIdParameter, statusFlagParameter, reasonParameter, loginUserIdParameter, success, actionDesc);
        }
    
        public virtual ObjectResult<Nullable<int>> spAddUpdateEmpAppraisalGoal(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId, string goalXmlData)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var goalXmlDataParameter = goalXmlData != null ?
                new ObjectParameter("GoalXmlData", goalXmlData) :
                new ObjectParameter("GoalXmlData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAddUpdateEmpAppraisalGoal", loginUserIdParameter, empAppraisalSettingIdParameter, goalXmlDataParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAddUpdateEmpAppraisalAchievement(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId, string achievementXmlData)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var achievementXmlDataParameter = achievementXmlData != null ?
                new ObjectParameter("AchievementXmlData", achievementXmlData) :
                new ObjectParameter("AchievementXmlData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAddUpdateEmpAppraisalAchievement", loginUserIdParameter, empAppraisalSettingIdParameter, achievementXmlDataParameter);
        }
    
        public virtual ObjectResult<spAddUpdateEmpAppraisalAchievementBySelf_Result> spAddUpdateEmpAppraisalAchievementBySelf(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId, string achievementXmlData)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var achievementXmlDataParameter = achievementXmlData != null ?
                new ObjectParameter("AchievementXmlData", achievementXmlData) :
                new ObjectParameter("AchievementXmlData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddUpdateEmpAppraisalAchievementBySelf_Result>("spAddUpdateEmpAppraisalAchievementBySelf", loginUserIdParameter, empAppraisalSettingIdParameter, achievementXmlDataParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spChangeAppraisalFormStatusToNextLevel(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spChangeAppraisalFormStatusToNextLevel", loginUserIdParameter, empAppraisalSettingIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAddUpdateEmpAppraisalPromotions(Nullable<int> empAppraisalSettingId, Nullable<bool> isPromoted, Nullable<int> recommendationPercentage, string promotionRemarks, Nullable<int> promotionDesignationId, Nullable<bool> isHighPotential, string highPotentialRemarks, Nullable<int> loginUserId)
        {
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var isPromotedParameter = isPromoted.HasValue ?
                new ObjectParameter("IsPromoted", isPromoted) :
                new ObjectParameter("IsPromoted", typeof(bool));
    
            var recommendationPercentageParameter = recommendationPercentage.HasValue ?
                new ObjectParameter("RecommendationPercentage", recommendationPercentage) :
                new ObjectParameter("RecommendationPercentage", typeof(int));
    
            var promotionRemarksParameter = promotionRemarks != null ?
                new ObjectParameter("PromotionRemarks", promotionRemarks) :
                new ObjectParameter("PromotionRemarks", typeof(string));
    
            var promotionDesignationIdParameter = promotionDesignationId.HasValue ?
                new ObjectParameter("PromotionDesignationId", promotionDesignationId) :
                new ObjectParameter("PromotionDesignationId", typeof(int));
    
            var isHighPotentialParameter = isHighPotential.HasValue ?
                new ObjectParameter("IsHighPotential", isHighPotential) :
                new ObjectParameter("IsHighPotential", typeof(bool));
    
            var highPotentialRemarksParameter = highPotentialRemarks != null ?
                new ObjectParameter("HighPotentialRemarks", highPotentialRemarks) :
                new ObjectParameter("HighPotentialRemarks", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAddUpdateEmpAppraisalPromotions", empAppraisalSettingIdParameter, isPromotedParameter, recommendationPercentageParameter, promotionRemarksParameter, promotionDesignationIdParameter, isHighPotentialParameter, highPotentialRemarksParameter, loginUserIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetEmployeeIdByUser")]
        public virtual IQueryable<Nullable<int>> Fun_GetEmployeeIdByUser(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[MISEntities].[Fun_GetEmployeeIdByUser](@LoginUserId)", loginUserIdParameter);
        }
    
        public virtual ObjectResult<spValidateAppraisalForm_Result> spValidateAppraisalForm(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValidateAppraisalForm_Result>("spValidateAppraisalForm", loginUserIdParameter, empAppraisalSettingIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetCompetencyFormDetail_Result> Proc_GetCompetencyFormDetail(Nullable<int> competencyFormId)
        {
            var competencyFormIdParameter = competencyFormId.HasValue ?
                new ObjectParameter("CompetencyFormId", competencyFormId) :
                new ObjectParameter("CompetencyFormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetCompetencyFormDetail_Result>("Proc_GetCompetencyFormDetail", competencyFormIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetCompetencyForm_Result> Proc_GetCompetencyForm(Nullable<int> loginUserId, string feedbackTypeIds, string locationIds, string verticalIds, string divisionIds, string departmentIds, string designationIds, string yearVal, Nullable<int> competencyFormId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var feedbackTypeIdsParameter = feedbackTypeIds != null ?
                new ObjectParameter("FeedbackTypeIds", feedbackTypeIds) :
                new ObjectParameter("FeedbackTypeIds", typeof(string));
    
            var locationIdsParameter = locationIds != null ?
                new ObjectParameter("LocationIds", locationIds) :
                new ObjectParameter("LocationIds", typeof(string));
    
            var verticalIdsParameter = verticalIds != null ?
                new ObjectParameter("VerticalIds", verticalIds) :
                new ObjectParameter("VerticalIds", typeof(string));
    
            var divisionIdsParameter = divisionIds != null ?
                new ObjectParameter("DivisionIds", divisionIds) :
                new ObjectParameter("DivisionIds", typeof(string));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            var designationIdsParameter = designationIds != null ?
                new ObjectParameter("DesignationIds", designationIds) :
                new ObjectParameter("DesignationIds", typeof(string));
    
            var yearValParameter = yearVal != null ?
                new ObjectParameter("YearVal", yearVal) :
                new ObjectParameter("YearVal", typeof(string));
    
            var competencyFormIdParameter = competencyFormId.HasValue ?
                new ObjectParameter("CompetencyFormId", competencyFormId) :
                new ObjectParameter("CompetencyFormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetCompetencyForm_Result>("Proc_GetCompetencyForm", loginUserIdParameter, feedbackTypeIdsParameter, locationIdsParameter, verticalIdsParameter, divisionIdsParameter, departmentIdsParameter, designationIdsParameter, yearValParameter, competencyFormIdParameter);
        }
    
        public virtual ObjectResult<spGetAllReportingManagers_Result> spGetAllReportingManagers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllReportingManagers_Result>("spGetAllReportingManagers");
        }
    
        public virtual int Proc_AddUpdateEmpAppraisalSetting(Nullable<int> empAppraisalSettingId, Nullable<int> employeeId, Nullable<int> appraisalCycleId, Nullable<bool> isSelfAppraisal, Nullable<int> rMAccessId, Nullable<int> competencyFormId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> appraiserId, Nullable<int> approver1, Nullable<int> approver2, Nullable<int> approver3, string stageXmlString, Nullable<int> transById, ObjectParameter success)
        {
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var isSelfAppraisalParameter = isSelfAppraisal.HasValue ?
                new ObjectParameter("IsSelfAppraisal", isSelfAppraisal) :
                new ObjectParameter("IsSelfAppraisal", typeof(bool));
    
            var rMAccessIdParameter = rMAccessId.HasValue ?
                new ObjectParameter("RMAccessId", rMAccessId) :
                new ObjectParameter("RMAccessId", typeof(int));
    
            var competencyFormIdParameter = competencyFormId.HasValue ?
                new ObjectParameter("CompetencyFormId", competencyFormId) :
                new ObjectParameter("CompetencyFormId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var appraiserIdParameter = appraiserId.HasValue ?
                new ObjectParameter("AppraiserId", appraiserId) :
                new ObjectParameter("AppraiserId", typeof(int));
    
            var approver1Parameter = approver1.HasValue ?
                new ObjectParameter("Approver1", approver1) :
                new ObjectParameter("Approver1", typeof(int));
    
            var approver2Parameter = approver2.HasValue ?
                new ObjectParameter("Approver2", approver2) :
                new ObjectParameter("Approver2", typeof(int));
    
            var approver3Parameter = approver3.HasValue ?
                new ObjectParameter("Approver3", approver3) :
                new ObjectParameter("Approver3", typeof(int));
    
            var stageXmlStringParameter = stageXmlString != null ?
                new ObjectParameter("StageXmlString", stageXmlString) :
                new ObjectParameter("StageXmlString", typeof(string));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateEmpAppraisalSetting", empAppraisalSettingIdParameter, employeeIdParameter, appraisalCycleIdParameter, isSelfAppraisalParameter, rMAccessIdParameter, competencyFormIdParameter, startDateParameter, endDateParameter, appraiserIdParameter, approver1Parameter, approver2Parameter, approver3Parameter, stageXmlStringParameter, transByIdParameter, success);
        }
    
        public virtual int Proc_AddAppraisalSetting(Nullable<int> appraisalCycleId, Nullable<int> locationId, Nullable<int> verticalId, string divisionIds, string departmentIds, string teamIds, string designationIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string stageXmlString, Nullable<int> transById, ObjectParameter success, ObjectParameter duplicateNames)
        {
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var divisionIdsParameter = divisionIds != null ?
                new ObjectParameter("DivisionIds", divisionIds) :
                new ObjectParameter("DivisionIds", typeof(string));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            var designationIdsParameter = designationIds != null ?
                new ObjectParameter("DesignationIds", designationIds) :
                new ObjectParameter("DesignationIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var stageXmlStringParameter = stageXmlString != null ?
                new ObjectParameter("StageXmlString", stageXmlString) :
                new ObjectParameter("StageXmlString", typeof(string));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddAppraisalSetting", appraisalCycleIdParameter, locationIdParameter, verticalIdParameter, divisionIdsParameter, departmentIdsParameter, teamIdsParameter, designationIdsParameter, startDateParameter, endDateParameter, stageXmlStringParameter, transByIdParameter, success, duplicateNames);
        }
    
        [DbFunction("MISEntities", "fnSplitWord")]
        public virtual IQueryable<fnSplitWord_Result> fnSplitWord(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplitWord_Result>("[MISEntities].[fnSplitWord](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<spReferBackAppraisalForm_Result> spReferBackAppraisalForm(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId, string comments)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReferBackAppraisalForm_Result>("spReferBackAppraisalForm", loginUserIdParameter, empAppraisalSettingIdParameter, commentsParameter);
        }
    
        public virtual ObjectResult<Proc_GetSchedulerActions_Result> Proc_GetSchedulerActions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetSchedulerActions_Result>("Proc_GetSchedulerActions");
        }
    
        public virtual ObjectResult<Nullable<int>> Proc_UpdateLastRunStatus(Nullable<long> actionId, string result)
        {
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("ActionId", actionId) :
                new ObjectParameter("ActionId", typeof(long));
    
            var resultParameter = result != null ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Proc_UpdateLastRunStatus", actionIdParameter, resultParameter);
        }
    
        public virtual ObjectResult<spGetAppraisalReport_Result> spGetAppraisalReport(Nullable<int> loginUserId, Nullable<int> appraisalCycleId, string appraisalStatusIds)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var appraisalStatusIdsParameter = appraisalStatusIds != null ?
                new ObjectParameter("AppraisalStatusIds", appraisalStatusIds) :
                new ObjectParameter("AppraisalStatusIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppraisalReport_Result>("spGetAppraisalReport", loginUserIdParameter, appraisalCycleIdParameter, appraisalStatusIdsParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmployeeAppraisalStatus_Result> Proc_GetEmployeeAppraisalStatus(Nullable<int> loginUserId, Nullable<int> appraisalCycleId, string appraisalStatusIds)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var appraisalStatusIdsParameter = appraisalStatusIds != null ?
                new ObjectParameter("AppraisalStatusIds", appraisalStatusIds) :
                new ObjectParameter("AppraisalStatusIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmployeeAppraisalStatus_Result>("Proc_GetEmployeeAppraisalStatus", loginUserIdParameter, appraisalCycleIdParameter, appraisalStatusIdsParameter);
        }
    
        public virtual ObjectResult<spFetchDailyLeaveReport_Result> spFetchDailyLeaveReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string departmentIds)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchDailyLeaveReport_Result>("spFetchDailyLeaveReport", fromDateParameter, tillDateParameter, departmentIdsParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceRegisterForUser_Result> spGetAttendanceRegisterForUser(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceRegisterForUser_Result>("spGetAttendanceRegisterForUser", fromDateParameter, endDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetEmployeesWithNoAttendance_Result> spGetEmployeesWithNoAttendance(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeesWithNoAttendance_Result>("spGetEmployeesWithNoAttendance", fromDateParameter, toDateParameter);
        }
    
        public virtual int Proc_AddUpdateASquareAttendance(Nullable<int> deviceId, string attendanceXmlString, Nullable<int> transById, ObjectParameter success)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var attendanceXmlStringParameter = attendanceXmlString != null ?
                new ObjectParameter("AttendanceXmlString", attendanceXmlString) :
                new ObjectParameter("AttendanceXmlString", typeof(string));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateASquareAttendance", deviceIdParameter, attendanceXmlStringParameter, transByIdParameter, success);
        }
    
        public virtual ObjectResult<spGeAttendanceForEmployeeAttendanceRegister_Result> spGeAttendanceForEmployeeAttendanceRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, Nullable<int> departmentId, string forEmployeeId, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var forEmployeeIdParameter = forEmployeeId != null ?
                new ObjectParameter("ForEmployeeId", forEmployeeId) :
                new ObjectParameter("ForEmployeeId", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGeAttendanceForEmployeeAttendanceRegister_Result>("spGeAttendanceForEmployeeAttendanceRegister", fromDateParameter, endDateParameter, departmentIdParameter, forEmployeeIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spFetchLastTwentyFiveApprovedLnsa_Result> spFetchLastTwentyFiveApprovedLnsa(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchLastTwentyFiveApprovedLnsa_Result>("spFetchLastTwentyFiveApprovedLnsa", userIdParameter);
        }
    
        public virtual ObjectResult<spGetLeaveInformation_Result> spGetLeaveInformation(Nullable<long> leaveRequestApplicationId, Nullable<long> approverId)
        {
            var leaveRequestApplicationIdParameter = leaveRequestApplicationId.HasValue ?
                new ObjectParameter("LeaveRequestApplicationId", leaveRequestApplicationId) :
                new ObjectParameter("LeaveRequestApplicationId", typeof(long));
    
            var approverIdParameter = approverId.HasValue ?
                new ObjectParameter("ApproverId", approverId) :
                new ObjectParameter("ApproverId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeaveInformation_Result>("spGetLeaveInformation", leaveRequestApplicationIdParameter, approverIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spFetchTimesheetEmailTypeDay(Nullable<int> userId, Nullable<int> emailType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var emailTypeParameter = emailType.HasValue ?
                new ObjectParameter("EmailType", emailType) :
                new ObjectParameter("EmailType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spFetchTimesheetEmailTypeDay", userIdParameter, emailTypeParameter);
        }
    
        public virtual ObjectResult<string> spFetchTimesheetEmailTypeTime(Nullable<int> userId, Nullable<int> emailType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var emailTypeParameter = emailType.HasValue ?
                new ObjectParameter("EmailType", emailType) :
                new ObjectParameter("EmailType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spFetchTimesheetEmailTypeTime", userIdParameter, emailTypeParameter);
        }
    
        public virtual ObjectResult<spGetLeaveBalanceForUser_Result> spGetLeaveBalanceForUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeaveBalanceForUser_Result>("spGetLeaveBalanceForUser", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Proc_RejectContactUpdateRequest(string reason, Nullable<int> requestId, Nullable<int> hrID)
        {
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var hrIDParameter = hrID.HasValue ?
                new ObjectParameter("hrID", hrID) :
                new ObjectParameter("hrID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Proc_RejectContactUpdateRequest", reasonParameter, requestIdParameter, hrIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUpdateContactDetails(Nullable<int> requestId, Nullable<int> userId, Nullable<int> hrID)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var hrIDParameter = hrID.HasValue ?
                new ObjectParameter("hrID", hrID) :
                new ObjectParameter("hrID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUpdateContactDetails", requestIdParameter, userIdParameter, hrIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> Proc_IsAlreadyMenuDelegated(Nullable<int> menuId, Nullable<int> userId, Nullable<int> empId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Proc_IsAlreadyMenuDelegated", menuIdParameter, userIdParameter, empIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spGetUsersForReportsByUserIdAndDepartmentIdAndReportingManager_Result> spGetUsersForReportsByUserIdAndDepartmentIdAndReportingManager(Nullable<int> userId, Nullable<System.DateTime> date, string departmentId, string reportTo, Nullable<bool> fetchDataForEntireOrg)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var reportToParameter = reportTo != null ?
                new ObjectParameter("ReportTo", reportTo) :
                new ObjectParameter("ReportTo", typeof(string));
    
            var fetchDataForEntireOrgParameter = fetchDataForEntireOrg.HasValue ?
                new ObjectParameter("FetchDataForEntireOrg", fetchDataForEntireOrg) :
                new ObjectParameter("FetchDataForEntireOrg", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUsersForReportsByUserIdAndDepartmentIdAndReportingManager_Result>("spGetUsersForReportsByUserIdAndDepartmentIdAndReportingManager", userIdParameter, dateParameter, departmentIdParameter, reportToParameter, fetchDataForEntireOrgParameter);
        }
    
        public virtual ObjectResult<spGetEmployeesReportingToUser_Result> spGetEmployeesReportingToUser(Nullable<int> userId, Nullable<bool> includeUser, Nullable<bool> fetchDataForEntireOrg)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var includeUserParameter = includeUser.HasValue ?
                new ObjectParameter("IncludeUser", includeUser) :
                new ObjectParameter("IncludeUser", typeof(bool));
    
            var fetchDataForEntireOrgParameter = fetchDataForEntireOrg.HasValue ?
                new ObjectParameter("FetchDataForEntireOrg", fetchDataForEntireOrg) :
                new ObjectParameter("FetchDataForEntireOrg", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeesReportingToUser_Result>("spGetEmployeesReportingToUser", userIdParameter, includeUserParameter, fetchDataForEntireOrgParameter);
        }
    
        public virtual ObjectResult<spGetDepartmentForAttendanceRegisterByUserId_Result> spGetDepartmentForAttendanceRegisterByUserId(Nullable<int> userId, Nullable<bool> fetchDataForEntireOrg)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fetchDataForEntireOrgParameter = fetchDataForEntireOrg.HasValue ?
                new ObjectParameter("FetchDataForEntireOrg", fetchDataForEntireOrg) :
                new ObjectParameter("FetchDataForEntireOrg", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDepartmentForAttendanceRegisterByUserId_Result>("spGetDepartmentForAttendanceRegisterByUserId", userIdParameter, fetchDataForEntireOrgParameter);
        }
    
        public virtual ObjectResult<spGetEmployesForWorkAnniversary_Result> spGetEmployesForWorkAnniversary(Nullable<int> noOfrecords)
        {
            var noOfrecordsParameter = noOfrecords.HasValue ?
                new ObjectParameter("NoOfrecords", noOfrecords) :
                new ObjectParameter("NoOfrecords", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployesForWorkAnniversary_Result>("spGetEmployesForWorkAnniversary", noOfrecordsParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spSubmitGoals(string goalIds, Nullable<int> userId)
        {
            var goalIdsParameter = goalIds != null ?
                new ObjectParameter("GoalIds", goalIds) :
                new ObjectParameter("GoalIds", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spSubmitGoals", goalIdsParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Proc_FetchUserHierarchy_Result> Proc_FetchUserHierarchy(Nullable<int> loginUserId, Nullable<int> parentId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchUserHierarchy_Result>("Proc_FetchUserHierarchy", loginUserIdParameter, parentIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetEmployeeTreeByUserId")]
        public virtual IQueryable<Fun_GetEmployeeTreeByUserId_Result> Fun_GetEmployeeTreeByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetEmployeeTreeByUserId_Result>("[MISEntities].[Fun_GetEmployeeTreeByUserId](@UserId)", userIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetFiscalDates")]
        public virtual IQueryable<Fun_GetFiscalDates_Result> Fun_GetFiscalDates(Nullable<System.DateTime> currentDate)
        {
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetFiscalDates_Result>("[MISEntities].[Fun_GetFiscalDates](@CurrentDate)", currentDateParameter);
        }
    
        public virtual ObjectResult<Proc_FetchSchedulerActions_Result> Proc_FetchSchedulerActions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchSchedulerActions_Result>("Proc_FetchSchedulerActions");
        }
    
        public virtual ObjectResult<Proc_SchedulerGetEmployeeAttendance_Result> Proc_SchedulerGetEmployeeAttendance(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, Nullable<int> departmentId, string forEmployeeIds, Nullable<int> rMId, Nullable<bool> fetchDataForEntireOrg)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var forEmployeeIdsParameter = forEmployeeIds != null ?
                new ObjectParameter("ForEmployeeIds", forEmployeeIds) :
                new ObjectParameter("ForEmployeeIds", typeof(string));
    
            var rMIdParameter = rMId.HasValue ?
                new ObjectParameter("RMId", rMId) :
                new ObjectParameter("RMId", typeof(int));
    
            var fetchDataForEntireOrgParameter = fetchDataForEntireOrg.HasValue ?
                new ObjectParameter("FetchDataForEntireOrg", fetchDataForEntireOrg) :
                new ObjectParameter("FetchDataForEntireOrg", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_SchedulerGetEmployeeAttendance_Result>("Proc_SchedulerGetEmployeeAttendance", fromDateParameter, endDateParameter, departmentIdParameter, forEmployeeIdsParameter, rMIdParameter, fetchDataForEntireOrgParameter);
        }
    
        public virtual int Proc_SchedulerMarkLWPByUserId(Nullable<System.DateTime> date, Nullable<int> userId, ObjectParameter success, ObjectParameter message)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SchedulerMarkLWPByUserId", dateParameter, userIdParameter, success, message);
        }
    
        public virtual ObjectResult<Nullable<int>> Proc_UpdateSchedulerLastRunStatus(Nullable<long> actionId, string result)
        {
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("ActionId", actionId) :
                new ObjectParameter("ActionId", typeof(long));
    
            var resultParameter = result != null ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Proc_UpdateSchedulerLastRunStatus", actionIdParameter, resultParameter);
        }
    
        public virtual int spDumpPunchInLogInMIS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDumpPunchInLogInMIS");
        }
    
        public virtual ObjectResult<spFetchMonthlyLeaveReport_Result> spFetchMonthlyLeaveReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string departmentIds)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchMonthlyLeaveReport_Result>("spFetchMonthlyLeaveReport", fromDateParameter, tillDateParameter, departmentIdsParameter);
        }
    
        public virtual ObjectResult<string> spFetchPendingActivitiesForManagerApproval1(Nullable<int> userId, Nullable<bool> isGrouped)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isGroupedParameter = isGrouped.HasValue ?
                new ObjectParameter("IsGrouped", isGrouped) :
                new ObjectParameter("IsGrouped", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spFetchPendingActivitiesForManagerApproval1", userIdParameter, isGroupedParameter);
        }
    
        public virtual int spFormDynamicAttendanceGridForManager(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> rMId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var rMIdParameter = rMId.HasValue ?
                new ObjectParameter("RMId", rMId) :
                new ObjectParameter("RMId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFormDynamicAttendanceGridForManager", startDateParameter, endDateParameter, rMIdParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceUploadStatusOfASquare_Result> spGetAttendanceUploadStatusOfASquare(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceUploadStatusOfASquare_Result>("spGetAttendanceUploadStatusOfASquare", dateParameter);
        }
    
        public virtual ObjectResult<spGetOldestAvailableCompOff_Result> spGetOldestAvailableCompOff(Nullable<int> userId, Nullable<int> noOfDays, Nullable<System.DateTime> leaveFromDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var noOfDaysParameter = noOfDays.HasValue ?
                new ObjectParameter("NoOfDays", noOfDays) :
                new ObjectParameter("NoOfDays", typeof(int));
    
            var leaveFromDateParameter = leaveFromDate.HasValue ?
                new ObjectParameter("LeaveFromDate", leaveFromDate) :
                new ObjectParameter("LeaveFromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOldestAvailableCompOff_Result>("spGetOldestAvailableCompOff", userIdParameter, noOfDaysParameter, leaveFromDateParameter);
        }
    
        public virtual ObjectResult<spLapseCompOff_Result> spLapseCompOff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLapseCompOff_Result>("spLapseCompOff");
        }
    
        public virtual ObjectResult<Proc_GetTournamentSchedule_Result> Proc_GetTournamentSchedule(Nullable<int> tournamentCategoryId, Nullable<int> round, Nullable<System.DateTime> tournamentDate)
        {
            var tournamentCategoryIdParameter = tournamentCategoryId.HasValue ?
                new ObjectParameter("TournamentCategoryId", tournamentCategoryId) :
                new ObjectParameter("TournamentCategoryId", typeof(int));
    
            var roundParameter = round.HasValue ?
                new ObjectParameter("Round", round) :
                new ObjectParameter("Round", typeof(int));
    
            var tournamentDateParameter = tournamentDate.HasValue ?
                new ObjectParameter("TournamentDate", tournamentDate) :
                new ObjectParameter("TournamentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetTournamentSchedule_Result>("Proc_GetTournamentSchedule", tournamentCategoryIdParameter, roundParameter, tournamentDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetTournamentScoreDetails_Result> Proc_GetTournamentScoreDetails(Nullable<System.DateTime> tournamentDate)
        {
            var tournamentDateParameter = tournamentDate.HasValue ?
                new ObjectParameter("TournamentDate", tournamentDate) :
                new ObjectParameter("TournamentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetTournamentScoreDetails_Result>("Proc_GetTournamentScoreDetails", tournamentDateParameter);
        }
    
        public virtual ObjectResult<spGetAllClientResource_Result> spGetAllClientResource()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllClientResource_Result>("spGetAllClientResource");
        }
    
        public virtual ObjectResult<spGetAllProjects_Result> spGetAllProjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllProjects_Result>("spGetAllProjects");
        }
    
        public virtual ObjectResult<Nullable<int>> spImportAccessControllerLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spImportAccessControllerLog");
        }
    
        public virtual int Proc_AddUpdateTechnicalCompetencyForm(Nullable<int> competencyFormId, string competencyFormSuffix, Nullable<int> locationId, Nullable<int> verticalId, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<int> designationId, Nullable<int> feedbackTypeId, Nullable<bool> isRating, Nullable<bool> isFinalized, string parameterXmlString, Nullable<int> transById, ObjectParameter success, ObjectParameter duplicateNames)
        {
            var competencyFormIdParameter = competencyFormId.HasValue ?
                new ObjectParameter("CompetencyFormId", competencyFormId) :
                new ObjectParameter("CompetencyFormId", typeof(int));
    
            var competencyFormSuffixParameter = competencyFormSuffix != null ?
                new ObjectParameter("CompetencyFormSuffix", competencyFormSuffix) :
                new ObjectParameter("CompetencyFormSuffix", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            var feedbackTypeIdParameter = feedbackTypeId.HasValue ?
                new ObjectParameter("FeedbackTypeId", feedbackTypeId) :
                new ObjectParameter("FeedbackTypeId", typeof(int));
    
            var isRatingParameter = isRating.HasValue ?
                new ObjectParameter("IsRating", isRating) :
                new ObjectParameter("IsRating", typeof(bool));
    
            var isFinalizedParameter = isFinalized.HasValue ?
                new ObjectParameter("IsFinalized", isFinalized) :
                new ObjectParameter("IsFinalized", typeof(bool));
    
            var parameterXmlStringParameter = parameterXmlString != null ?
                new ObjectParameter("ParameterXmlString", parameterXmlString) :
                new ObjectParameter("ParameterXmlString", typeof(string));
    
            var transByIdParameter = transById.HasValue ?
                new ObjectParameter("TransById", transById) :
                new ObjectParameter("TransById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateTechnicalCompetencyForm", competencyFormIdParameter, competencyFormSuffixParameter, locationIdParameter, verticalIdParameter, divisionIdParameter, departmentIdParameter, designationIdParameter, feedbackTypeIdParameter, isRatingParameter, isFinalizedParameter, parameterXmlStringParameter, transByIdParameter, success, duplicateNames);
        }
    
        public virtual ObjectResult<Proc_GetEmpAppraisalSetting_Result> Proc_GetEmpAppraisalSetting(Nullable<bool> isTeamData, Nullable<int> appraisalCycleId, Nullable<int> locationId, string verticalIds, string divisionIds, string departmentIds, string teamIds, string designationIds, Nullable<int> employeeId, string appraisalStatusIds, string appraiserIds, string approverIds, Nullable<int> empAppraisalSettingId, Nullable<int> loginUserId)
        {
            var isTeamDataParameter = isTeamData.HasValue ?
                new ObjectParameter("IsTeamData", isTeamData) :
                new ObjectParameter("IsTeamData", typeof(bool));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdsParameter = verticalIds != null ?
                new ObjectParameter("VerticalIds", verticalIds) :
                new ObjectParameter("VerticalIds", typeof(string));
    
            var divisionIdsParameter = divisionIds != null ?
                new ObjectParameter("DivisionIds", divisionIds) :
                new ObjectParameter("DivisionIds", typeof(string));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            var designationIdsParameter = designationIds != null ?
                new ObjectParameter("DesignationIds", designationIds) :
                new ObjectParameter("DesignationIds", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var appraisalStatusIdsParameter = appraisalStatusIds != null ?
                new ObjectParameter("AppraisalStatusIds", appraisalStatusIds) :
                new ObjectParameter("AppraisalStatusIds", typeof(string));
    
            var appraiserIdsParameter = appraiserIds != null ?
                new ObjectParameter("AppraiserIds", appraiserIds) :
                new ObjectParameter("AppraiserIds", typeof(string));
    
            var approverIdsParameter = approverIds != null ?
                new ObjectParameter("ApproverIds", approverIds) :
                new ObjectParameter("ApproverIds", typeof(string));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpAppraisalSetting_Result>("Proc_GetEmpAppraisalSetting", isTeamDataParameter, appraisalCycleIdParameter, locationIdParameter, verticalIdsParameter, divisionIdsParameter, departmentIdsParameter, teamIdsParameter, designationIdsParameter, employeeIdParameter, appraisalStatusIdsParameter, appraiserIdsParameter, approverIdsParameter, empAppraisalSettingIdParameter, loginUserIdParameter);
        }
    
        [DbFunction("MISEntities", "fnGetAppraisalOverallRating")]
        public virtual IQueryable<fnGetAppraisalOverallRating_Result> fnGetAppraisalOverallRating(Nullable<int> empAppraisalSettingId)
        {
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetAppraisalOverallRating_Result>("[MISEntities].[fnGetAppraisalOverallRating](@EmpAppraisalSettingId)", empAppraisalSettingIdParameter);
        }
    
        public virtual int Proc_AddUpdateEmpAppraisalForm(Nullable<int> empAppraisalSettingId, string reviewPeriod, Nullable<System.DateTime> exposerFrom, Nullable<System.DateTime> exposerTo, string appraisalParameterXmlString, Nullable<int> loginUserId, ObjectParameter empAppraisalId, ObjectParameter success, ObjectParameter ratings)
        {
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var reviewPeriodParameter = reviewPeriod != null ?
                new ObjectParameter("ReviewPeriod", reviewPeriod) :
                new ObjectParameter("ReviewPeriod", typeof(string));
    
            var exposerFromParameter = exposerFrom.HasValue ?
                new ObjectParameter("ExposerFrom", exposerFrom) :
                new ObjectParameter("ExposerFrom", typeof(System.DateTime));
    
            var exposerToParameter = exposerTo.HasValue ?
                new ObjectParameter("ExposerTo", exposerTo) :
                new ObjectParameter("ExposerTo", typeof(System.DateTime));
    
            var appraisalParameterXmlStringParameter = appraisalParameterXmlString != null ?
                new ObjectParameter("AppraisalParameterXmlString", appraisalParameterXmlString) :
                new ObjectParameter("AppraisalParameterXmlString", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateEmpAppraisalForm", empAppraisalSettingIdParameter, reviewPeriodParameter, exposerFromParameter, exposerToParameter, appraisalParameterXmlStringParameter, loginUserIdParameter, empAppraisalId, success, ratings);
        }
    
        public virtual ObjectResult<Proc_GetEmpAppraisalForm_Result> Proc_GetEmpAppraisalForm(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpAppraisalForm_Result>("Proc_GetEmpAppraisalForm", loginUserIdParameter, empAppraisalSettingIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmpAppraisalFormForPDF_Result> Proc_GetEmpAppraisalFormForPDF(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpAppraisalFormForPDF_Result>("Proc_GetEmpAppraisalFormForPDF", loginUserIdParameter, empAppraisalSettingIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmpAppraisalSettingDetail_Result> Proc_GetEmpAppraisalSettingDetail(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId, Nullable<int> employeeId, Nullable<int> appraisalCycleId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpAppraisalSettingDetail_Result>("Proc_GetEmpAppraisalSettingDetail", loginUserIdParameter, empAppraisalSettingIdParameter, employeeIdParameter, appraisalCycleIdParameter);
        }
    
        public virtual ObjectResult<Proc_FetchAllUnmappedStaffToAccessCard_Result> Proc_FetchAllUnmappedStaffToAccessCard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchAllUnmappedStaffToAccessCard_Result>("Proc_FetchAllUnmappedStaffToAccessCard");
        }
    
        [DbFunction("MISEntities", "Fun_GetOldAndNewPLByUser")]
        public virtual IQueryable<Fun_GetOldAndNewPLByUser_Result> Fun_GetOldAndNewPLByUser(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetOldAndNewPLByUser_Result>("[MISEntities].[Fun_GetOldAndNewPLByUser](@LoginUserId)", loginUserIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetUserMonthYear")]
        public virtual IQueryable<Fun_GetUserMonthYear_Result> Fun_GetUserMonthYear(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetUserMonthYear_Result>("[MISEntities].[Fun_GetUserMonthYear](@UserId)", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Proc_ApplyLegitimateLeave(Nullable<int> employeeId, Nullable<int> loginUserId, Nullable<System.DateTime> fromDateIn, string leaveCombination, string reason, Nullable<int> leaveId, Nullable<bool> isValid)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var fromDateInParameter = fromDateIn.HasValue ?
                new ObjectParameter("FromDateIn", fromDateIn) :
                new ObjectParameter("FromDateIn", typeof(System.DateTime));
    
            var leaveCombinationParameter = leaveCombination != null ?
                new ObjectParameter("LeaveCombination", leaveCombination) :
                new ObjectParameter("LeaveCombination", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Proc_ApplyLegitimateLeave", employeeIdParameter, loginUserIdParameter, fromDateInParameter, leaveCombinationParameter, reasonParameter, leaveIdParameter, isValidParameter);
        }
    
        public virtual int Proc_ApplyOutingRequest(Nullable<int> employeeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string reason, Nullable<int> outingTypeId, Nullable<int> loginUserId, string primaryContactNo, string otherContactNo, ObjectParameter success)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var outingTypeIdParameter = outingTypeId.HasValue ?
                new ObjectParameter("OutingTypeId", outingTypeId) :
                new ObjectParameter("OutingTypeId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var primaryContactNoParameter = primaryContactNo != null ?
                new ObjectParameter("PrimaryContactNo", primaryContactNo) :
                new ObjectParameter("PrimaryContactNo", typeof(string));
    
            var otherContactNoParameter = otherContactNo != null ?
                new ObjectParameter("OtherContactNo", otherContactNo) :
                new ObjectParameter("OtherContactNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ApplyOutingRequest", employeeIdParameter, fromDateParameter, tillDateParameter, reasonParameter, outingTypeIdParameter, loginUserIdParameter, primaryContactNoParameter, otherContactNoParameter, success);
        }
    
        public virtual ObjectResult<Proc_GetDateToCancelOutingRequest_Result> Proc_GetDateToCancelOutingRequest(Nullable<long> outingRequestId)
        {
            var outingRequestIdParameter = outingRequestId.HasValue ?
                new ObjectParameter("OutingRequestId", outingRequestId) :
                new ObjectParameter("OutingRequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetDateToCancelOutingRequest_Result>("Proc_GetDateToCancelOutingRequest", outingRequestIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmpInformation_Result> Proc_GetEmpInformation(Nullable<int> outingRequestId, Nullable<int> loginUserId)
        {
            var outingRequestIdParameter = outingRequestId.HasValue ?
                new ObjectParameter("OutingRequestId", outingRequestId) :
                new ObjectParameter("OutingRequestId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpInformation_Result>("Proc_GetEmpInformation", outingRequestIdParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmpInformationForLegitimateLeave_Result> Proc_GetEmpInformationForLegitimateLeave(Nullable<int> requestId, Nullable<int> loginUserId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpInformationForLegitimateLeave_Result>("Proc_GetEmpInformationForLegitimateLeave", requestIdParameter, loginUserIdParameter);
        }
    
        public virtual int Proc_TakeActionOnLegitimateLeave(Nullable<long> legitimateLeaveRequestId, string statusCode, string remarks, Nullable<long> loginUserId, string loginUserType, ObjectParameter success)
        {
            var legitimateLeaveRequestIdParameter = legitimateLeaveRequestId.HasValue ?
                new ObjectParameter("LegitimateLeaveRequestId", legitimateLeaveRequestId) :
                new ObjectParameter("LegitimateLeaveRequestId", typeof(long));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(long));
    
            var loginUserTypeParameter = loginUserType != null ?
                new ObjectParameter("LoginUserType", loginUserType) :
                new ObjectParameter("LoginUserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_TakeActionOnLegitimateLeave", legitimateLeaveRequestIdParameter, statusCodeParameter, remarksParameter, loginUserIdParameter, loginUserTypeParameter, success);
        }
    
        public virtual ObjectResult<Proc_UserAppliedLegitimateLeave_Result> Proc_UserAppliedLegitimateLeave(Nullable<int> userId, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_UserAppliedLegitimateLeave_Result>("Proc_UserAppliedLegitimateLeave", userIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spFetchLastTwentyFiveApprovedLnsa1_Result> spFetchLastTwentyFiveApprovedLnsa1(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchLastTwentyFiveApprovedLnsa1_Result>("spFetchLastTwentyFiveApprovedLnsa1", userIdParameter);
        }
    
        public virtual ObjectResult<spGeAttendanceForEmployeeAttendanceRegister1_Result> spGeAttendanceForEmployeeAttendanceRegister1(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, Nullable<int> departmentId, string forEmployeeId, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var forEmployeeIdParameter = forEmployeeId != null ?
                new ObjectParameter("ForEmployeeId", forEmployeeId) :
                new ObjectParameter("ForEmployeeId", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGeAttendanceForEmployeeAttendanceRegister1_Result>("spGeAttendanceForEmployeeAttendanceRegister1", fromDateParameter, endDateParameter, departmentIdParameter, forEmployeeIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<string> spGetApproverRemarks(Nullable<long> requestId, string type)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetApproverRemarks", requestIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<spGetUserAppliedCompOff_Result> spGetUserAppliedCompOff(Nullable<int> userId, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserAppliedCompOff_Result>("spGetUserAppliedCompOff", userIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetUserAppliedDataChangeRequest_Result> spGetUserAppliedDataChangeRequest(Nullable<int> userId, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserAppliedDataChangeRequest_Result>("spGetUserAppliedDataChangeRequest", userIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetUserAppliedWorkFromHome_Result> spGetUserAppliedWorkFromHome(Nullable<int> userId, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserAppliedWorkFromHome_Result>("spGetUserAppliedWorkFromHome", userIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetPromotionDesignationsList_Result> spGetPromotionDesignationsList(Nullable<int> empAppraisalSettingId)
        {
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPromotionDesignationsList_Result>("spGetPromotionDesignationsList", empAppraisalSettingIdParameter);
        }
    
        public virtual int spDeleteUserAccessCardMapping(Nullable<int> userCardMappingId, Nullable<int> loginUserId, Nullable<System.DateTime> assignedTillDate, ObjectParameter success)
        {
            var userCardMappingIdParameter = userCardMappingId.HasValue ?
                new ObjectParameter("UserCardMappingId", userCardMappingId) :
                new ObjectParameter("UserCardMappingId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var assignedTillDateParameter = assignedTillDate.HasValue ?
                new ObjectParameter("AssignedTillDate", assignedTillDate) :
                new ObjectParameter("AssignedTillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteUserAccessCardMapping", userCardMappingIdParameter, loginUserIdParameter, assignedTillDateParameter, success);
        }
    
        public virtual ObjectResult<spGetAttendanceRegisterForEmployee_Result> spGetAttendanceRegisterForEmployee(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, string departmentIds, string reportToIds, string userIds)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            var reportToIdsParameter = reportToIds != null ?
                new ObjectParameter("ReportToIds", reportToIds) :
                new ObjectParameter("ReportToIds", typeof(string));
    
            var userIdsParameter = userIds != null ?
                new ObjectParameter("UserIds", userIds) :
                new ObjectParameter("UserIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceRegisterForEmployee_Result>("spGetAttendanceRegisterForEmployee", fromDateParameter, endDateParameter, departmentIdsParameter, reportToIdsParameter, userIdsParameter);
        }
    
        public virtual int spApplyLeave(Nullable<int> employeeId, Nullable<int> loginUserId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string reason, string leaveCombination, string primaryContactNo, string alternateContactNo, Nullable<bool> isAvailableOnMobile, Nullable<bool> isAvailableOnEmail, Nullable<bool> isFirstDayHalfDay, Nullable<bool> isLastDayHalfDay, ObjectParameter success)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var leaveCombinationParameter = leaveCombination != null ?
                new ObjectParameter("LeaveCombination", leaveCombination) :
                new ObjectParameter("LeaveCombination", typeof(string));
    
            var primaryContactNoParameter = primaryContactNo != null ?
                new ObjectParameter("PrimaryContactNo", primaryContactNo) :
                new ObjectParameter("PrimaryContactNo", typeof(string));
    
            var alternateContactNoParameter = alternateContactNo != null ?
                new ObjectParameter("AlternateContactNo", alternateContactNo) :
                new ObjectParameter("AlternateContactNo", typeof(string));
    
            var isAvailableOnMobileParameter = isAvailableOnMobile.HasValue ?
                new ObjectParameter("IsAvailableOnMobile", isAvailableOnMobile) :
                new ObjectParameter("IsAvailableOnMobile", typeof(bool));
    
            var isAvailableOnEmailParameter = isAvailableOnEmail.HasValue ?
                new ObjectParameter("IsAvailableOnEmail", isAvailableOnEmail) :
                new ObjectParameter("IsAvailableOnEmail", typeof(bool));
    
            var isFirstDayHalfDayParameter = isFirstDayHalfDay.HasValue ?
                new ObjectParameter("IsFirstDayHalfDay", isFirstDayHalfDay) :
                new ObjectParameter("IsFirstDayHalfDay", typeof(bool));
    
            var isLastDayHalfDayParameter = isLastDayHalfDay.HasValue ?
                new ObjectParameter("IsLastDayHalfDay", isLastDayHalfDay) :
                new ObjectParameter("IsLastDayHalfDay", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplyLeave", employeeIdParameter, loginUserIdParameter, fromDateParameter, tillDateParameter, reasonParameter, leaveCombinationParameter, primaryContactNoParameter, alternateContactNoParameter, isAvailableOnMobileParameter, isAvailableOnEmailParameter, isFirstDayHalfDayParameter, isLastDayHalfDayParameter, success);
        }
    
        public virtual ObjectResult<Nullable<bool>> spChangeUserStatus(Nullable<int> employeeId, Nullable<int> state, Nullable<System.DateTime> terminationDate, Nullable<int> userId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var terminationDateParameter = terminationDate.HasValue ?
                new ObjectParameter("TerminationDate", terminationDate) :
                new ObjectParameter("TerminationDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spChangeUserStatus", employeeIdParameter, stateParameter, terminationDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetOutingRequestByUserId_Result> Proc_GetOutingRequestByUserId(Nullable<int> employeeId, Nullable<int> year)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetOutingRequestByUserId_Result>("Proc_GetOutingRequestByUserId", employeeIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spUpdateUserAccessCardMapping(Nullable<int> userCardMappingId, Nullable<int> accessCardId, Nullable<bool> isPimcoUserCardMapping, Nullable<int> modifiedBy, Nullable<System.DateTime> assignedFrom)
        {
            var userCardMappingIdParameter = userCardMappingId.HasValue ?
                new ObjectParameter("UserCardMappingId", userCardMappingId) :
                new ObjectParameter("UserCardMappingId", typeof(int));
    
            var accessCardIdParameter = accessCardId.HasValue ?
                new ObjectParameter("AccessCardId", accessCardId) :
                new ObjectParameter("AccessCardId", typeof(int));
    
            var isPimcoUserCardMappingParameter = isPimcoUserCardMapping.HasValue ?
                new ObjectParameter("IsPimcoUserCardMapping", isPimcoUserCardMapping) :
                new ObjectParameter("IsPimcoUserCardMapping", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var assignedFromParameter = assignedFrom.HasValue ?
                new ObjectParameter("assignedFrom", assignedFrom) :
                new ObjectParameter("assignedFrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spUpdateUserAccessCardMapping", userCardMappingIdParameter, accessCardIdParameter, isPimcoUserCardMappingParameter, modifiedByParameter, assignedFromParameter);
        }
    
        public virtual ObjectResult<Proc_GetAllUserUnMappedCardHistory_Result> Proc_GetAllUserUnMappedCardHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllUserUnMappedCardHistory_Result>("Proc_GetAllUserUnMappedCardHistory");
        }
    
        public virtual ObjectResult<spFetchAllUserAccessCardMappings_Result> spFetchAllUserAccessCardMappings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllUserAccessCardMappings_Result>("spFetchAllUserAccessCardMappings");
        }
    
        public virtual int Proc_VerifyUserRegDetails(Nullable<long> registrationId, Nullable<int> accessCardId, Nullable<int> userId, Nullable<bool> isPimcoUserCardMapping, Nullable<int> createdBy, Nullable<bool> isStaff, Nullable<System.DateTime> fromDate, ObjectParameter success)
        {
            var registrationIdParameter = registrationId.HasValue ?
                new ObjectParameter("RegistrationId", registrationId) :
                new ObjectParameter("RegistrationId", typeof(long));
    
            var accessCardIdParameter = accessCardId.HasValue ?
                new ObjectParameter("AccessCardId", accessCardId) :
                new ObjectParameter("AccessCardId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isPimcoUserCardMappingParameter = isPimcoUserCardMapping.HasValue ?
                new ObjectParameter("IsPimcoUserCardMapping", isPimcoUserCardMapping) :
                new ObjectParameter("IsPimcoUserCardMapping", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isStaffParameter = isStaff.HasValue ?
                new ObjectParameter("IsStaff", isStaff) :
                new ObjectParameter("IsStaff", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_VerifyUserRegDetails", registrationIdParameter, accessCardIdParameter, userIdParameter, isPimcoUserCardMappingParameter, createdByParameter, isStaffParameter, fromDateParameter, success);
        }
    
        public virtual int spAddGoals(Nullable<int> employeeId, string goalXmlString, Nullable<int> userId, Nullable<int> goalCycleId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var goalXmlStringParameter = goalXmlString != null ?
                new ObjectParameter("GoalXmlString", goalXmlString) :
                new ObjectParameter("GoalXmlString", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var goalCycleIdParameter = goalCycleId.HasValue ?
                new ObjectParameter("GoalCycleId", goalCycleId) :
                new ObjectParameter("GoalCycleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddGoals", employeeIdParameter, goalXmlStringParameter, userIdParameter, goalCycleIdParameter);
        }
    
        public virtual int spDraftGoals(Nullable<int> employeeId, string goalXmlString, Nullable<int> userId, Nullable<int> goalCycleId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var goalXmlStringParameter = goalXmlString != null ?
                new ObjectParameter("GoalXmlString", goalXmlString) :
                new ObjectParameter("GoalXmlString", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var goalCycleIdParameter = goalCycleId.HasValue ?
                new ObjectParameter("GoalCycleId", goalCycleId) :
                new ObjectParameter("GoalCycleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDraftGoals", employeeIdParameter, goalXmlStringParameter, userIdParameter, goalCycleIdParameter);
        }
    
        public virtual int Proc_AddNavigationMenu(string menuName, string actionName, string controllerName, Nullable<int> sequence, Nullable<bool> isLinkEnabled, Nullable<bool> isMenuVisible, string cssClass, Nullable<bool> isDelegatable, Nullable<bool> isTabMenu, Nullable<int> userId, ObjectParameter success)
        {
            var menuNameParameter = menuName != null ?
                new ObjectParameter("MenuName", menuName) :
                new ObjectParameter("MenuName", typeof(string));
    
            var actionNameParameter = actionName != null ?
                new ObjectParameter("ActionName", actionName) :
                new ObjectParameter("ActionName", typeof(string));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var isLinkEnabledParameter = isLinkEnabled.HasValue ?
                new ObjectParameter("IsLinkEnabled", isLinkEnabled) :
                new ObjectParameter("IsLinkEnabled", typeof(bool));
    
            var isMenuVisibleParameter = isMenuVisible.HasValue ?
                new ObjectParameter("IsMenuVisible", isMenuVisible) :
                new ObjectParameter("IsMenuVisible", typeof(bool));
    
            var cssClassParameter = cssClass != null ?
                new ObjectParameter("CssClass", cssClass) :
                new ObjectParameter("CssClass", typeof(string));
    
            var isDelegatableParameter = isDelegatable.HasValue ?
                new ObjectParameter("IsDelegatable", isDelegatable) :
                new ObjectParameter("IsDelegatable", typeof(bool));
    
            var isTabMenuParameter = isTabMenu.HasValue ?
                new ObjectParameter("IsTabMenu", isTabMenu) :
                new ObjectParameter("IsTabMenu", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddNavigationMenu", menuNameParameter, actionNameParameter, controllerNameParameter, sequenceParameter, isLinkEnabledParameter, isMenuVisibleParameter, cssClassParameter, isDelegatableParameter, isTabMenuParameter, userIdParameter, success);
        }
    
        public virtual ObjectResult<spGetReportingManagerForATeam_Result> spGetReportingManagerForATeam(string teamId)
        {
            var teamIdParameter = teamId != null ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReportingManagerForATeam_Result>("spGetReportingManagerForATeam", teamIdParameter);
        }
    
        public virtual ObjectResult<spGetTeamForADepartment_Result> spGetTeamForADepartment(string departmentId)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTeamForADepartment_Result>("spGetTeamForADepartment", departmentIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetDesignationListByDesignationGroup")]
        public virtual IQueryable<Fun_GetDesignationListByDesignationGroup_Result> Fun_GetDesignationListByDesignationGroup(string designationGroupIds)
        {
            var designationGroupIdsParameter = designationGroupIds != null ?
                new ObjectParameter("DesignationGroupIds", designationGroupIds) :
                new ObjectParameter("DesignationGroupIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetDesignationListByDesignationGroup_Result>("[MISEntities].[Fun_GetDesignationListByDesignationGroup](@DesignationGroupIds)", designationGroupIdsParameter);
        }
    
        public virtual ObjectResult<PROC_GetDesignationListByDesignationGroup_Result> PROC_GetDesignationListByDesignationGroup(string designationGroupIds)
        {
            var designationGroupIdsParameter = designationGroupIds != null ?
                new ObjectParameter("DesignationGroupIds", designationGroupIds) :
                new ObjectParameter("DesignationGroupIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_GetDesignationListByDesignationGroup_Result>("PROC_GetDesignationListByDesignationGroup", designationGroupIdsParameter);
        }
    
        public virtual ObjectResult<Proc_GetPimcoIdExpirationData_Result> Proc_GetPimcoIdExpirationData(Nullable<long> pimcoUserId)
        {
            var pimcoUserIdParameter = pimcoUserId.HasValue ?
                new ObjectParameter("PimcoUserId", pimcoUserId) :
                new ObjectParameter("PimcoUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetPimcoIdExpirationData_Result>("Proc_GetPimcoIdExpirationData", pimcoUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetPimcoUsers_Result> Proc_GetPimcoUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetPimcoUsers_Result>("Proc_GetPimcoUsers");
        }
    
        public virtual ObjectResult<Proc_GetUserDashboardCompOff_Result> Proc_GetUserDashboardCompOff(Nullable<int> userId, Nullable<System.DateTime> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetUserDashboardCompOff_Result>("Proc_GetUserDashboardCompOff", userIdParameter, yearParameter);
        }
    
        public virtual int spLapseCompOff1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLapseCompOff1");
        }
    
        public virtual ObjectResult<spImportUserShiftMapping_Result> spImportUserShiftMapping(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string data, Nullable<int> loginUserId, ObjectParameter success, ObjectParameter message)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spImportUserShiftMapping_Result>("spImportUserShiftMapping", fromDateParameter, toDateParameter, dataParameter, loginUserIdParameter, success, message);
        }
    
        public virtual ObjectResult<spGetDepartmentWiseTeams_Result> spGetDepartmentWiseTeams(string departmentId)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDepartmentWiseTeams_Result>("spGetDepartmentWiseTeams", departmentIdParameter);
        }
    
        public virtual ObjectResult<spGetTeamWiseReportingManagers_Result> spGetTeamWiseReportingManagers(string teamId)
        {
            var teamIdParameter = teamId != null ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTeamWiseReportingManagers_Result>("spGetTeamWiseReportingManagers", teamIdParameter);
        }
    
        public virtual ObjectResult<spFetchAllUnmappedUserToAccessCard_Result> spFetchAllUnmappedUserToAccessCard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllUnmappedUserToAccessCard_Result>("spFetchAllUnmappedUserToAccessCard");
        }
    
        public virtual ObjectResult<Proc_GetAllLnsaShiftReviewRequest_Result> Proc_GetAllLnsaShiftReviewRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllLnsaShiftReviewRequest_Result>("Proc_GetAllLnsaShiftReviewRequest", userIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetAllLnsaShiftRequest_Result> Proc_GetAllLnsaShiftRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllLnsaShiftRequest_Result>("Proc_GetAllLnsaShiftRequest", userIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetApproverDetails_Result> Proc_GetApproverDetails(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetApproverDetails_Result>("Proc_GetApproverDetails", userIdParameter);
        }
    
        public virtual ObjectResult<spFetchWeekMap_Result> spFetchWeekMap(Nullable<int> userId, Nullable<System.DateTime> startDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchWeekMap_Result>("spFetchWeekMap", userIdParameter, startDateParameter);
        }
    
        [DbFunction("MISEntities", "fnGetHRDetail")]
        public virtual IQueryable<fnGetHRDetail_Result> fnGetHRDetail(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetHRDetail_Result>("[MISEntities].[fnGetHRDetail](@LoginUserId)", loginUserIdParameter);
        }
    
        public virtual int Proc_AddReferral(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string position, string description, Nullable<int> userId, ObjectParameter success)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddReferral", fromDateParameter, tillDateParameter, positionParameter, descriptionParameter, userIdParameter, success);
        }
    
        public virtual ObjectResult<Nullable<bool>> Proc_ChangeReferralStatus(Nullable<int> referralId, Nullable<int> status, Nullable<int> userId)
        {
            var referralIdParameter = referralId.HasValue ?
                new ObjectParameter("ReferralId", referralId) :
                new ObjectParameter("ReferralId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Proc_ChangeReferralStatus", referralIdParameter, statusParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Proc_DetailsOfActiveEmployees_Result> Proc_DetailsOfActiveEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_DetailsOfActiveEmployees_Result>("Proc_DetailsOfActiveEmployees");
        }
    
        public virtual ObjectResult<Proc_GetLeaveBalanceHistoryByFY_Result> Proc_GetLeaveBalanceHistoryByFY(Nullable<System.DateTime> year, string leaveType, Nullable<int> userId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetLeaveBalanceHistoryByFY_Result>("Proc_GetLeaveBalanceHistoryByFY", yearParameter, leaveTypeParameter, userIdParameter);
        }
    
        public virtual int Proc_AddRefereeByUser(Nullable<int> referralId, string refereeName, string relation, string resume, Nullable<int> userId, ObjectParameter success)
        {
            var referralIdParameter = referralId.HasValue ?
                new ObjectParameter("ReferralId", referralId) :
                new ObjectParameter("ReferralId", typeof(int));
    
            var refereeNameParameter = refereeName != null ?
                new ObjectParameter("RefereeName", refereeName) :
                new ObjectParameter("RefereeName", typeof(string));
    
            var relationParameter = relation != null ?
                new ObjectParameter("Relation", relation) :
                new ObjectParameter("Relation", typeof(string));
    
            var resumeParameter = resume != null ?
                new ObjectParameter("Resume", resume) :
                new ObjectParameter("Resume", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddRefereeByUser", referralIdParameter, refereeNameParameter, relationParameter, resumeParameter, userIdParameter, success);
        }
    
        public virtual int Proc_TakeActionOnMapLnsaShift(Nullable<int> loginUserId, Nullable<int> requestId, string remarks, string statusCode, string actionCode, string type, ObjectParameter success)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var actionCodeParameter = actionCode != null ?
                new ObjectParameter("ActionCode", actionCode) :
                new ObjectParameter("ActionCode", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_TakeActionOnMapLnsaShift", loginUserIdParameter, requestIdParameter, remarksParameter, statusCodeParameter, actionCodeParameter, typeParameter, success);
        }
    
        public virtual int Proc_PromoteUsers(Nullable<int> employeeId, Nullable<int> newDesignationId, Nullable<System.DateTime> promotionDate, string newEmpCode, Nullable<int> userId, ObjectParameter success)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var newDesignationIdParameter = newDesignationId.HasValue ?
                new ObjectParameter("NewDesignationId", newDesignationId) :
                new ObjectParameter("NewDesignationId", typeof(int));
    
            var promotionDateParameter = promotionDate.HasValue ?
                new ObjectParameter("PromotionDate", promotionDate) :
                new ObjectParameter("PromotionDate", typeof(System.DateTime));
    
            var newEmpCodeParameter = newEmpCode != null ?
                new ObjectParameter("NewEmpCode", newEmpCode) :
                new ObjectParameter("NewEmpCode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_PromoteUsers", employeeIdParameter, newDesignationIdParameter, promotionDateParameter, newEmpCodeParameter, userIdParameter, success);
        }
    
        public virtual int Proc_ForwardReferees(Nullable<int> detailId, Nullable<int> referredById, string empIds, string message, Nullable<int> userId, ObjectParameter success)
        {
            var detailIdParameter = detailId.HasValue ?
                new ObjectParameter("DetailId", detailId) :
                new ObjectParameter("DetailId", typeof(int));
    
            var referredByIdParameter = referredById.HasValue ?
                new ObjectParameter("ReferredById", referredById) :
                new ObjectParameter("ReferredById", typeof(int));
    
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ForwardReferees", detailIdParameter, referredByIdParameter, empIdsParameter, messageParameter, userIdParameter, success);
        }
    
        public virtual ObjectResult<Nullable<bool>> Proc_ChangeTrainingStatus(Nullable<int> trainingId, Nullable<int> status, Nullable<int> userId)
        {
            var trainingIdParameter = trainingId.HasValue ?
                new ObjectParameter("TrainingId", trainingId) :
                new ObjectParameter("TrainingId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Proc_ChangeTrainingStatus", trainingIdParameter, statusParameter, userIdParameter);
        }
    
        public virtual int Proc_AddTraining(string title, string description, Nullable<System.DateTime> tentativeDate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, string document, Nullable<int> userId, ObjectParameter success)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var tentativeDateParameter = tentativeDate.HasValue ?
                new ObjectParameter("TentativeDate", tentativeDate) :
                new ObjectParameter("TentativeDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var documentParameter = document != null ?
                new ObjectParameter("Document", document) :
                new ObjectParameter("Document", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddTraining", titleParameter, descriptionParameter, tentativeDateParameter, fromDateParameter, endDateParameter, documentParameter, userIdParameter, success);
        }
    
        public virtual int Proc_ApplyForTrainingSession(Nullable<int> trainingId, Nullable<int> employeeId, ObjectParameter success)
        {
            var trainingIdParameter = trainingId.HasValue ?
                new ObjectParameter("TrainingId", trainingId) :
                new ObjectParameter("TrainingId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ApplyForTrainingSession", trainingIdParameter, employeeIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_BulkActionOnApproveLegitimateRequest_Result> Proc_BulkActionOnApproveLegitimateRequest(string requestIds, string statusCode, string remarks, Nullable<int> userId, string userType)
        {
            var requestIdsParameter = requestIds != null ?
                new ObjectParameter("RequestIds", requestIds) :
                new ObjectParameter("RequestIds", typeof(string));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkActionOnApproveLegitimateRequest_Result>("Proc_BulkActionOnApproveLegitimateRequest", requestIdsParameter, statusCodeParameter, remarksParameter, userIdParameter, userTypeParameter);
        }
    
        public virtual ObjectResult<Proc_BulkActionOnApproveDataChange_Result> Proc_BulkActionOnApproveDataChange(string requestApplicationIds, string status, string remark, Nullable<int> userId)
        {
            var requestApplicationIdsParameter = requestApplicationIds != null ?
                new ObjectParameter("RequestApplicationIds", requestApplicationIds) :
                new ObjectParameter("RequestApplicationIds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkActionOnApproveDataChange_Result>("Proc_BulkActionOnApproveDataChange", requestApplicationIdsParameter, statusParameter, remarkParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Proc_FetchUserForTimesheets_Result> Proc_FetchUserForTimesheets(Nullable<int> userId, Nullable<int> category)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchUserForTimesheets_Result>("Proc_FetchUserForTimesheets", userIdParameter, categoryParameter);
        }
    
        public virtual ObjectResult<Proc_FetchLeaveDetailsForPromotionAndNewUser_Result> Proc_FetchLeaveDetailsForPromotionAndNewUser(Nullable<int> userId, Nullable<int> newDesignationId, Nullable<System.DateTime> promotionDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var newDesignationIdParameter = newDesignationId.HasValue ?
                new ObjectParameter("NewDesignationId", newDesignationId) :
                new ObjectParameter("NewDesignationId", typeof(int));
    
            var promotionDateParameter = promotionDate.HasValue ?
                new ObjectParameter("PromotionDate", promotionDate) :
                new ObjectParameter("PromotionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchLeaveDetailsForPromotionAndNewUser_Result>("Proc_FetchLeaveDetailsForPromotionAndNewUser", userIdParameter, newDesignationIdParameter, promotionDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetGoalReport_Result> Proc_GetGoalReport(Nullable<int> appraisalCycleId, Nullable<int> statusId)
        {
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetGoalReport_Result>("Proc_GetGoalReport", appraisalCycleIdParameter, statusIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetAccountApproverId")]
        public virtual IQueryable<Fun_GetAccountApproverId_Result> Fun_GetAccountApproverId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetAccountApproverId_Result>("[MISEntities].[Fun_GetAccountApproverId]()");
        }
    
        [DbFunction("MISEntities", "Fun_GetReimbursementMonthYear")]
        public virtual IQueryable<Fun_GetReimbursementMonthYear_Result> Fun_GetReimbursementMonthYear(Nullable<int> reimbursementTypeId)
        {
            var reimbursementTypeIdParameter = reimbursementTypeId.HasValue ?
                new ObjectParameter("ReimbursementTypeId", reimbursementTypeId) :
                new ObjectParameter("ReimbursementTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetReimbursementMonthYear_Result>("[MISEntities].[Fun_GetReimbursementMonthYear](@ReimbursementTypeId)", reimbursementTypeIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetReimbursementMonthYearToViewAndApprove")]
        public virtual IQueryable<Fun_GetReimbursementMonthYearToViewAndApprove_Result> Fun_GetReimbursementMonthYearToViewAndApprove()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetReimbursementMonthYearToViewAndApprove_Result>("[MISEntities].[Fun_GetReimbursementMonthYearToViewAndApprove]()");
        }
    
        public virtual int Proc_CancelReimbursementRequest(Nullable<int> userId, Nullable<int> reimbursementRequestId, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var reimbursementRequestIdParameter = reimbursementRequestId.HasValue ?
                new ObjectParameter("ReimbursementRequestId", reimbursementRequestId) :
                new ObjectParameter("ReimbursementRequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_CancelReimbursementRequest", userIdParameter, reimbursementRequestIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_FetchPendingLnsaShiftRequest_Result> Proc_FetchPendingLnsaShiftRequest(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> rMId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var rMIdParameter = rMId.HasValue ?
                new ObjectParameter("RMId", rMId) :
                new ObjectParameter("RMId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchPendingLnsaShiftRequest_Result>("Proc_FetchPendingLnsaShiftRequest", fromDateParameter, tillDateParameter, rMIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetReimbursementFormData_Result> Proc_GetReimbursementFormData(Nullable<int> reimbursementRequestId)
        {
            var reimbursementRequestIdParameter = reimbursementRequestId.HasValue ?
                new ObjectParameter("ReimbursementRequestId", reimbursementRequestId) :
                new ObjectParameter("ReimbursementRequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetReimbursementFormData_Result>("Proc_GetReimbursementFormData", reimbursementRequestIdParameter);
        }
    
        public virtual int Proc_SubmitReimbursementRequest(Nullable<int> userId, Nullable<long> reimbursementRequestId, string reimbursementType, ObjectParameter nextApproverId, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var reimbursementRequestIdParameter = reimbursementRequestId.HasValue ?
                new ObjectParameter("ReimbursementRequestId", reimbursementRequestId) :
                new ObjectParameter("ReimbursementRequestId", typeof(long));
    
            var reimbursementTypeParameter = reimbursementType != null ?
                new ObjectParameter("ReimbursementType", reimbursementType) :
                new ObjectParameter("ReimbursementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SubmitReimbursementRequest", userIdParameter, reimbursementRequestIdParameter, reimbursementTypeParameter, nextApproverId, success);
        }
    
        public virtual int Proc_SubmitUserAchievementForMidYear(Nullable<int> userId, Nullable<int> goalCycleId, string achievementXmlString, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var goalCycleIdParameter = goalCycleId.HasValue ?
                new ObjectParameter("GoalCycleId", goalCycleId) :
                new ObjectParameter("GoalCycleId", typeof(int));
    
            var achievementXmlStringParameter = achievementXmlString != null ?
                new ObjectParameter("AchievementXmlString", achievementXmlString) :
                new ObjectParameter("AchievementXmlString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SubmitUserAchievementForMidYear", userIdParameter, goalCycleIdParameter, achievementXmlStringParameter, success);
        }
    
        public virtual ObjectResult<Proc_FetchPendingApprovalsForUserId_Result> Proc_FetchPendingApprovalsForUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchPendingApprovalsForUserId_Result>("Proc_FetchPendingApprovalsForUserId", userIdParameter);
        }
    
        public virtual int Proc_UpdateApproverIdOnManagerChange(Nullable<int> employeeId, Nullable<int> rMId, Nullable<int> userId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var rMIdParameter = rMId.HasValue ?
                new ObjectParameter("RMId", rMId) :
                new ObjectParameter("RMId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_UpdateApproverIdOnManagerChange", employeeIdParameter, rMIdParameter, userIdParameter);
        }
    
        public virtual int Proc_AddUpdateReimbursementRequest(Nullable<int> userId, Nullable<long> reimbursementRequestId, Nullable<int> reimbursementTypeId, Nullable<decimal> reimbusrementRequestedAmt, string reimbursementXmlString, Nullable<int> month, Nullable<int> year, string remarks, ObjectParameter newReimbursementRequestId, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var reimbursementRequestIdParameter = reimbursementRequestId.HasValue ?
                new ObjectParameter("ReimbursementRequestId", reimbursementRequestId) :
                new ObjectParameter("ReimbursementRequestId", typeof(long));
    
            var reimbursementTypeIdParameter = reimbursementTypeId.HasValue ?
                new ObjectParameter("ReimbursementTypeId", reimbursementTypeId) :
                new ObjectParameter("ReimbursementTypeId", typeof(int));
    
            var reimbusrementRequestedAmtParameter = reimbusrementRequestedAmt.HasValue ?
                new ObjectParameter("ReimbusrementRequestedAmt", reimbusrementRequestedAmt) :
                new ObjectParameter("ReimbusrementRequestedAmt", typeof(decimal));
    
            var reimbursementXmlStringParameter = reimbursementXmlString != null ?
                new ObjectParameter("ReimbursementXmlString", reimbursementXmlString) :
                new ObjectParameter("ReimbursementXmlString", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateReimbursementRequest", userIdParameter, reimbursementRequestIdParameter, reimbursementTypeIdParameter, reimbusrementRequestedAmtParameter, reimbursementXmlStringParameter, monthParameter, yearParameter, remarksParameter, newReimbursementRequestId, success);
        }
    
        public virtual ObjectResult<Proc_GetReimbursementList_Result> Proc_GetReimbursementList(Nullable<int> userId, Nullable<int> reimbursementTypeId, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var reimbursementTypeIdParameter = reimbursementTypeId.HasValue ?
                new ObjectParameter("ReimbursementTypeId", reimbursementTypeId) :
                new ObjectParameter("ReimbursementTypeId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetReimbursementList_Result>("Proc_GetReimbursementList", userIdParameter, reimbursementTypeIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<Proc_GetReimbursementListToReview_Result> Proc_GetReimbursementListToReview(Nullable<int> loginUserId, Nullable<int> year, Nullable<int> reimbursementTypeId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var reimbursementTypeIdParameter = reimbursementTypeId.HasValue ?
                new ObjectParameter("ReimbursementTypeId", reimbursementTypeId) :
                new ObjectParameter("ReimbursementTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetReimbursementListToReview_Result>("Proc_GetReimbursementListToReview", loginUserIdParameter, yearParameter, reimbursementTypeIdParameter);
        }
    
        public virtual int Proc_TakeActionOnReimbursementRequest(Nullable<int> reimbursementRequestId, Nullable<int> reimbursementDetailId, Nullable<decimal> reimbApprovedAmt, string actionType, string remarks, Nullable<int> reimbursementTypeId, Nullable<int> loginUserId, ObjectParameter success)
        {
            var reimbursementRequestIdParameter = reimbursementRequestId.HasValue ?
                new ObjectParameter("ReimbursementRequestId", reimbursementRequestId) :
                new ObjectParameter("ReimbursementRequestId", typeof(int));
    
            var reimbursementDetailIdParameter = reimbursementDetailId.HasValue ?
                new ObjectParameter("ReimbursementDetailId", reimbursementDetailId) :
                new ObjectParameter("ReimbursementDetailId", typeof(int));
    
            var reimbApprovedAmtParameter = reimbApprovedAmt.HasValue ?
                new ObjectParameter("ReimbApprovedAmt", reimbApprovedAmt) :
                new ObjectParameter("ReimbApprovedAmt", typeof(decimal));
    
            var actionTypeParameter = actionType != null ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var reimbursementTypeIdParameter = reimbursementTypeId.HasValue ?
                new ObjectParameter("ReimbursementTypeId", reimbursementTypeId) :
                new ObjectParameter("ReimbursementTypeId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_TakeActionOnReimbursementRequest", reimbursementRequestIdParameter, reimbursementDetailIdParameter, reimbApprovedAmtParameter, actionTypeParameter, remarksParameter, reimbursementTypeIdParameter, loginUserIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_GetTeamMembersListForUserTeamMapping_Result> Proc_GetTeamMembersListForUserTeamMapping()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetTeamMembersListForUserTeamMapping_Result>("Proc_GetTeamMembersListForUserTeamMapping");
        }
    
        public virtual ObjectResult<spGetShiftUserMappingList_Result> spGetShiftUserMappingList(string teamIds, string shiftIds, string xmlString, Nullable<int> loginUserId)
        {
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            var shiftIdsParameter = shiftIds != null ?
                new ObjectParameter("ShiftIds", shiftIds) :
                new ObjectParameter("ShiftIds", typeof(string));
    
            var xmlStringParameter = xmlString != null ?
                new ObjectParameter("XmlString", xmlString) :
                new ObjectParameter("XmlString", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetShiftUserMappingList_Result>("spGetShiftUserMappingList", teamIdsParameter, shiftIdsParameter, xmlStringParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spInsertLnsaRequest(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string reason, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spInsertLnsaRequest", fromDateParameter, tillDateParameter, reasonParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetTeamLeaves_Result> Proc_GetTeamLeaves(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetTeamLeaves_Result>("Proc_GetTeamLeaves", userIdParameter);
        }
    
        public virtual ObjectResult<string> spGetAvailableLeaveCombination(Nullable<int> userid, Nullable<double> noOfWorkingDays, Nullable<long> leaveApplicationId, Nullable<int> totalDays)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var noOfWorkingDaysParameter = noOfWorkingDays.HasValue ?
                new ObjectParameter("NoOfWorkingDays", noOfWorkingDays) :
                new ObjectParameter("NoOfWorkingDays", typeof(double));
    
            var leaveApplicationIdParameter = leaveApplicationId.HasValue ?
                new ObjectParameter("LeaveApplicationId", leaveApplicationId) :
                new ObjectParameter("LeaveApplicationId", typeof(long));
    
            var totalDaysParameter = totalDays.HasValue ?
                new ObjectParameter("TotalDays", totalDays) :
                new ObjectParameter("TotalDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAvailableLeaveCombination", useridParameter, noOfWorkingDaysParameter, leaveApplicationIdParameter, totalDaysParameter);
        }
    
        [DbFunction("MISEntities", "Fn_GetUserForExamLeaves")]
        public virtual IQueryable<Fn_GetUserForExamLeaves_Result> Fn_GetUserForExamLeaves(Nullable<int> userId, Nullable<int> noOfWorkingDays)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var noOfWorkingDaysParameter = noOfWorkingDays.HasValue ?
                new ObjectParameter("NoOfWorkingDays", noOfWorkingDays) :
                new ObjectParameter("NoOfWorkingDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_GetUserForExamLeaves_Result>("[MISEntities].[Fn_GetUserForExamLeaves](@UserId, @NoOfWorkingDays)", userIdParameter, noOfWorkingDaysParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetUserToViewAttendance")]
        public virtual IQueryable<Fun_GetUserToViewAttendance_Result> Fun_GetUserToViewAttendance(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetUserToViewAttendance_Result>("[MISEntities].[Fun_GetUserToViewAttendance](@UserId)", userIdParameter);
        }
    
        public virtual int Proc_MapLnsaShift(Nullable<int> employeeId, string dateId, string reason, ObjectParameter success)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var dateIdParameter = dateId != null ?
                new ObjectParameter("DateId", dateId) :
                new ObjectParameter("DateId", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_MapLnsaShift", employeeIdParameter, dateIdParameter, reasonParameter, success);
        }
    
        public virtual ObjectResult<spFetchAllApprovedLnsaRequest_Result> spFetchAllApprovedLnsaRequest(Nullable<int> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllApprovedLnsaRequest_Result>("spFetchAllApprovedLnsaRequest", userIdParameter, fromDateParameter, tillDateParameter);
        }
    
        public virtual ObjectResult<spFetchAllLnsaRequestStatusByUserId_Result> spFetchAllLnsaRequestStatusByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllLnsaRequestStatusByUserId_Result>("spFetchAllLnsaRequestStatusByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<spFetchAllPendingLnsaRequestByManagerId_Result> spFetchAllPendingLnsaRequestByManagerId(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllPendingLnsaRequestByManagerId_Result>("spFetchAllPendingLnsaRequestByManagerId", loginUserIdParameter);
        }
    
        public virtual ObjectResult<spFetchLastNApprovedLnsa_Result> spFetchLastNApprovedLnsa(Nullable<int> userId, Nullable<int> noOfRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var noOfRecordsParameter = noOfRecords.HasValue ?
                new ObjectParameter("NoOfRecords", noOfRecords) :
                new ObjectParameter("NoOfRecords", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchLastNApprovedLnsa_Result>("spFetchLastNApprovedLnsa", userIdParameter, noOfRecordsParameter);
        }
    
        public virtual ObjectResult<Proc_GetShiftMappingDetails_Result> Proc_GetShiftMappingDetails(Nullable<int> userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isPreviousMonthDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isPreviousMonthDateParameter = isPreviousMonthDate.HasValue ?
                new ObjectParameter("IsPreviousMonthDate", isPreviousMonthDate) :
                new ObjectParameter("IsPreviousMonthDate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetShiftMappingDetails_Result>("Proc_GetShiftMappingDetails", userIdParameter, startDateParameter, endDateParameter, isPreviousMonthDateParameter);
        }
    
        public virtual int spTakeActionOnLnsaRequest(Nullable<int> loginUserId, Nullable<long> requestId, string remarks, string statusCode, string actionCode, ObjectParameter success)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(long));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var actionCodeParameter = actionCode != null ?
                new ObjectParameter("ActionCode", actionCode) :
                new ObjectParameter("ActionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTakeActionOnLnsaRequest", loginUserIdParameter, requestIdParameter, remarksParameter, statusCodeParameter, actionCodeParameter, success);
        }
    
        public virtual ObjectResult<spSubmitAppraisalForm_Result> spSubmitAppraisalForm(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId, string overallRating)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var overallRatingParameter = overallRating != null ?
                new ObjectParameter("OverallRating", overallRating) :
                new ObjectParameter("OverallRating", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSubmitAppraisalForm_Result>("spSubmitAppraisalForm", loginUserIdParameter, empAppraisalSettingIdParameter, overallRatingParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetUserConsecutiveLeaves")]
        public virtual IQueryable<Fun_GetUserConsecutiveLeaves_Result> Fun_GetUserConsecutiveLeaves(Nullable<int> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetUserConsecutiveLeaves_Result>("[MISEntities].[Fun_GetUserConsecutiveLeaves](@UserId, @FromDate, @TillDate)", userIdParameter, fromDateParameter, tillDateParameter);
        }
    
        public virtual ObjectResult<spGetLeaveBalanceForAllUser_Result> spGetLeaveBalanceForAllUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeaveBalanceForAllUser_Result>("spGetLeaveBalanceForAllUser");
        }
    
        public virtual int Proc_AddClient(string clientName, Nullable<int> userId, ObjectParameter success)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddClient", clientNameParameter, userIdParameter, success);
        }
    
        public virtual ObjectResult<spGetUserAppliedLeaveForLWPChangeRequest_Result> spGetUserAppliedLeaveForLWPChangeRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserAppliedLeaveForLWPChangeRequest_Result>("spGetUserAppliedLeaveForLWPChangeRequest", userIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetUserWiseFinancialYear")]
        public virtual IQueryable<Fun_GetUserWiseFinancialYear_Result> Fun_GetUserWiseFinancialYear(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetUserWiseFinancialYear_Result>("[MISEntities].[Fun_GetUserWiseFinancialYear](@UserId)", userIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetFinancialYear")]
        public virtual IQueryable<Fun_GetFinancialYear_Result> Fun_GetFinancialYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetFinancialYear_Result>("[MISEntities].[Fun_GetFinancialYear]()");
        }
    
        public virtual ObjectResult<spGetWFHRequest_Result> spGetWFHRequest(Nullable<int> userId, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWFHRequest_Result>("spGetWFHRequest", userIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spGetCompOff_Result> spGetCompOff(Nullable<int> userID, Nullable<int> year)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCompOff_Result>("spGetCompOff", userIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<Proc_GetOutingReviewRequest_Result> Proc_GetOutingReviewRequest(Nullable<int> loginUserId, Nullable<int> year)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetOutingReviewRequest_Result>("Proc_GetOutingReviewRequest", loginUserIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<Proc_GetLegitimateLeave_Result> Proc_GetLegitimateLeave(Nullable<int> userId, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetLegitimateLeave_Result>("Proc_GetLegitimateLeave", userIdParameter, yearParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetAllAppraisalCycleId")]
        public virtual IQueryable<Fun_GetAllAppraisalCycleId_Result> Fun_GetAllAppraisalCycleId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetAllAppraisalCycleId_Result>("[MISEntities].[Fun_GetAllAppraisalCycleId]()");
        }
    
        public virtual int Proc_AddWeekOffUsers(string userIds, string dateIds, Nullable<int> loginUserId, ObjectParameter success)
        {
            var userIdsParameter = userIds != null ?
                new ObjectParameter("UserIds", userIds) :
                new ObjectParameter("UserIds", typeof(string));
    
            var dateIdsParameter = dateIds != null ?
                new ObjectParameter("DateIds", dateIds) :
                new ObjectParameter("DateIds", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddWeekOffUsers", userIdsParameter, dateIdsParameter, loginUserIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_GetCalendarForWeekOff_Result> Proc_GetCalendarForWeekOff(Nullable<int> userId, Nullable<int> month, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetCalendarForWeekOff_Result>("Proc_GetCalendarForWeekOff", userIdParameter, monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmployeeWeekData_Result> Proc_GetEmployeeWeekData(Nullable<int> loginUserId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmployeeWeekData_Result>("Proc_GetEmployeeWeekData", loginUserIdParameter, fromDateParameter, tillDateParameter);
        }
    
        public virtual int Proc_CheckIfEligibleToRequestInvoice(Nullable<int> userId, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_CheckIfEligibleToRequestInvoice", userIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_GenerateInvoice_Result> Proc_GenerateInvoice(Nullable<int> clientId, Nullable<int> userId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GenerateInvoice_Result>("Proc_GenerateInvoice", clientIdParameter, userIdParameter);
        }
    
        public virtual int Proc_RequestInvoice(string requestXmlString, Nullable<int> userId, ObjectParameter success)
        {
            var requestXmlStringParameter = requestXmlString != null ?
                new ObjectParameter("RequestXmlString", requestXmlString) :
                new ObjectParameter("RequestXmlString", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_RequestInvoice", requestXmlStringParameter, userIdParameter, success);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> Proc_GetNextWorkingDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("Proc_GetNextWorkingDate");
        }
    
        public virtual int Proc_TakeActionOnOutingRequest(Nullable<long> outingRequestId, string statusCode, string remarks, Nullable<long> loginUserId, string loginUserType, Nullable<long> outingRequestDetailId, string cancelType, ObjectParameter success)
        {
            var outingRequestIdParameter = outingRequestId.HasValue ?
                new ObjectParameter("OutingRequestId", outingRequestId) :
                new ObjectParameter("OutingRequestId", typeof(long));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(long));
    
            var loginUserTypeParameter = loginUserType != null ?
                new ObjectParameter("LoginUserType", loginUserType) :
                new ObjectParameter("LoginUserType", typeof(string));
    
            var outingRequestDetailIdParameter = outingRequestDetailId.HasValue ?
                new ObjectParameter("OutingRequestDetailId", outingRequestDetailId) :
                new ObjectParameter("OutingRequestDetailId", typeof(long));
    
            var cancelTypeParameter = cancelType != null ?
                new ObjectParameter("CancelType", cancelType) :
                new ObjectParameter("CancelType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_TakeActionOnOutingRequest", outingRequestIdParameter, statusCodeParameter, remarksParameter, loginUserIdParameter, loginUserTypeParameter, outingRequestDetailIdParameter, cancelTypeParameter, success);
        }
    
        public virtual ObjectResult<spRequestWorkFromHome_Result> spRequestWorkFromHome(Nullable<int> userId, Nullable<System.DateTime> date, string reason, Nullable<double> noOfTotalDays, Nullable<double> noOfWorkingDays, string mobileNo, string leaveType, Nullable<bool> isFirstHalfWfh, Nullable<bool> isLastHalfWfh, Nullable<int> loginUserId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var noOfTotalDaysParameter = noOfTotalDays.HasValue ?
                new ObjectParameter("NoOfTotalDays", noOfTotalDays) :
                new ObjectParameter("NoOfTotalDays", typeof(double));
    
            var noOfWorkingDaysParameter = noOfWorkingDays.HasValue ?
                new ObjectParameter("NoOfWorkingDays", noOfWorkingDays) :
                new ObjectParameter("NoOfWorkingDays", typeof(double));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var isFirstHalfWfhParameter = isFirstHalfWfh.HasValue ?
                new ObjectParameter("IsFirstHalfWfh", isFirstHalfWfh) :
                new ObjectParameter("IsFirstHalfWfh", typeof(bool));
    
            var isLastHalfWfhParameter = isLastHalfWfh.HasValue ?
                new ObjectParameter("IsLastHalfWfh", isLastHalfWfh) :
                new ObjectParameter("IsLastHalfWfh", typeof(bool));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRequestWorkFromHome_Result>("spRequestWorkFromHome", userIdParameter, dateParameter, reasonParameter, noOfTotalDaysParameter, noOfWorkingDaysParameter, mobileNoParameter, leaveTypeParameter, isFirstHalfWfhParameter, isLastHalfWfhParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceForUserOnDashboard_Result> spGetAttendanceForUserOnDashboard(Nullable<int> userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceForUserOnDashboard_Result>("spGetAttendanceForUserOnDashboard", userIdParameter, startDateParameter, endDateParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetInvoicePermissionApproverEmails")]
        public virtual IQueryable<string> Fun_GetInvoicePermissionApproverEmails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[MISEntities].[Fun_GetInvoicePermissionApproverEmails]()");
        }
    
        public virtual ObjectResult<Proc_GetPunchInOutLogForStaff_Result> Proc_GetPunchInOutLogForStaff(Nullable<int> staffUserId, string attendanceDate)
        {
            var staffUserIdParameter = staffUserId.HasValue ?
                new ObjectParameter("StaffUserId", staffUserId) :
                new ObjectParameter("StaffUserId", typeof(int));
    
            var attendanceDateParameter = attendanceDate != null ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetPunchInOutLogForStaff_Result>("Proc_GetPunchInOutLogForStaff", staffUserIdParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceRegisterForSupportingStaffMembers_Result> spGetAttendanceRegisterForSupportingStaffMembers(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, Nullable<int> forEmployeeId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var forEmployeeIdParameter = forEmployeeId.HasValue ?
                new ObjectParameter("ForEmployeeId", forEmployeeId) :
                new ObjectParameter("ForEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceRegisterForSupportingStaffMembers_Result>("spGetAttendanceRegisterForSupportingStaffMembers", fromDateParameter, endDateParameter, forEmployeeIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetFinancialYearForInvoice")]
        public virtual IQueryable<Fun_GetFinancialYearForInvoice_Result> Fun_GetFinancialYearForInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetFinancialYearForInvoice_Result>("[MISEntities].[Fun_GetFinancialYearForInvoice]()");
        }
    
        [DbFunction("MISEntities", "Fun_GetQuartersForFY")]
        public virtual IQueryable<Fun_GetQuartersForFY_Result> Fun_GetQuartersForFY(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetQuartersForFY_Result>("[MISEntities].[Fun_GetQuartersForFY](@Year)", yearParameter);
        }
    
        public virtual int Proc_CheckIfAllowedToFillPimcoAchievements(Nullable<int> userId, Nullable<int> year, Nullable<int> qNumber, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var qNumberParameter = qNumber.HasValue ?
                new ObjectParameter("QNumber", qNumber) :
                new ObjectParameter("QNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_CheckIfAllowedToFillPimcoAchievements", userIdParameter, yearParameter, qNumberParameter, success);
        }
    
        [DbFunction("MISEntities", "Fun_GetRequiredUserDetailsToSendMail")]
        public virtual IQueryable<Fun_GetRequiredUserDetailsToSendMail_Result> Fun_GetRequiredUserDetailsToSendMail(string tag)
        {
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetRequiredUserDetailsToSendMail_Result>("[MISEntities].[Fun_GetRequiredUserDetailsToSendMail](@Tag)", tagParameter);
        }
    
        public virtual ObjectResult<Proc_GetUserWiseWeekDataInCalendar_Result> Proc_GetUserWiseWeekDataInCalendar(Nullable<int> loginUserId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetUserWiseWeekDataInCalendar_Result>("Proc_GetUserWiseWeekDataInCalendar", loginUserIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Proc_BulkActionOnApproveOuting_Result> Proc_BulkActionOnApproveOuting(string requestIds, string statusCode, string remarks, Nullable<int> userId, string userType)
        {
            var requestIdsParameter = requestIds != null ?
                new ObjectParameter("RequestIds", requestIds) :
                new ObjectParameter("RequestIds", typeof(string));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkActionOnApproveOuting_Result>("Proc_BulkActionOnApproveOuting", requestIdsParameter, statusCodeParameter, remarksParameter, userIdParameter, userTypeParameter);
        }
    
        public virtual ObjectResult<spGetCompOffReport_Result> spGetCompOffReport(string departmentId, string reportToId, string userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string locId)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var reportToIdParameter = reportToId != null ?
                new ObjectParameter("ReportToId", reportToId) :
                new ObjectParameter("ReportToId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var locIdParameter = locId != null ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCompOffReport_Result>("spGetCompOffReport", departmentIdParameter, reportToIdParameter, userIdParameter, fromDateParameter, tillDateParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeAttendanceSummary_Result> spGetEmployeeAttendanceSummary(string departmentId, string reportToId, string userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string locId)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var reportToIdParameter = reportToId != null ?
                new ObjectParameter("ReportToId", reportToId) :
                new ObjectParameter("ReportToId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var locIdParameter = locId != null ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeAttendanceSummary_Result>("spGetEmployeeAttendanceSummary", departmentIdParameter, reportToIdParameter, userIdParameter, fromDateParameter, tillDateParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spGetLnsaReport_Result> spGetLnsaReport(string departmentId, string reportToId, string userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string locId)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var reportToIdParameter = reportToId != null ?
                new ObjectParameter("ReportToId", reportToId) :
                new ObjectParameter("ReportToId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var locIdParameter = locId != null ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLnsaReport_Result>("spGetLnsaReport", departmentIdParameter, reportToIdParameter, userIdParameter, fromDateParameter, tillDateParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spGetLwpReport_Result> spGetLwpReport(string departmentId, string reportToId, string userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string locId)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var reportToIdParameter = reportToId != null ?
                new ObjectParameter("ReportToId", reportToId) :
                new ObjectParameter("ReportToId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var locIdParameter = locId != null ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLwpReport_Result>("spGetLwpReport", departmentIdParameter, reportToIdParameter, userIdParameter, fromDateParameter, tillDateParameter, locIdParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeAttendance_Result> spGetEmployeeAttendance(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, Nullable<int> departmentId, string forEmployeeIds, Nullable<int> rMId, string locId, Nullable<bool> fetchDataForEntireOrg)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var forEmployeeIdsParameter = forEmployeeIds != null ?
                new ObjectParameter("ForEmployeeIds", forEmployeeIds) :
                new ObjectParameter("ForEmployeeIds", typeof(string));
    
            var rMIdParameter = rMId.HasValue ?
                new ObjectParameter("RMId", rMId) :
                new ObjectParameter("RMId", typeof(int));
    
            var locIdParameter = locId != null ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(string));
    
            var fetchDataForEntireOrgParameter = fetchDataForEntireOrg.HasValue ?
                new ObjectParameter("FetchDataForEntireOrg", fetchDataForEntireOrg) :
                new ObjectParameter("FetchDataForEntireOrg", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeAttendance_Result>("spGetEmployeeAttendance", fromDateParameter, endDateParameter, departmentIdParameter, forEmployeeIdsParameter, rMIdParameter, locIdParameter, fetchDataForEntireOrgParameter);
        }
    
        public virtual int spAddUserAccessCardMapping(Nullable<int> accessCardId, Nullable<int> userId, Nullable<bool> isPimcoUserCardMapping, Nullable<int> createdBy, Nullable<bool> isStaff, Nullable<System.DateTime> fromDate, ObjectParameter userCardMappingId, ObjectParameter success)
        {
            var accessCardIdParameter = accessCardId.HasValue ?
                new ObjectParameter("AccessCardId", accessCardId) :
                new ObjectParameter("AccessCardId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isPimcoUserCardMappingParameter = isPimcoUserCardMapping.HasValue ?
                new ObjectParameter("IsPimcoUserCardMapping", isPimcoUserCardMapping) :
                new ObjectParameter("IsPimcoUserCardMapping", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isStaffParameter = isStaff.HasValue ?
                new ObjectParameter("IsStaff", isStaff) :
                new ObjectParameter("IsStaff", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUserAccessCardMapping", accessCardIdParameter, userIdParameter, isPimcoUserCardMappingParameter, createdByParameter, isStaffParameter, fromDateParameter, userCardMappingId, success);
        }
    
        public virtual int Proc_AddNewScheduler(string schedulerName, string description, string functionName, Nullable<int> repeatPeriod, string repeatType, Nullable<int> runFor, string ids, Nullable<System.DateTime> runDateTime, Nullable<bool> isCombinedEmail, Nullable<int> userId, ObjectParameter success)
        {
            var schedulerNameParameter = schedulerName != null ?
                new ObjectParameter("SchedulerName", schedulerName) :
                new ObjectParameter("SchedulerName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var functionNameParameter = functionName != null ?
                new ObjectParameter("FunctionName", functionName) :
                new ObjectParameter("FunctionName", typeof(string));
    
            var repeatPeriodParameter = repeatPeriod.HasValue ?
                new ObjectParameter("RepeatPeriod", repeatPeriod) :
                new ObjectParameter("RepeatPeriod", typeof(int));
    
            var repeatTypeParameter = repeatType != null ?
                new ObjectParameter("RepeatType", repeatType) :
                new ObjectParameter("RepeatType", typeof(string));
    
            var runForParameter = runFor.HasValue ?
                new ObjectParameter("RunFor", runFor) :
                new ObjectParameter("RunFor", typeof(int));
    
            var idsParameter = ids != null ?
                new ObjectParameter("Ids", ids) :
                new ObjectParameter("Ids", typeof(string));
    
            var runDateTimeParameter = runDateTime.HasValue ?
                new ObjectParameter("RunDateTime", runDateTime) :
                new ObjectParameter("RunDateTime", typeof(System.DateTime));
    
            var isCombinedEmailParameter = isCombinedEmail.HasValue ?
                new ObjectParameter("IsCombinedEmail", isCombinedEmail) :
                new ObjectParameter("IsCombinedEmail", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddNewScheduler", schedulerNameParameter, descriptionParameter, functionNameParameter, repeatPeriodParameter, repeatTypeParameter, runForParameter, idsParameter, runDateTimeParameter, isCombinedEmailParameter, userIdParameter, success);
        }
    
        public virtual int Proc_AddIssueCardDetails(Nullable<int> employeeId, Nullable<int> accessCardId, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> returnDate, string reason, Nullable<bool> isReturn, Nullable<int> userId, ObjectParameter success)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var accessCardIdParameter = accessCardId.HasValue ?
                new ObjectParameter("AccessCardId", accessCardId) :
                new ObjectParameter("AccessCardId", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var isReturnParameter = isReturn.HasValue ?
                new ObjectParameter("IsReturn", isReturn) :
                new ObjectParameter("IsReturn", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddIssueCardDetails", employeeIdParameter, accessCardIdParameter, issueDateParameter, returnDateParameter, reasonParameter, isReturnParameter, userIdParameter, success);
        }
    
        public virtual int Proc_SubmitAdvanceLeave(Nullable<int> employeeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string reason, Nullable<int> loginUserId, ObjectParameter success)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SubmitAdvanceLeave", employeeIdParameter, fromDateParameter, tillDateParameter, reasonParameter, loginUserIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_FetchPimcoUserHierarchy_Result> Proc_FetchPimcoUserHierarchy(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchPimcoUserHierarchy_Result>("Proc_FetchPimcoUserHierarchy", parentIdParameter);
        }
    
        public virtual int Proc_CancelAdvanceLeave(Nullable<long> advanceLeaveId, string type, Nullable<int> loginUserId, ObjectParameter success)
        {
            var advanceLeaveIdParameter = advanceLeaveId.HasValue ?
                new ObjectParameter("AdvanceLeaveId", advanceLeaveId) :
                new ObjectParameter("AdvanceLeaveId", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_CancelAdvanceLeave", advanceLeaveIdParameter, typeParameter, loginUserIdParameter, success);
        }
    
        public virtual int spManageEmployeeClientSideProjectAndManagerMapping(string mapping, ObjectParameter success, ObjectParameter message)
        {
            var mappingParameter = mapping != null ?
                new ObjectParameter("Mapping", mapping) :
                new ObjectParameter("Mapping", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spManageEmployeeClientSideProjectAndManagerMapping", mappingParameter, success, message);
        }
    
        [DbFunction("MISEntities", "Fun_FetchUsersOnshoreMgr")]
        public virtual IQueryable<Fun_FetchUsersOnshoreMgr_Result> Fun_FetchUsersOnshoreMgr(Nullable<int> userId, Nullable<int> forClientId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var forClientIdParameter = forClientId.HasValue ?
                new ObjectParameter("ForClientId", forClientId) :
                new ObjectParameter("ForClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_FetchUsersOnshoreMgr_Result>("[MISEntities].[Fun_FetchUsersOnshoreMgr](@UserId, @ForClientId)", userIdParameter, forClientIdParameter);
        }
    
        public virtual int Proc_AddOrUpdateUsersOnshoreMgr(Nullable<int> userId, Nullable<long> mappingId, string clientSideEmpId, Nullable<int> onshoreMgrId, string userValidFromDate, string userValidTillDate, Nullable<bool> notifyOnshoreMgr, Nullable<int> loginUserId, ObjectParameter success, ObjectParameter newCreatedMappingId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var mappingIdParameter = mappingId.HasValue ?
                new ObjectParameter("MappingId", mappingId) :
                new ObjectParameter("MappingId", typeof(long));
    
            var clientSideEmpIdParameter = clientSideEmpId != null ?
                new ObjectParameter("ClientSideEmpId", clientSideEmpId) :
                new ObjectParameter("ClientSideEmpId", typeof(string));
    
            var onshoreMgrIdParameter = onshoreMgrId.HasValue ?
                new ObjectParameter("OnshoreMgrId", onshoreMgrId) :
                new ObjectParameter("OnshoreMgrId", typeof(int));
    
            var userValidFromDateParameter = userValidFromDate != null ?
                new ObjectParameter("UserValidFromDate", userValidFromDate) :
                new ObjectParameter("UserValidFromDate", typeof(string));
    
            var userValidTillDateParameter = userValidTillDate != null ?
                new ObjectParameter("UserValidTillDate", userValidTillDate) :
                new ObjectParameter("UserValidTillDate", typeof(string));
    
            var notifyOnshoreMgrParameter = notifyOnshoreMgr.HasValue ?
                new ObjectParameter("NotifyOnshoreMgr", notifyOnshoreMgr) :
                new ObjectParameter("NotifyOnshoreMgr", typeof(bool));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddOrUpdateUsersOnshoreMgr", userIdParameter, mappingIdParameter, clientSideEmpIdParameter, onshoreMgrIdParameter, userValidFromDateParameter, userValidTillDateParameter, notifyOnshoreMgrParameter, loginUserIdParameter, success, newCreatedMappingId);
        }
    
        public virtual ObjectResult<Proc_FetchUsersOnshoreManagerData_Result> Proc_FetchUsersOnshoreManagerData(string userIds)
        {
            var userIdsParameter = userIds != null ?
                new ObjectParameter("UserIds", userIds) :
                new ObjectParameter("UserIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchUsersOnshoreManagerData_Result>("Proc_FetchUsersOnshoreManagerData", userIdsParameter);
        }
    
        public virtual ObjectResult<spGetLeaves_Result> spGetLeaves(Nullable<int> userId, string status, string userType, Nullable<int> year)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeaves_Result>("spGetLeaves", userIdParameter, statusParameter, userTypeParameter, yearParameter);
        }
    
        public virtual ObjectResult<Proc_GetPunchInOutLog_Result> Proc_GetPunchInOutLog(Nullable<int> userId, string attendanceDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var attendanceDateParameter = attendanceDate != null ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetPunchInOutLog_Result>("Proc_GetPunchInOutLog", userIdParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetTimeSheetInfoForAllSelectedUsers_Result> Proc_GetTimeSheetInfoForAllSelectedUsers(string timeSheetIds)
        {
            var timeSheetIdsParameter = timeSheetIds != null ?
                new ObjectParameter("TimeSheetIds", timeSheetIds) :
                new ObjectParameter("TimeSheetIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetTimeSheetInfoForAllSelectedUsers_Result>("Proc_GetTimeSheetInfoForAllSelectedUsers", timeSheetIdsParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetCurrentAppraisalCycle")]
        public virtual IQueryable<Fun_GetCurrentAppraisalCycle_Result> Fun_GetCurrentAppraisalCycle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetCurrentAppraisalCycle_Result>("[MISEntities].[Fun_GetCurrentAppraisalCycle]()");
        }
    
        public virtual ObjectResult<Proc_FetchPimcoOrgData_Result> Proc_FetchPimcoOrgData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchPimcoOrgData_Result>("Proc_FetchPimcoOrgData");
        }
    
        public virtual int Proc_CheckValidityForMonthlyAchievements(Nullable<int> userId, Nullable<int> year, Nullable<int> mNumber, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var mNumberParameter = mNumber.HasValue ?
                new ObjectParameter("MNumber", mNumber) :
                new ObjectParameter("MNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_CheckValidityForMonthlyAchievements", userIdParameter, yearParameter, mNumberParameter, success);
        }
    
        public virtual ObjectResult<Proc_FetchAllGeminiUsersForPimco_Result> Proc_FetchAllGeminiUsersForPimco()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchAllGeminiUsersForPimco_Result>("Proc_FetchAllGeminiUsersForPimco");
        }
    
        public virtual int Proc_SubmitUserMonthlyAchievement(Nullable<int> userId, Nullable<int> year, Nullable<int> mNumber, string comments, string achievementXmlString, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var mNumberParameter = mNumber.HasValue ?
                new ObjectParameter("MNumber", mNumber) :
                new ObjectParameter("MNumber", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var achievementXmlStringParameter = achievementXmlString != null ?
                new ObjectParameter("AchievementXmlString", achievementXmlString) :
                new ObjectParameter("AchievementXmlString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SubmitUserMonthlyAchievement", userIdParameter, yearParameter, mNumberParameter, commentsParameter, achievementXmlStringParameter, success);
        }
    
        public virtual int Proc_SubmitUserQuarterlyAchievement(Nullable<int> userId, Nullable<int> year, Nullable<int> qNumber, string comments, string achievementXmlString, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var qNumberParameter = qNumber.HasValue ?
                new ObjectParameter("QNumber", qNumber) :
                new ObjectParameter("QNumber", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var achievementXmlStringParameter = achievementXmlString != null ?
                new ObjectParameter("AchievementXmlString", achievementXmlString) :
                new ObjectParameter("AchievementXmlString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SubmitUserQuarterlyAchievement", userIdParameter, yearParameter, qNumberParameter, commentsParameter, achievementXmlStringParameter, success);
        }
    
        public virtual ObjectResult<Proc_GetPunchInOutLogForTempCard_Result> Proc_GetPunchInOutLogForTempCard(Nullable<int> userId, string accessCardNo, Nullable<System.DateTime> issueDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var accessCardNoParameter = accessCardNo != null ?
                new ObjectParameter("AccessCardNo", accessCardNo) :
                new ObjectParameter("AccessCardNo", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetPunchInOutLogForTempCard_Result>("Proc_GetPunchInOutLogForTempCard", userIdParameter, accessCardNoParameter, issueDateParameter);
        }
    
        public virtual ObjectResult<Proc_SelectTempCardDetailsForMIS_Result> Proc_SelectTempCardDetailsForMIS(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_SelectTempCardDetailsForMIS_Result>("Proc_SelectTempCardDetailsForMIS", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<Proc_GetPunchInOutLogForAllCard_Result> Proc_GetPunchInOutLogForAllCard(string accessCardNo, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate)
        {
            var accessCardNoParameter = accessCardNo != null ?
                new ObjectParameter("AccessCardNo", accessCardNo) :
                new ObjectParameter("AccessCardNo", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetPunchInOutLogForAllCard_Result>("Proc_GetPunchInOutLogForAllCard", accessCardNoParameter, fromDateParameter, tillDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetLeaveHistoryForFullNFinal_Result> Proc_GetLeaveHistoryForFullNFinal(Nullable<int> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string baseImagePath)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var baseImagePathParameter = baseImagePath != null ?
                new ObjectParameter("BaseImagePath", baseImagePath) :
                new ObjectParameter("BaseImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetLeaveHistoryForFullNFinal_Result>("Proc_GetLeaveHistoryForFullNFinal", userIdParameter, fromDateParameter, tillDateParameter, baseImagePathParameter);
        }
    
        public virtual ObjectResult<spFetchAllEmployeesByStatus_Result> spFetchAllEmployeesByStatus(Nullable<int> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllEmployeesByStatus_Result>("spFetchAllEmployeesByStatus", statusParameter);
        }
    
        public virtual ObjectResult<Proc_GetUsersLeaveBalanceForFnF_Result> Proc_GetUsersLeaveBalanceForFnF(Nullable<int> userId, Nullable<System.DateTime> dOL, Nullable<int> fetchForId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dOLParameter = dOL.HasValue ?
                new ObjectParameter("DOL", dOL) :
                new ObjectParameter("DOL", typeof(System.DateTime));
    
            var fetchForIdParameter = fetchForId.HasValue ?
                new ObjectParameter("FetchForId", fetchForId) :
                new ObjectParameter("FetchForId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetUsersLeaveBalanceForFnF_Result>("Proc_GetUsersLeaveBalanceForFnF", userIdParameter, dOLParameter, fetchForIdParameter);
        }
    
        public virtual ObjectResult<spGetAllEmployees_Result> spGetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllEmployees_Result>("spGetAllEmployees");
        }
    
        public virtual ObjectResult<spFetchAllActiveEmployees_Result> spFetchAllActiveEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllActiveEmployees_Result>("spFetchAllActiveEmployees");
        }
    
        public virtual ObjectResult<spFetchAllAccessCards_Result> spFetchAllAccessCards()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllAccessCards_Result>("spFetchAllAccessCards");
        }
    
        public virtual ObjectResult<spGetClubbedReport_Result> spGetClubbedReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, string rMId, string userId, string departmentId, string teamId, string locId, string status)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var rMIdParameter = rMId != null ?
                new ObjectParameter("RMId", rMId) :
                new ObjectParameter("RMId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var teamIdParameter = teamId != null ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(string));
    
            var locIdParameter = locId != null ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetClubbedReport_Result>("spGetClubbedReport", fromDateParameter, tillDateParameter, rMIdParameter, userIdParameter, departmentIdParameter, teamIdParameter, locIdParameter, statusParameter);
        }
    
        public virtual int Proc_AddUpdateAssetsDetail(Nullable<long> assetId, Nullable<long> assetTypeId, Nullable<int> brandId, string model, string serialNumber, string description, Nullable<bool> isActive, Nullable<int> loginUserId, ObjectParameter success, string vendorName, string invoiceNumber, Nullable<System.DateTime> invoiceDate, string orderNo)
        {
            var assetIdParameter = assetId.HasValue ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(long));
    
            var assetTypeIdParameter = assetTypeId.HasValue ?
                new ObjectParameter("AssetTypeId", assetTypeId) :
                new ObjectParameter("AssetTypeId", typeof(long));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("loginUserId", loginUserId) :
                new ObjectParameter("loginUserId", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateAssetsDetail", assetIdParameter, assetTypeIdParameter, brandIdParameter, modelParameter, serialNumberParameter, descriptionParameter, isActiveParameter, loginUserIdParameter, success, vendorNameParameter, invoiceNumberParameter, invoiceDateParameter, orderNoParameter);
        }
    
        public virtual int Proc_AddUpdateUsersAsset(Nullable<int> userId, string assetRequestIds, string assetIds, string fromDate, string tillDate, string remarks, string actionCode, Nullable<bool> isActive, Nullable<int> loginUserId, ObjectParameter success, ObjectParameter newAssetRequestIds, string department)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var assetRequestIdsParameter = assetRequestIds != null ?
                new ObjectParameter("AssetRequestIds", assetRequestIds) :
                new ObjectParameter("AssetRequestIds", typeof(string));
    
            var assetIdsParameter = assetIds != null ?
                new ObjectParameter("AssetIds", assetIds) :
                new ObjectParameter("AssetIds", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var tillDateParameter = tillDate != null ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var actionCodeParameter = actionCode != null ?
                new ObjectParameter("ActionCode", actionCode) :
                new ObjectParameter("ActionCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("loginUserId", loginUserId) :
                new ObjectParameter("loginUserId", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddUpdateUsersAsset", userIdParameter, assetRequestIdsParameter, assetIdsParameter, fromDateParameter, tillDateParameter, remarksParameter, actionCodeParameter, isActiveParameter, loginUserIdParameter, success, newAssetRequestIds, departmentParameter);
        }
    
        public virtual ObjectResult<Proc_GetAllAssetsDetail_Result> Proc_GetAllAssetsDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllAssetsDetail_Result>("Proc_GetAllAssetsDetail");
        }
    
        public virtual ObjectResult<Proc_GetAssetsDetailsByRequestId_Result> Proc_GetAssetsDetailsByRequestId(string assetRequestIds)
        {
            var assetRequestIdsParameter = assetRequestIds != null ?
                new ObjectParameter("AssetRequestIds", assetRequestIds) :
                new ObjectParameter("AssetRequestIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAssetsDetailsByRequestId_Result>("Proc_GetAssetsDetailsByRequestId", assetRequestIdsParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetCabRequestMonthYear")]
        public virtual IQueryable<Fun_GetCabRequestMonthYear_Result> Fun_GetCabRequestMonthYear(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetCabRequestMonthYear_Result>("[MISEntities].[Fun_GetCabRequestMonthYear](@UserId)", userIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetCabRequestDetail_Result> Proc_GetCabRequestDetail(Nullable<int> employeeId, Nullable<int> month, Nullable<int> year)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetCabRequestDetail_Result>("Proc_GetCabRequestDetail", employeeIdParameter, monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Proc_GetCabReviewRequest_Result> Proc_GetCabReviewRequest(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetCabReviewRequest_Result>("Proc_GetCabReviewRequest", loginUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_TakeActionOnCabBulkApprove_Result> Proc_TakeActionOnCabBulkApprove(string requestIds, string statusCode, string remarks, Nullable<int> loginUserId)
        {
            var requestIdsParameter = requestIds != null ?
                new ObjectParameter("RequestIds", requestIds) :
                new ObjectParameter("RequestIds", typeof(string));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_TakeActionOnCabBulkApprove_Result>("Proc_TakeActionOnCabBulkApprove", requestIdsParameter, statusCodeParameter, remarksParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetDatesForPickAndDrop_Result> Proc_GetDatesForPickAndDrop(Nullable<int> userId, Nullable<int> serviceTypeId, string forScreen)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            var forScreenParameter = forScreen != null ?
                new ObjectParameter("ForScreen", forScreen) :
                new ObjectParameter("ForScreen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetDatesForPickAndDrop_Result>("Proc_GetDatesForPickAndDrop", userIdParameter, serviceTypeIdParameter, forScreenParameter);
        }
    
        public virtual ObjectResult<Proc_FinalizeCabRequest_Result> Proc_FinalizeCabRequest(string cabRequestIds, Nullable<long> staffId, string staffName, string mobileNo, Nullable<int> vehicleId, Nullable<int> loginUserId)
        {
            var cabRequestIdsParameter = cabRequestIds != null ?
                new ObjectParameter("CabRequestIds", cabRequestIds) :
                new ObjectParameter("CabRequestIds", typeof(string));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(long));
    
            var staffNameParameter = staffName != null ?
                new ObjectParameter("StaffName", staffName) :
                new ObjectParameter("StaffName", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FinalizeCabRequest_Result>("Proc_FinalizeCabRequest", cabRequestIdsParameter, staffIdParameter, staffNameParameter, mobileNoParameter, vehicleIdParameter, loginUserIdParameter);
        }
    
        public virtual int Proc_BookOrUpdateCabRequest(Nullable<long> cabRequestId, Nullable<int> userId, Nullable<System.DateTime> date, Nullable<int> shiftId, Nullable<int> routeNo, Nullable<int> locationId, string locationDetail, Nullable<int> serviceTypeId, Nullable<int> companyLocationId, string empContactNo, ObjectParameter success, ObjectParameter message, ObjectParameter newCabRequestId)
        {
            var cabRequestIdParameter = cabRequestId.HasValue ?
                new ObjectParameter("CabRequestId", cabRequestId) :
                new ObjectParameter("CabRequestId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("ShiftId", shiftId) :
                new ObjectParameter("ShiftId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("RouteNo", routeNo) :
                new ObjectParameter("RouteNo", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var locationDetailParameter = locationDetail != null ?
                new ObjectParameter("LocationDetail", locationDetail) :
                new ObjectParameter("LocationDetail", typeof(string));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            var companyLocationIdParameter = companyLocationId.HasValue ?
                new ObjectParameter("CompanyLocationId", companyLocationId) :
                new ObjectParameter("CompanyLocationId", typeof(int));
    
            var empContactNoParameter = empContactNo != null ?
                new ObjectParameter("EmpContactNo", empContactNo) :
                new ObjectParameter("EmpContactNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_BookOrUpdateCabRequest", cabRequestIdParameter, userIdParameter, dateParameter, shiftIdParameter, routeNoParameter, locationIdParameter, locationDetailParameter, serviceTypeIdParameter, companyLocationIdParameter, empContactNoParameter, success, message, newCabRequestId);
        }
    
        public virtual ObjectResult<Proc_FetchCabInfoByCabRequestId_Result> Proc_FetchCabInfoByCabRequestId(string cabRequestIds)
        {
            var cabRequestIdsParameter = cabRequestIds != null ?
                new ObjectParameter("CabRequestIds", cabRequestIds) :
                new ObjectParameter("CabRequestIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchCabInfoByCabRequestId_Result>("Proc_FetchCabInfoByCabRequestId", cabRequestIdsParameter);
        }
    
        public virtual ObjectResult<Proc_GetCabShift_Result> Proc_GetCabShift(Nullable<int> userId, string dates, string serviceTypeIds, string forScreen)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var datesParameter = dates != null ?
                new ObjectParameter("Dates", dates) :
                new ObjectParameter("Dates", typeof(string));
    
            var serviceTypeIdsParameter = serviceTypeIds != null ?
                new ObjectParameter("ServiceTypeIds", serviceTypeIds) :
                new ObjectParameter("ServiceTypeIds", typeof(string));
    
            var forScreenParameter = forScreen != null ?
                new ObjectParameter("ForScreen", forScreen) :
                new ObjectParameter("ForScreen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetCabShift_Result>("Proc_GetCabShift", userIdParameter, datesParameter, serviceTypeIdsParameter, forScreenParameter);
        }
    
        public virtual ObjectResult<Proc_GetRouteLocationForCab_Result> Proc_GetRouteLocationForCab(Nullable<int> locationId, Nullable<int> routeNo, Nullable<int> serviceTypeId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("RouteNo", routeNo) :
                new ObjectParameter("RouteNo", typeof(int));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetRouteLocationForCab_Result>("Proc_GetRouteLocationForCab", locationIdParameter, routeNoParameter, serviceTypeIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetRoutesForCab_Result> Proc_GetRoutesForCab(string locationIds, string serviceTypeIds)
        {
            var locationIdsParameter = locationIds != null ?
                new ObjectParameter("LocationIds", locationIds) :
                new ObjectParameter("LocationIds", typeof(string));
    
            var serviceTypeIdsParameter = serviceTypeIds != null ?
                new ObjectParameter("ServiceTypeIds", serviceTypeIds) :
                new ObjectParameter("ServiceTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetRoutesForCab_Result>("Proc_GetRoutesForCab", locationIdsParameter, serviceTypeIdsParameter);
        }
    
        public virtual ObjectResult<spFetchPimcoRootProjects_Result> spFetchPimcoRootProjects(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchPimcoRootProjects_Result>("spFetchPimcoRootProjects", userIdParameter);
        }
    
        public virtual ObjectResult<Proc_FetchCabRequestDetailByRequestId_Result> Proc_FetchCabRequestDetailByRequestId(Nullable<long> fCRequestId)
        {
            var fCRequestIdParameter = fCRequestId.HasValue ?
                new ObjectParameter("FCRequestId", fCRequestId) :
                new ObjectParameter("FCRequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchCabRequestDetailByRequestId_Result>("Proc_FetchCabRequestDetailByRequestId", fCRequestIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetCabRequestToFinalize_Result> Proc_GetCabRequestToFinalize(string date, Nullable<int> companyLocationId, Nullable<int> shiftId, Nullable<int> routeNo, Nullable<int> loginUserId)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var companyLocationIdParameter = companyLocationId.HasValue ?
                new ObjectParameter("CompanyLocationId", companyLocationId) :
                new ObjectParameter("CompanyLocationId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("ShiftId", shiftId) :
                new ObjectParameter("ShiftId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("RouteNo", routeNo) :
                new ObjectParameter("RouteNo", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetCabRequestToFinalize_Result>("Proc_GetCabRequestToFinalize", dateParameter, companyLocationIdParameter, shiftIdParameter, routeNoParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetFinalizedCabRequestDetail_Result> Proc_GetFinalizedCabRequestDetail(Nullable<long> fCRequestId, Nullable<int> shiftId, Nullable<int> companyLocationId, Nullable<int> routeNo)
        {
            var fCRequestIdParameter = fCRequestId.HasValue ?
                new ObjectParameter("FCRequestId", fCRequestId) :
                new ObjectParameter("FCRequestId", typeof(long));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("ShiftId", shiftId) :
                new ObjectParameter("ShiftId", typeof(int));
    
            var companyLocationIdParameter = companyLocationId.HasValue ?
                new ObjectParameter("CompanyLocationId", companyLocationId) :
                new ObjectParameter("CompanyLocationId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("RouteNo", routeNo) :
                new ObjectParameter("RouteNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetFinalizedCabRequestDetail_Result>("Proc_GetFinalizedCabRequestDetail", fCRequestIdParameter, shiftIdParameter, companyLocationIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Proc_GetGroupedCabRequestToFinalize_Result> Proc_GetGroupedCabRequestToFinalize(string dates, string companyLocationIds, string serviceTypeIds, string shiftIds, string routeIds, Nullable<int> loginUserId)
        {
            var datesParameter = dates != null ?
                new ObjectParameter("Dates", dates) :
                new ObjectParameter("Dates", typeof(string));
    
            var companyLocationIdsParameter = companyLocationIds != null ?
                new ObjectParameter("CompanyLocationIds", companyLocationIds) :
                new ObjectParameter("CompanyLocationIds", typeof(string));
    
            var serviceTypeIdsParameter = serviceTypeIds != null ?
                new ObjectParameter("ServiceTypeIds", serviceTypeIds) :
                new ObjectParameter("ServiceTypeIds", typeof(string));
    
            var shiftIdsParameter = shiftIds != null ?
                new ObjectParameter("ShiftIds", shiftIds) :
                new ObjectParameter("ShiftIds", typeof(string));
    
            var routeIdsParameter = routeIds != null ?
                new ObjectParameter("RouteIds", routeIds) :
                new ObjectParameter("RouteIds", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetGroupedCabRequestToFinalize_Result>("Proc_GetGroupedCabRequestToFinalize", datesParameter, companyLocationIdsParameter, serviceTypeIdsParameter, shiftIdsParameter, routeIdsParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetGroupedFinalizedCabRequest_Result> Proc_GetGroupedFinalizedCabRequest(string dates, string companyLocationIds, string serviceTypeIds, string shiftIds, string routeIds, Nullable<int> loginUserId)
        {
            var datesParameter = dates != null ?
                new ObjectParameter("Dates", dates) :
                new ObjectParameter("Dates", typeof(string));
    
            var companyLocationIdsParameter = companyLocationIds != null ?
                new ObjectParameter("CompanyLocationIds", companyLocationIds) :
                new ObjectParameter("CompanyLocationIds", typeof(string));
    
            var serviceTypeIdsParameter = serviceTypeIds != null ?
                new ObjectParameter("ServiceTypeIds", serviceTypeIds) :
                new ObjectParameter("ServiceTypeIds", typeof(string));
    
            var shiftIdsParameter = shiftIds != null ?
                new ObjectParameter("ShiftIds", shiftIds) :
                new ObjectParameter("ShiftIds", typeof(string));
    
            var routeIdsParameter = routeIds != null ?
                new ObjectParameter("RouteIds", routeIds) :
                new ObjectParameter("RouteIds", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetGroupedFinalizedCabRequest_Result>("Proc_GetGroupedFinalizedCabRequest", datesParameter, companyLocationIdsParameter, serviceTypeIdsParameter, shiftIdsParameter, routeIdsParameter, loginUserIdParameter);
        }
    
        [DbFunction("MISEntities", "Fn_GetCutOffTimeValidityForCabBooking")]
        public virtual IQueryable<Nullable<bool>> Fn_GetCutOffTimeValidityForCabBooking(Nullable<System.DateTime> date, string forScreen)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var forScreenParameter = forScreen != null ?
                new ObjectParameter("ForScreen", forScreen) :
                new ObjectParameter("ForScreen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<bool>>("[MISEntities].[Fn_GetCutOffTimeValidityForCabBooking](@Date, @ForScreen)", dateParameter, forScreenParameter);
        }
    
        public virtual int Proc_ChangeUserLocationAndMapUserOnshore(Nullable<int> userId, Nullable<int> newCmpnyLocationId, string newEmployeeCode, string newExtensionNumber, string workStationNo, Nullable<int> loginUserId, string action, ObjectParameter success)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var newCmpnyLocationIdParameter = newCmpnyLocationId.HasValue ?
                new ObjectParameter("NewCmpnyLocationId", newCmpnyLocationId) :
                new ObjectParameter("NewCmpnyLocationId", typeof(int));
    
            var newEmployeeCodeParameter = newEmployeeCode != null ?
                new ObjectParameter("NewEmployeeCode", newEmployeeCode) :
                new ObjectParameter("NewEmployeeCode", typeof(string));
    
            var newExtensionNumberParameter = newExtensionNumber != null ?
                new ObjectParameter("NewExtensionNumber", newExtensionNumber) :
                new ObjectParameter("NewExtensionNumber", typeof(string));
    
            var workStationNoParameter = workStationNo != null ?
                new ObjectParameter("WorkStationNo", workStationNo) :
                new ObjectParameter("WorkStationNo", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ChangeUserLocationAndMapUserOnshore", userIdParameter, newCmpnyLocationIdParameter, newEmployeeCodeParameter, newExtensionNumberParameter, workStationNoParameter, loginUserIdParameter, actionParameter, success);
        }
    
        public virtual ObjectResult<Proc_FetchOffshoreUsers_Result> Proc_FetchOffshoreUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchOffshoreUsers_Result>("Proc_FetchOffshoreUsers");
        }
    
        public virtual ObjectResult<Proc_FetchOnshoreUsers_Result> Proc_FetchOnshoreUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchOnshoreUsers_Result>("Proc_FetchOnshoreUsers");
        }
    
        public virtual int Proc_ActionCutOffTimeInfo(Nullable<long> cabRequestId, ObjectParameter response)
        {
            var cabRequestIdParameter = cabRequestId.HasValue ?
                new ObjectParameter("CabRequestId", cabRequestId) :
                new ObjectParameter("CabRequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ActionCutOffTimeInfo", cabRequestIdParameter, response);
        }
    
        public virtual int Proc_TakeActionOnCabRequestByAdmin(Nullable<long> cabRequestId, string statusCode, string remarks, Nullable<int> loginUserId, ObjectParameter success)
        {
            var cabRequestIdParameter = cabRequestId.HasValue ?
                new ObjectParameter("CabRequestId", cabRequestId) :
                new ObjectParameter("CabRequestId", typeof(long));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_TakeActionOnCabRequestByAdmin", cabRequestIdParameter, statusCodeParameter, remarksParameter, loginUserIdParameter, success);
        }
    
        public virtual int Proc_TakeActionOnCabRequestByMGR(Nullable<long> cabRequestId, string statusCode, string remarks, Nullable<int> loginUserId, ObjectParameter success)
        {
            var cabRequestIdParameter = cabRequestId.HasValue ?
                new ObjectParameter("CabRequestId", cabRequestId) :
                new ObjectParameter("CabRequestId", typeof(long));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_TakeActionOnCabRequestByMGR", cabRequestIdParameter, statusCodeParameter, remarksParameter, loginUserIdParameter, success);
        }
    
        public virtual int Proc_TakeActionOnCabRequestByUser(Nullable<long> cabRequestId, string statusCode, string remarks, Nullable<int> loginUserId, ObjectParameter success)
        {
            var cabRequestIdParameter = cabRequestId.HasValue ?
                new ObjectParameter("CabRequestId", cabRequestId) :
                new ObjectParameter("CabRequestId", typeof(long));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_TakeActionOnCabRequestByUser", cabRequestIdParameter, statusCodeParameter, remarksParameter, loginUserIdParameter, success);
        }
    
        public virtual int spSaveNewUser(Nullable<long> registrationId, string userName, string dob, string bloodGroup, string emailId, string mobileNumber, string employeeId, Nullable<int> departmentId, Nullable<int> designationId, Nullable<int> probationPeriod, Nullable<long> teamId, string wsNo, string extensionNo, string doj, Nullable<int> roleId, Nullable<int> reportingManagerId, Nullable<int> userId, string passwordResetCode, ObjectParameter success, ObjectParameter newUser)
        {
            var registrationIdParameter = registrationId.HasValue ?
                new ObjectParameter("RegistrationId", registrationId) :
                new ObjectParameter("RegistrationId", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var dobParameter = dob != null ?
                new ObjectParameter("Dob", dob) :
                new ObjectParameter("Dob", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            var probationPeriodParameter = probationPeriod.HasValue ?
                new ObjectParameter("ProbationPeriod", probationPeriod) :
                new ObjectParameter("ProbationPeriod", typeof(int));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(long));
    
            var wsNoParameter = wsNo != null ?
                new ObjectParameter("WsNo", wsNo) :
                new ObjectParameter("WsNo", typeof(string));
    
            var extensionNoParameter = extensionNo != null ?
                new ObjectParameter("ExtensionNo", extensionNo) :
                new ObjectParameter("ExtensionNo", typeof(string));
    
            var dojParameter = doj != null ?
                new ObjectParameter("Doj", doj) :
                new ObjectParameter("Doj", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var reportingManagerIdParameter = reportingManagerId.HasValue ?
                new ObjectParameter("ReportingManagerId", reportingManagerId) :
                new ObjectParameter("ReportingManagerId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var passwordResetCodeParameter = passwordResetCode != null ?
                new ObjectParameter("PasswordResetCode", passwordResetCode) :
                new ObjectParameter("PasswordResetCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveNewUser", registrationIdParameter, userNameParameter, dobParameter, bloodGroupParameter, emailIdParameter, mobileNumberParameter, employeeIdParameter, departmentIdParameter, designationIdParameter, probationPeriodParameter, teamIdParameter, wsNoParameter, extensionNoParameter, dojParameter, roleIdParameter, reportingManagerIdParameter, userIdParameter, passwordResetCodeParameter, success, newUser);
        }
    
        public virtual ObjectResult<spGetAllUserRegistrations_Result> spGetAllUserRegistrations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUserRegistrations_Result>("spGetAllUserRegistrations");
        }
    
        public virtual ObjectResult<Proc_GetAllAssetsByUserId_Result> Proc_GetAllAssetsByUserId(string actionCode, Nullable<int> userId, Nullable<int> loginUserId)
        {
            var actionCodeParameter = actionCode != null ?
                new ObjectParameter("ActionCode", actionCode) :
                new ObjectParameter("ActionCode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllAssetsByUserId_Result>("Proc_GetAllAssetsByUserId", actionCodeParameter, userIdParameter, loginUserIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetAssetsTypeRoleWise")]
        public virtual IQueryable<Fun_GetAssetsTypeRoleWise_Result> Fun_GetAssetsTypeRoleWise(Nullable<int> loginUserId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetAssetsTypeRoleWise_Result>("[MISEntities].[Fun_GetAssetsTypeRoleWise](@LoginUserId)", loginUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetAllUsersAssets_Result> Proc_GetAllUsersAssets(string actionCode, Nullable<int> loginUserId)
        {
            var actionCodeParameter = actionCode != null ?
                new ObjectParameter("ActionCode", actionCode) :
                new ObjectParameter("ActionCode", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllUsersAssets_Result>("Proc_GetAllUsersAssets", actionCodeParameter, loginUserIdParameter);
        }
    
        public virtual int Proc_BulkAllocateAssets(Nullable<int> loginUserId, string xmlString, ObjectParameter success, ObjectParameter newAssetRequestIds)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var xmlStringParameter = xmlString != null ?
                new ObjectParameter("XmlString", xmlString) :
                new ObjectParameter("XmlString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_BulkAllocateAssets", loginUserIdParameter, xmlStringParameter, success, newAssetRequestIds);
        }
    
        public virtual ObjectResult<Proc_BulkApproveLnsaRequest_Result> Proc_BulkApproveLnsaRequest(string lnsaRequestIds, string remarks, Nullable<int> loginUserId)
        {
            var lnsaRequestIdsParameter = lnsaRequestIds != null ?
                new ObjectParameter("LnsaRequestIds", lnsaRequestIds) :
                new ObjectParameter("LnsaRequestIds", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkApproveLnsaRequest_Result>("Proc_BulkApproveLnsaRequest", lnsaRequestIdsParameter, remarksParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetUsersLnsaRequestsDetail_Result> Proc_GetUsersLnsaRequestsDetail(string lnsaRequestIds, Nullable<int> loginUserId)
        {
            var lnsaRequestIdsParameter = lnsaRequestIds != null ?
                new ObjectParameter("LnsaRequestIds", lnsaRequestIds) :
                new ObjectParameter("LnsaRequestIds", typeof(string));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetUsersLnsaRequestsDetail_Result>("Proc_GetUsersLnsaRequestsDetail", lnsaRequestIdsParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetAllGeminiUsersSkill_Result> Proc_GetAllGeminiUsersSkill()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllGeminiUsersSkill_Result>("Proc_GetAllGeminiUsersSkill");
        }
    
        public virtual ObjectResult<spGetUserAppliedLeave_Result1> spGetUserAppliedLeave(Nullable<int> userID, Nullable<int> year, Nullable<bool> isWFHData, Nullable<bool> isOuting, Nullable<bool> isLnsa, Nullable<bool> isLegitimateLeave, Nullable<bool> isAdvanaceLeave)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var isWFHDataParameter = isWFHData.HasValue ?
                new ObjectParameter("IsWFHData", isWFHData) :
                new ObjectParameter("IsWFHData", typeof(bool));
    
            var isOutingParameter = isOuting.HasValue ?
                new ObjectParameter("IsOuting", isOuting) :
                new ObjectParameter("IsOuting", typeof(bool));
    
            var isLnsaParameter = isLnsa.HasValue ?
                new ObjectParameter("IsLnsa", isLnsa) :
                new ObjectParameter("IsLnsa", typeof(bool));
    
            var isLegitimateLeaveParameter = isLegitimateLeave.HasValue ?
                new ObjectParameter("IsLegitimateLeave", isLegitimateLeave) :
                new ObjectParameter("IsLegitimateLeave", typeof(bool));
    
            var isAdvanaceLeaveParameter = isAdvanaceLeave.HasValue ?
                new ObjectParameter("IsAdvanaceLeave", isAdvanaceLeave) :
                new ObjectParameter("IsAdvanaceLeave", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserAppliedLeave_Result1>("spGetUserAppliedLeave", userIDParameter, yearParameter, isWFHDataParameter, isOutingParameter, isLnsaParameter, isLegitimateLeaveParameter, isAdvanaceLeaveParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmpAppraisalSettingForManagement_Result> Proc_GetEmpAppraisalSettingForManagement(Nullable<bool> isTeamData, Nullable<int> appraisalCycleId, Nullable<int> locationId, string verticalIds, string divisionIds, string departmentIds, string teamIds, string designationIds, Nullable<int> employeeId, string appraisalStatusIds, string appraiserIds, string approverIds, Nullable<int> empAppraisalSettingId, Nullable<int> loginUserId)
        {
            var isTeamDataParameter = isTeamData.HasValue ?
                new ObjectParameter("IsTeamData", isTeamData) :
                new ObjectParameter("IsTeamData", typeof(bool));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var verticalIdsParameter = verticalIds != null ?
                new ObjectParameter("VerticalIds", verticalIds) :
                new ObjectParameter("VerticalIds", typeof(string));
    
            var divisionIdsParameter = divisionIds != null ?
                new ObjectParameter("DivisionIds", divisionIds) :
                new ObjectParameter("DivisionIds", typeof(string));
    
            var departmentIdsParameter = departmentIds != null ?
                new ObjectParameter("DepartmentIds", departmentIds) :
                new ObjectParameter("DepartmentIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            var designationIdsParameter = designationIds != null ?
                new ObjectParameter("DesignationIds", designationIds) :
                new ObjectParameter("DesignationIds", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var appraisalStatusIdsParameter = appraisalStatusIds != null ?
                new ObjectParameter("AppraisalStatusIds", appraisalStatusIds) :
                new ObjectParameter("AppraisalStatusIds", typeof(string));
    
            var appraiserIdsParameter = appraiserIds != null ?
                new ObjectParameter("AppraiserIds", appraiserIds) :
                new ObjectParameter("AppraiserIds", typeof(string));
    
            var approverIdsParameter = approverIds != null ?
                new ObjectParameter("ApproverIds", approverIds) :
                new ObjectParameter("ApproverIds", typeof(string));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpAppraisalSettingForManagement_Result>("Proc_GetEmpAppraisalSettingForManagement", isTeamDataParameter, appraisalCycleIdParameter, locationIdParameter, verticalIdsParameter, divisionIdsParameter, departmentIdsParameter, teamIdsParameter, designationIdsParameter, employeeIdParameter, appraisalStatusIdsParameter, appraiserIdsParameter, approverIdsParameter, empAppraisalSettingIdParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmpAppraisalFormForManagement_Result> Proc_GetEmpAppraisalFormForManagement(Nullable<int> loginUserId, Nullable<int> empAppraisalSettingId)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var empAppraisalSettingIdParameter = empAppraisalSettingId.HasValue ?
                new ObjectParameter("EmpAppraisalSettingId", empAppraisalSettingId) :
                new ObjectParameter("EmpAppraisalSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmpAppraisalFormForManagement_Result>("Proc_GetEmpAppraisalFormForManagement", loginUserIdParameter, empAppraisalSettingIdParameter);
        }
    
        public virtual ObjectResult<Proc_FetchAPIPermissions_Result> Proc_FetchAPIPermissions(string accessToken, Nullable<long> tokenExpiryInSecond)
        {
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("AccessToken", accessToken) :
                new ObjectParameter("AccessToken", typeof(string));
    
            var tokenExpiryInSecondParameter = tokenExpiryInSecond.HasValue ?
                new ObjectParameter("TokenExpiryInSecond", tokenExpiryInSecond) :
                new ObjectParameter("TokenExpiryInSecond", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FetchAPIPermissions_Result>("Proc_FetchAPIPermissions", accessTokenParameter, tokenExpiryInSecondParameter);
        }
    
        public virtual ObjectResult<Proc_GetProbationAndTrainingCompletionData_Result> Proc_GetProbationAndTrainingCompletionData(Nullable<System.DateTime> emailFromDate, Nullable<System.DateTime> emailTillDate)
        {
            var emailFromDateParameter = emailFromDate.HasValue ?
                new ObjectParameter("EmailFromDate", emailFromDate) :
                new ObjectParameter("EmailFromDate", typeof(System.DateTime));
    
            var emailTillDateParameter = emailTillDate.HasValue ?
                new ObjectParameter("EmailTillDate", emailTillDate) :
                new ObjectParameter("EmailTillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetProbationAndTrainingCompletionData_Result>("Proc_GetProbationAndTrainingCompletionData", emailFromDateParameter, emailTillDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetUsersActiveAssets_Result> Proc_GetUsersActiveAssets(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetUsersActiveAssets_Result>("Proc_GetUsersActiveAssets", userIdParameter);
        }
    
        public virtual ObjectResult<spGetGoalHistoryById_Result> spGetGoalHistoryById(Nullable<int> goalId)
        {
            var goalIdParameter = goalId.HasValue ?
                new ObjectParameter("GoalId", goalId) :
                new ObjectParameter("GoalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGoalHistoryById_Result>("spGetGoalHistoryById", goalIdParameter);
        }
    
        public virtual ObjectResult<spGetAllUserGoals_Result> spGetAllUserGoals(string userIds, Nullable<int> appraisalCycleId)
        {
            var userIdsParameter = userIds != null ?
                new ObjectParameter("UserIds", userIds) :
                new ObjectParameter("UserIds", typeof(string));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUserGoals_Result>("spGetAllUserGoals", userIdsParameter, appraisalCycleIdParameter);
        }
    
        public virtual int Proc_AddTeamGoals(Nullable<long> teamId, string goalXmlString, Nullable<int> userId, Nullable<int> goalCycleId)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(long));
    
            var goalXmlStringParameter = goalXmlString != null ?
                new ObjectParameter("GoalXmlString", goalXmlString) :
                new ObjectParameter("GoalXmlString", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var goalCycleIdParameter = goalCycleId.HasValue ?
                new ObjectParameter("GoalCycleId", goalCycleId) :
                new ObjectParameter("GoalCycleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddTeamGoals", teamIdParameter, goalXmlStringParameter, userIdParameter, goalCycleIdParameter);
        }
    
        public virtual int Proc_DraftTeamGoals(Nullable<int> teamId, string goalXmlString, Nullable<int> userId, Nullable<int> goalCycleId)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(int));
    
            var goalXmlStringParameter = goalXmlString != null ?
                new ObjectParameter("GoalXmlString", goalXmlString) :
                new ObjectParameter("GoalXmlString", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var goalCycleIdParameter = goalCycleId.HasValue ?
                new ObjectParameter("GoalCycleId", goalCycleId) :
                new ObjectParameter("GoalCycleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_DraftTeamGoals", teamIdParameter, goalXmlStringParameter, userIdParameter, goalCycleIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetTeamGoalHistoryById_Result> Proc_GetTeamGoalHistoryById(Nullable<int> goalId)
        {
            var goalIdParameter = goalId.HasValue ?
                new ObjectParameter("GoalId", goalId) :
                new ObjectParameter("GoalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetTeamGoalHistoryById_Result>("Proc_GetTeamGoalHistoryById", goalIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> Proc_SubmitTeamGoals(string goalIds, Nullable<int> userId)
        {
            var goalIdsParameter = goalIds != null ?
                new ObjectParameter("GoalIds", goalIds) :
                new ObjectParameter("GoalIds", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Proc_SubmitTeamGoals", goalIdsParameter, userIdParameter);
        }
    
        [DbFunction("MISEntities", "Fun_GetUserPrevilegesForTeamGoal")]
        public virtual IQueryable<Fun_GetUserPrevilegesForTeamGoal_Result> Fun_GetUserPrevilegesForTeamGoal(Nullable<int> userId, Nullable<int> teamId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetUserPrevilegesForTeamGoal_Result>("[MISEntities].[Fun_GetUserPrevilegesForTeamGoal](@UserId, @TeamId)", userIdParameter, teamIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetTeamsToReviewGoals_Result> Proc_GetTeamsToReviewGoals(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetTeamsToReviewGoals_Result>("Proc_GetTeamsToReviewGoals", userIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetTeamsToAddGoals_Result> Proc_GetTeamsToAddGoals(Nullable<int> userId, string type)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetTeamsToAddGoals_Result>("Proc_GetTeamsToAddGoals", userIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<Proc_GetAllTeamGoals_Result> Proc_GetAllTeamGoals(string teamIds, Nullable<int> appraisalCycleId, Nullable<int> userId)
        {
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("TeamIds", teamIds) :
                new ObjectParameter("TeamIds", typeof(string));
    
            var appraisalCycleIdParameter = appraisalCycleId.HasValue ?
                new ObjectParameter("AppraisalCycleId", appraisalCycleId) :
                new ObjectParameter("AppraisalCycleId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllTeamGoals_Result>("Proc_GetAllTeamGoals", teamIdsParameter, appraisalCycleIdParameter, userIdParameter);
        }
    
        public virtual int Proc_ApproveTeamGoal(string teamGoalIds, Nullable<int> userId, ObjectParameter success)
        {
            var teamGoalIdsParameter = teamGoalIds != null ?
                new ObjectParameter("TeamGoalIds", teamGoalIds) :
                new ObjectParameter("TeamGoalIds", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ApproveTeamGoal", teamGoalIdsParameter, userIdParameter, success);
        }
    
        public virtual int Proc_EditTeamGoal(Nullable<long> teamGoalId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string goal, Nullable<int> goalCategoryId, Nullable<int> userId, ObjectParameter success)
        {
            var teamGoalIdParameter = teamGoalId.HasValue ?
                new ObjectParameter("TeamGoalId", teamGoalId) :
                new ObjectParameter("TeamGoalId", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var goalParameter = goal != null ?
                new ObjectParameter("Goal", goal) :
                new ObjectParameter("Goal", typeof(string));
    
            var goalCategoryIdParameter = goalCategoryId.HasValue ?
                new ObjectParameter("GoalCategoryId", goalCategoryId) :
                new ObjectParameter("GoalCategoryId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_EditTeamGoal", teamGoalIdParameter, startDateParameter, endDateParameter, goalParameter, goalCategoryIdParameter, userIdParameter, success);
        }
    
        public virtual int Proc_SaveNewUserRegAddressInfo(string tempUserGuid, string addressXmlString, ObjectParameter success)
        {
            var tempUserGuidParameter = tempUserGuid != null ?
                new ObjectParameter("TempUserGuid", tempUserGuid) :
                new ObjectParameter("TempUserGuid", typeof(string));
    
            var addressXmlStringParameter = addressXmlString != null ?
                new ObjectParameter("AddressXmlString", addressXmlString) :
                new ObjectParameter("AddressXmlString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_SaveNewUserRegAddressInfo", tempUserGuidParameter, addressXmlStringParameter, success);
        }
    
        public virtual int Proc_ApproveGoal(string goalIds, Nullable<int> userId, ObjectParameter success)
        {
            var goalIdsParameter = goalIds != null ?
                new ObjectParameter("GoalIds", goalIds) :
                new ObjectParameter("GoalIds", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ApproveGoal", goalIdsParameter, userIdParameter, success);
        }
    
        public virtual ObjectResult<Proc_GetCOMPOffDataDateWise_Result> Proc_GetCOMPOffDataDateWise(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate, Nullable<int> leaveTypeId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            var leaveTypeIdParameter = leaveTypeId.HasValue ?
                new ObjectParameter("LeaveTypeId", leaveTypeId) :
                new ObjectParameter("LeaveTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetCOMPOffDataDateWise_Result>("Proc_GetCOMPOffDataDateWise", fromDateParameter, tillDateParameter, leaveTypeIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetLNSADataDateWise_Result> Proc_GetLNSADataDateWise(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetLNSADataDateWise_Result>("Proc_GetLNSADataDateWise", fromDateParameter, tillDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetGeminiUsers_Result> Proc_GetGeminiUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetGeminiUsers_Result>("Proc_GetGeminiUsers");
        }
    }
}
